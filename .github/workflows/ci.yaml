name: CI

on:
  push:
    paths-ignore:
      - "docs/**"
      - "**/*.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "**/*.md"

env:
  CARGO_TERM_COLOR: always

jobs:
  # -------------------------- test --------------------------
  valgrind_test:
    name: Valgrind test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.64.0
          override: true
          components: rustfmt

      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install valgrind and llvm
        run: sudo apt update && sudo apt install -y valgrind libclang-dev

      - uses: dart-lang/setup-dart@v1
        with:
          sdk: '2.17.6' # TODO upgrade later #655

      - name: Install dart dependencies (single block)
        working-directory: ./frb_example/pure_dart/dart
        run: dart pub get

      - name: Install dart dependencies (multi blocks)
        working-directory: ./frb_example/pure_dart_multi/dart
        run: dart pub get

      - name: Run valgrind script (single block)
        working-directory: ./frb_example/pure_dart/dart
        run: chmod +x ./run.sh ./valgrind_util.py && ./run.sh
        env:
          CARGO_TARGET_DIR: /home/runner # NOTE here, must be an absolute path, since in my script uses it in multiple different directories
          
      - name: Run valgrind script (multi blocks)
        working-directory: ./frb_example/pure_dart_multi/dart
        run: chmod +x ./run.sh && ./run.sh
        env:
          CARGO_TARGET_DIR: /home/runner # NOTE here, must be an absolute path, since in my script uses it in multiple different directories



  # ref https://medium.com/flutter-community/run-flutter-driver-tests-on-github-actions-13c639c7e4ab
  flutter_ios_test:
    name: Flutter (iOS) integration test
    strategy:
      matrix:
        device:
          - "iPad (7th generation) Simulator (15.2)"
          - "iPhone 12 Pro Max Simulator (15.2)"
      fail-fast: false
    uses: ./.github/workflows/flutter_ios_test.yml
    with:
      device: ${{ matrix.device }}

  # ref https://betterprogramming.pub/test-flutter-apps-on-android-with-github-actions-abdba2137b4
  flutter_android_test:
    name: Flutter (Android) integration test
    strategy:
      matrix:
        device:
          - "pixel"
          - "Nexus 6"
      fail-fast: false
    uses: ./.github/workflows/flutter_android_test.yml
    with:
      device: ${{ matrix.device }}

  flutter_windows_test:
    name: Flutter (Windows) integration test
    uses: ./.github/workflows/flutter_windows_test.yml

  flutter_macos_test:
    name: Flutter (macOS) integration test
    uses: ./.github/workflows/flutter_macos_test.yml

  flutter_linux_test:
    name: Flutter (Linux) integration test
    uses: ./.github/workflows/flutter_linux_test.yml
  
  dart_web_test:
    name: Dart (Web) unit tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown
          components: rust-src,rustfmt
          override: true
      - name: Install ffigen
        run: dart pub global activate ffigen
      - name: Cache dependencies
        id: test-cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            frb_codegen/target
            frb_example/pure_dart/rust/target/
            frb_example/pure_dart/dart/.local-chromium
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install crates
        if: steps.test-cache.outputs.cache-hit != 'true'
        run: |
          sh -c "$(curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf)" '' -f
      - name: Setup Dart dependencies
        run: dart pub get
        working-directory: frb_dart
      - name: Run library unit tests
        working-directory: ./frb_dart
        run:
          dart pub get &&
          dart test test/*.dart &&
          dart test -p chrome test/*.dart
      - name: Run tests
        timeout-minutes: 20
        uses: Wandalen/wretry.action@v1.0.25
        with:
          command:
            dart run ../../../frb_dart/bin/serve.dart
            -c ../rust --dart-input lib/main.web.dart --root web/ --run-tests
          current_path: frb_example/pure_dart/dart

  dart_vm_service_test:
    name: Test with --enable-vm-service
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.64.0
          override: true
          components: rustfmt

      - uses: dart-lang/setup-dart@v1
        with:
          sdk: '2.17.6' # TODO upgrade later #655
      - name: Install llvm dependency (Linux)
        run: sudo apt update && sudo apt-get install -y libclang-dev

      - name: Build pure_dart example
        working-directory: ./frb_example/pure_dart/rust
        run: cargo build --verbose
      - name: Run tests for pure_dart with vm service
        run: |
          dart run --enable-vm-service \
            ./frb_example/pure_dart/dart/lib/main_with_vm_service.dart \
            ./target/debug/libflutter_rust_bridge_example.so


  # -------------------------- linter --------------------------
  rust_build_and_test:
    name: Build and run Rust
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.64.0
          override: true
          components: rustfmt

      - uses: dart-lang/setup-dart@v1
        with:
          sdk: '2.17.6' # TODO upgrade later #655
      - name: Install llvm dependency (Linux)
        run: sudo apt update && sudo apt-get install -y libclang-dev
      - name: Build codegen
        working-directory: ./frb_codegen
        run: cargo build --verbose
      - name: Run tests for codegen
        working-directory: ./frb_codegen
        run: cargo test --verbose

      - name: Build rust runtime
        working-directory: ./frb_rust
        run: cargo build --verbose
      - name: Run tests for rust runtime
        working-directory: ./frb_rust
        run: cargo test --verbose

      - name: Build macros
        working-directory: ./frb_macros
        run: cargo build --verbose
      - name: Run tests for macros
        working-directory: ./frb_macros
        run: cargo test --verbose

      - name: Build pure_dart example
        working-directory: ./frb_example/pure_dart/rust
        run: cargo build --verbose
      - name: Run tests for pure_dart example
        working-directory: ./frb_example/pure_dart/rust
        run: cargo test --verbose

      - name: Build pure_dart_multi example
        working-directory: ./frb_example/pure_dart_multi/rust
        run: cargo build --verbose
      - name: Run tests for pure_dart_multi example
        working-directory: ./frb_example/pure_dart_multi/rust
        run: cargo test --verbose

      - name: Build with_flutter example
        working-directory: ./frb_example/with_flutter/rust
        run: cargo build --verbose
      - name: Run tests for with_flutter example
        working-directory: ./frb_example/with_flutter/rust
        run: cargo test --verbose

  rust_linter:
    name: Rust linter using Clippy and rustfmt
    runs-on: ubuntu-latest

    strategy:
      matrix:
        cargo_toolchain_version:
          - 1.64.0

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.cargo_toolchain_version }}
          components: rustfmt, clippy
          override: true

      - uses: dart-lang/setup-dart@v1
        with:
          sdk: '2.17.6' # TODO upgrade later #655
      - name: Install llvm dependency (Linux)
        run: sudo apt update && sudo apt-get install -y libclang-dev

      - name: Run fmt for codegen
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path=./frb_codegen/Cargo.toml --all -- --check
      - name: Run clippy for codegen
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=./frb_codegen/Cargo.toml -- -D warnings

      - name: Run fmt for rust runtime
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path=./frb_rust/Cargo.toml --all -- --check
      - name: Run clippy for rust runtime
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=./frb_rust/Cargo.toml -- -D warnings

      - name: Run fmt for rust macros
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path=./frb_macros/Cargo.toml --all -- --check
      - name: Run clippy for rust macros
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=./frb_macros/Cargo.toml -- -D warnings

      - name: Run fmt for pure_dart example
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path=./frb_example/pure_dart/rust/Cargo.toml --all -- --check
      - name: Run clippy for pure_dart example
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=./frb_example/pure_dart/rust/Cargo.toml -- -D warnings

      - name: Run fmt for pure_dart_multi example
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path=./frb_example/pure_dart_multi/rust/Cargo.toml --all -- --check
      - name: Run clippy for pure_dart_multi example
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=./frb_example/pure_dart_multi/rust/Cargo.toml -- -D warnings

      - name: Run fmt for with_flutter example
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path=./frb_example/with_flutter/rust/Cargo.toml --all -- --check
      - name: Run clippy for with_flutter example
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=./frb_example/with_flutter/rust/Cargo.toml -- -D warnings

  dart_linter:
    name: Dart linter using analyze and format

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603
        with:
          sdk: '2.17.6' # TODO upgrade later #655

      - name: Install dependencies for dart runtime
        working-directory: ./frb_dart
        run: dart pub get
      - name: Verify formatting for dart runtime
        working-directory: ./frb_dart
        # 80 instead of 120
        run: dart format --output=none --set-exit-if-changed --line-length 80 .
      - name: Analyze project source for dart runtime
        working-directory: ./frb_dart
        run: dart analyze --fatal-infos

      - name: Install dependencies for pure_dart example
        working-directory: ./frb_example/pure_dart/dart
        run: dart pub get
      - name: Verify formatting for pure_dart example
        working-directory: ./frb_example/pure_dart/dart
        run: dart format --output=none --set-exit-if-changed --line-length 120 .
      - name: Analyze project source for pure_dart example
        working-directory: ./frb_example/pure_dart/dart
        run: dart analyze --fatal-infos

      - name: Install dependencies for pure_dart_multi example
        working-directory: ./frb_example/pure_dart_multi/dart
        run: dart pub get
      - name: Verify formatting for pure_dart_multi example
        working-directory: ./frb_example/pure_dart_multi/dart
        run: dart format --output=none --set-exit-if-changed --line-length 120 .
      - name: Analyze project source for pure_dart_multi example
        working-directory: ./frb_example/pure_dart_multi/dart
        run: dart analyze --fatal-infos

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          # flutter-version: '3.3.1'
          # architecture: x64

      - name: Install dependencies for with_flutter example
        working-directory: ./frb_example/with_flutter
        run: flutter pub get
      - name: Verify formatting for with_flutter example
        working-directory: ./frb_example/with_flutter
        run: flutter format --output=none --set-exit-if-changed --line-length 120 .
      - name: Analyze project source for with_flutter example
        working-directory: ./frb_example/with_flutter
        run: flutter analyze --fatal-infos

      - name: Install pana
        run: flutter pub global activate pana

      - name: Analyze dart package using pana
        working-directory: ./frb_dart
        run: pana --no-warning --line-length 80 --exit-code-threshold 0

  # -------------------------- codegen --------------------------
  codegen:
    name: Run codegen
    strategy:
      fail-fast: false
      matrix:
        os:
          - image: macos-11
            family: osx
          - image: windows-2019
            family: windows
          - image: ubuntu-20.04
            family: linux

    uses: ./.github/workflows/code_generator.yml
    with:
      image: ${{ matrix.os.image }}
      family: ${{ matrix.os.family }}
