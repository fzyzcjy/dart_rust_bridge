# NOTE: Please keep in sync with `ci.yaml`
#
# Ensure README.md's steps can work correctly, where users use the released versions
# instead of the code in master branch
name: Post-Release

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0,30 * * * *"
  

env:
  CARGO_TERM_COLOR: always
  FRB_TEST_USE_RELEASE_VERSION: true

jobs:
  # -------------------------- test --------------------------
  valgrind_test:
    name: Valgrind test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Use released version of flutter_rust_bridge instead of master version
        run: just use_flutter_rust_bridge_release

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.68.0
          components: rustfmt
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: "3.0.0"
          architecture: x64
      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - run: just ci_valgrind

  # ref https://betterprogramming.pub/test-flutter-apps-on-android-with-github-actions-abdba2137b4
  flutter_test_android:
    name: Flutter integration test on Android
    runs-on: macos-latest
    strategy:
      matrix:
        device:
          - "pixel"
          - "Nexus 6"
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Use released version of flutter_rust_bridge instead of master version
        run: just use_flutter_rust_bridge_release

      - id: checkout
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.68.0
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: 3.10.0
          architecture: x64
      - uses: actions/setup-java@v1
        with:
          java-version: "8.x" # "betterprogramming.pub" says must be java "8"
      - uses: nttld/setup-ndk@v1
        with:
          ndk-version: r21e # r25b
          local-cache: true

      - uses: actions/cache@v3
        id: cache-deps
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./frb_example/with_flutter/rust/target
          key: ${{ runner.os }}-cargo-integrate-android-${{ hashFiles('**/Cargo.lock') }}-${{ steps.checkout.outputs.rustc_hash }}

      - name: Add Rust targets
        run: rustup target add x86_64-linux-android

      - name: Install `cargo-ndk`
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: cargo install cargo-ndk --force

      - name: Install Flutter dependencies
        working-directory: ./frb_example/with_flutter
        run: flutter pub get

      - name: Build Rust lib
        working-directory: ./frb_example/with_flutter/rust
        # NOTE since run on simulator, need -t to be x86_64. For real devices, of course arm-like ones.
        run: cargo ndk --bindgen -t x86_64 -o ../android/app/src/main/jniLibs build

      - name: Run Flutter integration tests
        continue-on-error: true
        timeout-minutes: 20
        uses: Wandalen/wretry.action@v1.0.25
        with:
          action: reactivecircus/android-emulator-runner@v2
          with: |
            api-level: 29
            arch: x86_64
            profile: ${{ matrix.device }}
            script: cd frb_example/with_flutter && flutter test integration_test/main.dart --verbose

  # -------------------------- codegen --------------------------
  codegen:
    name: Codegen
    runs-on: ${{ matrix.image }}

    strategy:
      fail-fast: false
      matrix:
        image:
          - macos-11
          - windows-2019
          - ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.68.0
          components: rustfmt, clippy
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: "3.10.0"
          architecture: x64
      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install released version of codegen
        run: cargo install flutter_rust_bridge_codegen --features="chrono,uuid"

      - run: just ci_codegen
