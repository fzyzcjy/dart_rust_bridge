// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

import 'package:logging/logging.dart';
import 'package:frb_example_dart_logging/Logger.dart';

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are not used by any `pub` functions: `Log2Dart`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `enabled`, `flush`, `from`, `log`

Stream<Log2DartLogRecord> initializeLog2Dart({required Level maxLogLevel}) =>
    RustLib.instance.api
        .crateApiLog2DartInitializeLog2Dart(maxLogLevel: maxLogLevel);

Future<void> changeLogLevel({required Level newLogLevel}) =>
    RustLib.instance.api
        .crateApiLog2DartChangeLogLevel(newLogLevel: newLogLevel);

class Log2DartLogRecord {
  final Level level;
  final String message;
  final String loggerName;

  const Log2DartLogRecord({
    required this.level,
    required this.message,
    required this.loggerName,
  });

  @override
  int get hashCode => level.hashCode ^ message.hashCode ^ loggerName.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Log2DartLogRecord &&
          runtimeType == other.runtimeType &&
          level == other.level &&
          message == other.message &&
          loggerName == other.loggerName;
}
