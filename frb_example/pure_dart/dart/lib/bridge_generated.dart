// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class FlutterRustBridgeExample {
  Future<Uint8List> getArray({dynamic hint});

  Future<Uint16List> returnArray({required Uint16List a, dynamic hint});

  Future<Uint16List> returnArrayAndVec({required Uint16List a, required Uint8List b, dynamic hint});

  Future<List<Point>> scaleArray({required List<Point> points, required double scale, dynamic hint});
}

class Point {
  final double x;
  final double y;

  Point({
    required this.x,
    required this.y,
  });
}

class FlutterRustBridgeExampleImpl extends FlutterRustBridgeBase<FlutterRustBridgeExampleWire>
    implements FlutterRustBridgeExample {
  factory FlutterRustBridgeExampleImpl(ffi.DynamicLibrary dylib) =>
      FlutterRustBridgeExampleImpl.raw(FlutterRustBridgeExampleWire(dylib));

  FlutterRustBridgeExampleImpl.raw(FlutterRustBridgeExampleWire inner) : super(inner);

  Future<Uint8List> getArray({dynamic hint}) {
    return executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => inner.wire_get_array(
        port_,
      ),
      parseSuccessData: _wire2api_ArrayPrimitive_u8_5,
      constMeta: const FlutterRustBridgeTaskConstMeta(
        debugName: "get_array",
        argNames: [],
      ),
      argValues: [],
      hint: hint,
    ));
  }

  Future<Uint16List> returnArray({required Uint16List a, dynamic hint}) {
    final __unique_var_0 = _api2wire_ArrayPrimitive_u16_2(a);
    return executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => inner.wire_return_array(port_, __unique_var_0),
      parseSuccessData: _wire2api_ArrayPrimitive_u16_2,
      constMeta: const FlutterRustBridgeTaskConstMeta(
        debugName: "return_array",
        argNames: ["a"],
      ),
      argValues: [a],
      hint: hint,
    ));
  }

  Future<Uint16List> returnArrayAndVec({required Uint16List a, required Uint8List b, dynamic hint}) {
    final __unique_var_0 = _api2wire_ArrayPrimitive_u16_2(a);
    final __unique_var_1 = _api2wire_uint_8_list(b);
    return executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => inner.wire_return_array_and_vec(port_, __unique_var_0, __unique_var_1),
      parseSuccessData: _wire2api_ArrayPrimitive_u16_2,
      constMeta: const FlutterRustBridgeTaskConstMeta(
        debugName: "return_array_and_vec",
        argNames: ["a", "b"],
      ),
      argValues: [a, b],
      hint: hint,
    ));
  }

  Future<List<Point>> scaleArray({required List<Point> points, required double scale, dynamic hint}) {
    final __unique_var_0 = _api2wire_ArrayGeneral_Point_2(points);
    final __unique_var_1 = _api2wire_f32(scale);
    return executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => inner.wire_scale_array(port_, __unique_var_0, __unique_var_1),
      parseSuccessData: _wire2api_ArrayGeneral_Point_2,
      constMeta: const FlutterRustBridgeTaskConstMeta(
        debugName: "scale_array",
        argNames: ["points", "scale"],
      ),
      argValues: [points, scale],
      hint: hint,
    ));
  }

  // Section: api2wire
  ffi.Pointer<wire_list_point> _api2wire_ArrayGeneral_Point_2(List<Point> raw) {
    final ans = inner.new_list_point(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_point(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  ffi.Pointer<wire_uint_16_list> _api2wire_ArrayPrimitive_u16_2(Uint16List raw) {
    final ans = inner.new_uint_16_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  double _api2wire_f32(double raw) {
    return raw;
  }

  ffi.Pointer<wire_list_point> _api2wire_list_point(List<Point> raw) {
    final ans = inner.new_list_point(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_point(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  int _api2wire_u16(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_16_list> _api2wire_uint_16_list(Uint16List raw) {
    final ans = inner.new_uint_16_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

  void _api_fill_to_wire_point(Point apiObj, wire_Point wireObj) {
    wireObj.x = _api2wire_f32(apiObj.x);
    wireObj.y = _api2wire_f32(apiObj.y);
  }
}

// Section: wire2api
List<Point> _wire2api_ArrayGeneral_Point_2(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_point).toList();
}

Uint16List _wire2api_ArrayPrimitive_u16_2(dynamic raw) {
  return raw as Uint16List;
}

Uint8List _wire2api_ArrayPrimitive_u8_5(dynamic raw) {
  return raw as Uint8List;
}

double _wire2api_f32(dynamic raw) {
  return raw as double;
}

List<Point> _wire2api_list_point(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_point).toList();
}

Point _wire2api_point(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return Point(
    x: _wire2api_f32(arr[0]),
    y: _wire2api_f32(arr[1]),
  );
}

int _wire2api_u16(dynamic raw) {
  return raw as int;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint16List _wire2api_uint_16_list(dynamic raw) {
  return raw as Uint16List;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class FlutterRustBridgeExampleWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterRustBridgeExampleWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterRustBridgeExampleWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void wire_get_array(
    int port_,
  ) {
    return _wire_get_array(
      port_,
    );
  }

  late final _wire_get_arrayPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_get_array');
  late final _wire_get_array = _wire_get_arrayPtr.asFunction<void Function(int)>();

  void wire_return_array(
    int port_,
    ffi.Pointer<wire_uint_16_list> a,
  ) {
    return _wire_return_array(
      port_,
      a,
    );
  }

  late final _wire_return_arrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_16_list>)>>('wire_return_array');
  late final _wire_return_array =
      _wire_return_arrayPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_16_list>)>();

  void wire_return_array_and_vec(
    int port_,
    ffi.Pointer<wire_uint_16_list> a,
    ffi.Pointer<wire_uint_8_list> b,
  ) {
    return _wire_return_array_and_vec(
      port_,
      a,
      b,
    );
  }

  late final _wire_return_array_and_vecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_16_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_return_array_and_vec');
  late final _wire_return_array_and_vec = _wire_return_array_and_vecPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_16_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_scale_array(
    int port_,
    ffi.Pointer<wire_list_point> points,
    double scale,
  ) {
    return _wire_scale_array(
      port_,
      points,
      scale,
    );
  }

  late final _wire_scale_arrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_point>, ffi.Float)>>(
          'wire_scale_array');
  late final _wire_scale_array =
      _wire_scale_arrayPtr.asFunction<void Function(int, ffi.Pointer<wire_list_point>, double)>();

  ffi.Pointer<wire_list_point> new_list_point(
    int len,
  ) {
    return _new_list_point(
      len,
    );
  }

  late final _new_list_pointPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_point> Function(ffi.Int32)>>('new_list_point');
  late final _new_list_point = _new_list_pointPtr.asFunction<ffi.Pointer<wire_list_point> Function(int)>();

  ffi.Pointer<wire_uint_16_list> new_uint_16_list(
    int len,
  ) {
    return _new_uint_16_list(
      len,
    );
  }

  late final _new_uint_16_listPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_16_list> Function(ffi.Int32)>>('new_uint_16_list');
  late final _new_uint_16_list = _new_uint_16_listPtr.asFunction<ffi.Pointer<wire_uint_16_list> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>('free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct =
      _free_WireSyncReturnStructPtr.asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_16_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> ptr;

  @ffi.Int32()
  external int len;
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Point extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;
}

class wire_list_point extends ffi.Struct {
  external ffi.Pointer<wire_Point> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
