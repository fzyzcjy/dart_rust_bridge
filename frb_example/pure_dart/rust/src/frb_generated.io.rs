// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.29.

// Section: imports

use super::*;
use crate::api::constructor::*;
use crate::api::dropping::*;
use crate::api::misc_no_twin_example_a::*;
use crate::api::misc_no_twin_example_b::*;
use crate::api::pseudo_manual::dropping_twin_rust_async::*;
use crate::api::pseudo_manual::dropping_twin_rust_async_sse::*;
use crate::api::pseudo_manual::dropping_twin_sse::*;
use crate::api::pseudo_manual::dropping_twin_sync::*;
use crate::api::pseudo_manual::dropping_twin_sync_sse::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_moi::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sse::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sync::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::*;
use crate::api::pseudo_manual::rust_opaque_sync_twin_moi::*;
use crate::api::pseudo_manual::rust_opaque_sync_twin_sse::*;
use crate::api::pseudo_manual::rust_opaque_sync_twin_sse_moi::*;
use crate::api::pseudo_manual::rust_opaque_twin_moi::*;
use crate::api::pseudo_manual::rust_opaque_twin_rust_async::*;
use crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::*;
use crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::*;
use crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::*;
use crate::api::pseudo_manual::rust_opaque_twin_sse::*;
use crate::api::pseudo_manual::rust_opaque_twin_sse_moi::*;
use crate::api::pseudo_manual::rust_opaque_twin_sync::*;
use crate::api::pseudo_manual::rust_opaque_twin_sync_moi::*;
use crate::api::pseudo_manual::rust_opaque_twin_sync_sse::*;
use crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::*;
use crate::api::rust_auto_opaque::*;
use crate::api::rust_opaque::*;
use crate::api::rust_opaque_sync::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_io!();

// Section: dart2rust

impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
    for *mut wire_cst_list_prim_u_8_strict
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
        unimplemented!()
    }
}
impl CstDecode<Box<dyn Fn(String) -> String + Send + Sync>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<dyn Fn(String) -> String + Send + Sync> {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    Box<dyn Fn(String) -> String + Send + Sync>,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<Box<dyn HelloTraitTwinMoi>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<dyn HelloTraitTwinMoi> {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinMoi>>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<Box<dyn HelloTraitTwinNormal>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<dyn HelloTraitTwinNormal> {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    Box<dyn HelloTraitTwinNormal>,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<Box<dyn HelloTraitTwinRustAsync>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<dyn HelloTraitTwinRustAsync> {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    Box<dyn HelloTraitTwinRustAsync>,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<Box<dyn HelloTraitTwinRustAsyncMoi>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<dyn HelloTraitTwinRustAsyncMoi> {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    Box<dyn HelloTraitTwinRustAsyncMoi>,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<Box<dyn HelloTraitTwinSync>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<dyn HelloTraitTwinSync> {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSync>>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<Box<dyn HelloTraitTwinSyncMoi>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<dyn HelloTraitTwinSyncMoi> {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    Box<dyn HelloTraitTwinSyncMoi>,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<Box<dyn MyTraitTwinMoi + Send + Sync>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<dyn MyTraitTwinMoi + Send + Sync> {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    Box<dyn MyTraitTwinMoi + Send + Sync>,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<Box<dyn MyTraitTwinNormal + Send + Sync>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<dyn MyTraitTwinNormal + Send + Sync> {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    Box<dyn MyTraitTwinNormal + Send + Sync>,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync> {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync>,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<Box<dyn MyTraitTwinRustAsync + Send + Sync>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<dyn MyTraitTwinRustAsync + Send + Sync> {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    Box<dyn MyTraitTwinRustAsync + Send + Sync>,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<Box<dyn MyTraitTwinSyncMoi + Send + Sync>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<dyn MyTraitTwinSyncMoi + Send + Sync> {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    Box<dyn MyTraitTwinSyncMoi + Send + Sync>,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<Box<dyn MyTraitTwinSync + Send + Sync>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<dyn MyTraitTwinSync + Send + Sync> {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    Box<dyn MyTraitTwinSync + Send + Sync>,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<ConstructorOpaqueStructTwinNormal> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> ConstructorOpaqueStructTwinNormal {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    ConstructorOpaqueStructTwinNormal,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<ConstructorOpaqueSyncStructTwinNormal> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> ConstructorOpaqueSyncStructTwinNormal {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    ConstructorOpaqueSyncStructTwinNormal,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<DroppableTwinNormal> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> DroppableTwinNormal {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinNormal>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<DroppableTwinRustAsync> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> DroppableTwinRustAsync {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinRustAsync>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<DroppableTwinSync> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> DroppableTwinSync {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinSync>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<EnumWithGoodAndOpaqueWithoutOptionTwinMoi> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> EnumWithGoodAndOpaqueWithoutOptionTwinMoi {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    EnumWithGoodAndOpaqueWithoutOptionTwinMoi,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<EnumWithGoodAndOpaqueWithoutOptionTwinNormal> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> EnumWithGoodAndOpaqueWithoutOptionTwinNormal {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    EnumWithGoodAndOpaqueWithoutOptionTwinNormal,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncMoi> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncMoi {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncMoi,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<EnumWithGoodAndOpaqueWithoutOptionTwinSync> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> EnumWithGoodAndOpaqueWithoutOptionTwinSync {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    EnumWithGoodAndOpaqueWithoutOptionTwinSync,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<EnumWithGoodAndOpaqueWithoutOptionTwinSyncMoi> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> EnumWithGoodAndOpaqueWithoutOptionTwinSyncMoi {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    EnumWithGoodAndOpaqueWithoutOptionTwinSyncMoi,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<NonCloneSimpleEnumTwinMoi> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> NonCloneSimpleEnumTwinMoi {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinMoi>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<NonCloneSimpleEnumTwinNormal> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> NonCloneSimpleEnumTwinNormal {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    NonCloneSimpleEnumTwinNormal,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<NonCloneSimpleEnumTwinRustAsync> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> NonCloneSimpleEnumTwinRustAsync {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    NonCloneSimpleEnumTwinRustAsync,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<NonCloneSimpleEnumTwinRustAsyncMoi> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> NonCloneSimpleEnumTwinRustAsyncMoi {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    NonCloneSimpleEnumTwinRustAsyncMoi,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<NonCloneSimpleEnumTwinSync> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> NonCloneSimpleEnumTwinSync {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinSync>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<NonCloneSimpleEnumTwinSyncMoi> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> NonCloneSimpleEnumTwinSyncMoi {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    NonCloneSimpleEnumTwinSyncMoi,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<NonCloneSimpleTwinMoi> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> NonCloneSimpleTwinMoi {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<NonCloneSimpleTwinNormal> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> NonCloneSimpleTwinNormal {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<NonCloneSimpleTwinRustAsync> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> NonCloneSimpleTwinRustAsync {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<NonCloneSimpleTwinRustAsyncMoi> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> NonCloneSimpleTwinRustAsyncMoi {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    NonCloneSimpleTwinRustAsyncMoi,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<NonCloneSimpleTwinSync> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> NonCloneSimpleTwinSync {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<NonCloneSimpleTwinSyncMoi> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> NonCloneSimpleTwinSyncMoi {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<OpaqueOneTwinMoi> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> OpaqueOneTwinMoi {
        CstDecode::<
            RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinMoi>>,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<OpaqueOneTwinNormal> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> OpaqueOneTwinNormal {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinNormal>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<OpaqueOneTwinRustAsync> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> OpaqueOneTwinRustAsync {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsync>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<OpaqueOneTwinRustAsyncMoi> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> OpaqueOneTwinRustAsyncMoi {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncMoi>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<OpaqueOneTwinSync> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> OpaqueOneTwinSync {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSync>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<OpaqueOneTwinSyncMoi> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> OpaqueOneTwinSyncMoi {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncMoi>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<OpaqueTwoTwinMoi> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> OpaqueTwoTwinMoi {
        CstDecode::<
            RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinMoi>>,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<OpaqueTwoTwinNormal> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> OpaqueTwoTwinNormal {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinNormal>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<OpaqueTwoTwinRustAsync> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> OpaqueTwoTwinRustAsync {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsync>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<OpaqueTwoTwinRustAsyncMoi> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> OpaqueTwoTwinRustAsyncMoi {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncMoi>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<OpaqueTwoTwinSync> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> OpaqueTwoTwinSync {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSync>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<OpaqueTwoTwinSyncMoi> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> OpaqueTwoTwinSyncMoi {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncMoi>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<StructInMiscNoTwinExampleA> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> StructInMiscNoTwinExampleA {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleA>,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<StructWithGoodAndOpaqueFieldWithoutOptionTwinMoi> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> StructWithGoodAndOpaqueFieldWithoutOptionTwinMoi {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    StructWithGoodAndOpaqueFieldWithoutOptionTwinMoi,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncMoi> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncMoi {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncMoi,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<StructWithGoodAndOpaqueFieldWithoutOptionTwinSync> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> StructWithGoodAndOpaqueFieldWithoutOptionTwinSync {
        CstDecode::<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    StructWithGoodAndOpaqueFieldWithoutOptionTwinSync,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncMoi> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncMoi {
        CstDecode::<
            RustOpaqueMoi<
                flutter_rust_bridge::for_generated::rust_async::RwLock<
                    StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncMoi,
                >,
            >,
        >::cst_decode(self)
        .rust_auto_opaque_decode_owned()
    }
}
impl CstDecode<backtrace::Backtrace> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> backtrace::Backtrace {
        unimplemented!()
    }
}
impl CstDecode<chrono::Duration> for i64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> chrono::Duration {
        chrono::Duration::microseconds(self)
    }
}
impl CstDecode<flutter_rust_bridge::DartOpaque> for *const std::ffi::c_void {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> flutter_rust_bridge::DartOpaque {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_dart_opaque(self as _) }
    }
}
impl CstDecode<[flutter_rust_bridge::DartOpaque; 1]> for *mut wire_cst_list_DartOpaque {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [flutter_rust_bridge::DartOpaque; 1] {
        let vec: Vec<flutter_rust_bridge::DartOpaque> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<std::collections::HashMap<String, String>>
    for *mut wire_cst_list_record_string_string
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<String, String> {
        let vec: Vec<(String, String)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<String, crate::api::enumeration::EnumSimpleTwinNormal>>
    for *mut wire_cst_list_record_string_enum_simple_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<String, crate::api::enumeration::EnumSimpleTwinNormal> {
        let vec: Vec<(String, crate::api::enumeration::EnumSimpleTwinNormal)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
        >,
    > for *mut wire_cst_list_record_string_enum_simple_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
    > {
        let vec: Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
        >,
    > for *mut wire_cst_list_record_string_enum_simple_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
    > {
        let vec: Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::mirror_twin_sync_sse::HashMapValue,
        >,
    > for *mut wire_cst_list_record_string_hash_map_value
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        String,
        crate::api::pseudo_manual::mirror_twin_sync_sse::HashMapValue,
    > {
        let vec: Vec<(
            String,
            crate::api::pseudo_manual::mirror_twin_sync_sse::HashMapValue,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<String, crate::api::enumeration::KitchenSinkTwinNormal>>
    for *mut wire_cst_list_record_string_kitchen_sink_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<String, crate::api::enumeration::KitchenSinkTwinNormal> {
        let vec: Vec<(String, crate::api::enumeration::KitchenSinkTwinNormal)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
        >,
    > for *mut wire_cst_list_record_string_kitchen_sink_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
    > {
        let vec: Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
        >,
    > for *mut wire_cst_list_record_string_kitchen_sink_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
    > {
        let vec: Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<String, Vec<u8>>>
    for *mut wire_cst_list_record_string_list_prim_u_8_strict
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<String, Vec<u8>> {
        let vec: Vec<(String, Vec<u8>)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<String, crate::auxiliary::sample_types::MySize>>
    for *mut wire_cst_list_record_string_my_size
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<String, crate::auxiliary::sample_types::MySize> {
        let vec: Vec<(String, crate::auxiliary::sample_types::MySize)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, String>> for *mut wire_cst_list_record_i_32_string {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<i32, String> {
        let vec: Vec<(i32, String)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
        >,
    > for *mut wire_cst_list_record_i_32_basic_general_enum_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<i32, crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>
    {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
        >,
    > for *mut wire_cst_list_record_i_32_basic_general_enum_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
        >,
    > for *mut wire_cst_list_record_i_32_basic_general_enum_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
        >,
    > for *mut wire_cst_list_record_i_32_basic_primitive_enum_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
        >,
    > for *mut wire_cst_list_record_i_32_basic_primitive_enum_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
        >,
    > for *mut wire_cst_list_record_i_32_basic_primitive_enum_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal>,
    > for *mut wire_cst_list_record_i_32_basic_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal>
    {
        let vec: Vec<(i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal)> =
            self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
        >,
    > for *mut wire_cst_list_record_i_32_basic_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
        >,
    > for *mut wire_cst_list_record_i_32_basic_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, bool>> for *mut wire_cst_list_record_i_32_bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<i32, bool> {
        let vec: Vec<(i32, bool)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, f32>> for *mut wire_cst_list_record_i_32_f_32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<i32, f32> {
        let vec: Vec<(i32, f32)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, f64>> for *mut wire_cst_list_record_i_32_f_64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<i32, f64> {
        let vec: Vec<(i32, f64)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, i16>> for *mut wire_cst_list_record_i_32_i_16 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<i32, i16> {
        let vec: Vec<(i32, i16)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, i32>> for *mut wire_cst_list_record_i_32_i_32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<i32, i32> {
        let vec: Vec<(i32, i32)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, i64>> for *mut wire_cst_list_record_i_32_i_64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<i32, i64> {
        let vec: Vec<(i32, i64)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, i8>> for *mut wire_cst_list_record_i_32_i_8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<i32, i8> {
        let vec: Vec<(i32, i8)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, isize>> for *mut wire_cst_list_record_i_32_isize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<i32, isize> {
        let vec: Vec<(i32, isize)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, Vec<u8>>>
    for *mut wire_cst_list_record_i_32_list_prim_u_8_strict
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<i32, Vec<u8>> {
        let vec: Vec<(i32, Vec<u8>)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, u16>> for *mut wire_cst_list_record_i_32_u_16 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<i32, u16> {
        let vec: Vec<(i32, u16)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, u32>> for *mut wire_cst_list_record_i_32_u_32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<i32, u32> {
        let vec: Vec<(i32, u32)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, u64>> for *mut wire_cst_list_record_i_32_u_64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<i32, u64> {
        let vec: Vec<(i32, u64)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, u8>> for *mut wire_cst_list_record_i_32_u_8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<i32, u8> {
        let vec: Vec<(i32, u8)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, usize>> for *mut wire_cst_list_record_i_32_usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashMap<i32, usize> {
        let vec: Vec<(i32, usize)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            u8,
            crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode,
        >,
    > for *mut wire_cst_list_record_u_8_application_mode
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        u8,
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode,
    > {
        let vec: Vec<(
            u8,
            crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<RustOpaqueMoi<Box<dyn DartDebugTwinMoi>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<Box<dyn DartDebugTwinMoi>> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<RustOpaqueNom<Box<dyn DartDebugTwinNormal>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Box<dyn DartDebugTwinNormal>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Box<dyn DartDebugTwinRustAsync>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Box<dyn DartDebugTwinRustAsync>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueMoi<Box<dyn DartDebugTwinRustAsyncMoi>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<Box<dyn DartDebugTwinRustAsyncMoi>> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<RustOpaqueNom<Box<dyn DartDebugTwinSync>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Box<dyn DartDebugTwinSync>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueMoi<Box<dyn DartDebugTwinSyncMoi>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<Box<dyn DartDebugTwinSyncMoi>> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<RustOpaqueMoi<FrbOpaqueReturnTwinMoi>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<FrbOpaqueReturnTwinMoi> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<RustOpaqueNom<FrbOpaqueReturnTwinNormal>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<FrbOpaqueReturnTwinNormal> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<FrbOpaqueReturnTwinRustAsync>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<FrbOpaqueReturnTwinRustAsync> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueMoi<FrbOpaqueReturnTwinRustAsyncMoi>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<FrbOpaqueReturnTwinRustAsyncMoi> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<RustOpaqueNom<FrbOpaqueReturnTwinSync>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<FrbOpaqueReturnTwinSync> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueMoi<FrbOpaqueReturnTwinSyncMoi>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<FrbOpaqueReturnTwinSyncMoi> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<RustOpaqueMoi<FrbOpaqueSyncReturnTwinMoi>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<FrbOpaqueSyncReturnTwinMoi> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<RustOpaqueNom<FrbOpaqueSyncReturnTwinNormal>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<FrbOpaqueSyncReturnTwinNormal> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueMoi<HideDataAnotherTwinMoi>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<HideDataAnotherTwinMoi> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<RustOpaqueNom<HideDataAnotherTwinNormal>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<HideDataAnotherTwinNormal> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueMoi<HideDataTwinMoi>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<HideDataTwinMoi> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<[RustOpaqueMoi<HideDataTwinMoi>; 2]>
    for *mut wire_cst_list_RustOpaque_HideDataTwinMoi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [RustOpaqueMoi<HideDataTwinMoi>; 2] {
        let vec: Vec<RustOpaqueMoi<HideDataTwinMoi>> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<RustOpaqueNom<HideDataTwinNormal>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<HideDataTwinNormal> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<[RustOpaqueNom<HideDataTwinNormal>; 2]>
    for *mut wire_cst_list_RustOpaque_HideDataTwinNormal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [RustOpaqueNom<HideDataTwinNormal>; 2] {
        let vec: Vec<RustOpaqueNom<HideDataTwinNormal>> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<RustOpaqueNom<HideDataTwinRustAsync>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<HideDataTwinRustAsync> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueMoi<HideDataTwinRustAsyncMoi>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<HideDataTwinRustAsyncMoi> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<[RustOpaqueMoi<HideDataTwinRustAsyncMoi>; 2]>
    for *mut wire_cst_list_RustOpaque_HideDataTwinRustAsyncMoi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [RustOpaqueMoi<HideDataTwinRustAsyncMoi>; 2] {
        let vec: Vec<RustOpaqueMoi<HideDataTwinRustAsyncMoi>> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[RustOpaqueNom<HideDataTwinRustAsync>; 2]>
    for *mut wire_cst_list_RustOpaque_HideDataTwinRustAsync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [RustOpaqueNom<HideDataTwinRustAsync>; 2] {
        let vec: Vec<RustOpaqueNom<HideDataTwinRustAsync>> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<RustOpaqueNom<HideDataTwinSync>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<HideDataTwinSync> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueMoi<HideDataTwinSyncMoi>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<HideDataTwinSyncMoi> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<[RustOpaqueMoi<HideDataTwinSyncMoi>; 2]>
    for *mut wire_cst_list_RustOpaque_HideDataTwinSyncMoi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [RustOpaqueMoi<HideDataTwinSyncMoi>; 2] {
        let vec: Vec<RustOpaqueMoi<HideDataTwinSyncMoi>> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[RustOpaqueNom<HideDataTwinSync>; 2]>
    for *mut wire_cst_list_RustOpaque_HideDataTwinSync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [RustOpaqueNom<HideDataTwinSync>; 2] {
        let vec: Vec<RustOpaqueNom<HideDataTwinSync>> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<RustOpaqueMoi<Mutex<HideDataTwinMoi>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<Mutex<HideDataTwinMoi>> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<RustOpaqueNom<Mutex<HideDataTwinNormal>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Mutex<HideDataTwinNormal>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<Mutex<HideDataTwinRustAsync>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Mutex<HideDataTwinRustAsync>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueMoi<Mutex<HideDataTwinRustAsyncMoi>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<Mutex<HideDataTwinRustAsyncMoi>> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<RustOpaqueNom<Mutex<HideDataTwinSync>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Mutex<HideDataTwinSync>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueMoi<Mutex<HideDataTwinSyncMoi>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<Mutex<HideDataTwinSyncMoi>> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<RustOpaqueMoi<NonCloneDataTwinMoi>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<NonCloneDataTwinMoi> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<RustOpaqueNom<NonCloneDataTwinNormal>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<NonCloneDataTwinNormal> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<NonCloneDataTwinRustAsync>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<NonCloneDataTwinRustAsync> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueMoi<NonCloneDataTwinRustAsyncMoi>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<NonCloneDataTwinRustAsyncMoi> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<RustOpaqueNom<NonCloneDataTwinSync>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<NonCloneDataTwinSync> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueMoi<NonCloneDataTwinSyncMoi>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<NonCloneDataTwinSyncMoi> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<RustOpaqueMoi<RwLock<HideDataTwinMoi>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<RwLock<HideDataTwinMoi>> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<RustOpaqueNom<RwLock<HideDataTwinNormal>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<RwLock<HideDataTwinNormal>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<RwLock<HideDataTwinRustAsync>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<RwLock<HideDataTwinRustAsync>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueMoi<RwLock<HideDataTwinRustAsyncMoi>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<RwLock<HideDataTwinRustAsyncMoi>> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<RustOpaqueNom<RwLock<HideDataTwinSync>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<RwLock<HideDataTwinSync>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueMoi<RwLock<HideDataTwinSyncMoi>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<RwLock<HideDataTwinSyncMoi>> {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn Fn(String) -> String + Send + Sync>,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn Fn(String) -> String + Send + Sync>,
        >,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinMoi>>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinMoi>>,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinNormal>>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinNormal>>,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsync>,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinRustAsync>>,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsyncMoi>,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinRustAsyncMoi>>,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSync>>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSync>>,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncMoi>>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncMoi>>,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinMoi + Send + Sync>,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinMoi + Send + Sync>,
        >,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinNormal + Send + Sync>,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinNormal + Send + Sync>,
        >,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync>,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync>,
        >,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinRustAsync + Send + Sync>,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinRustAsync + Send + Sync>,
        >,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSyncMoi + Send + Sync>,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSyncMoi + Send + Sync>,
        >,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSync + Send + Sync>,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSync + Send + Sync>,
        >,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                ConstructorOpaqueStructTwinNormal,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<ConstructorOpaqueStructTwinNormal>,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                ConstructorOpaqueSyncStructTwinNormal,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            ConstructorOpaqueSyncStructTwinNormal,
        >,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinNormal>>,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinNormal>>
    {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinRustAsync>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinRustAsync>>
    {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinSync>>,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinSync>>
    {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                EnumWithGoodAndOpaqueWithoutOptionTwinMoi,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            EnumWithGoodAndOpaqueWithoutOptionTwinMoi,
        >,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                EnumWithGoodAndOpaqueWithoutOptionTwinNormal,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            EnumWithGoodAndOpaqueWithoutOptionTwinNormal,
        >,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync,
        >,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncMoi,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncMoi,
        >,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                EnumWithGoodAndOpaqueWithoutOptionTwinSync,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            EnumWithGoodAndOpaqueWithoutOptionTwinSync,
        >,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                EnumWithGoodAndOpaqueWithoutOptionTwinSyncMoi,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            EnumWithGoodAndOpaqueWithoutOptionTwinSyncMoi,
        >,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinMoi>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinMoi>,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinNormal>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinNormal>,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinRustAsync>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinRustAsync>,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                NonCloneSimpleEnumTwinRustAsyncMoi,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinRustAsyncMoi>,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinSync>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinSync>,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinSyncMoi>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinSyncMoi>,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>>
    {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>>
    {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinMoi>>,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinMoi>>
    {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinNormal>>,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinNormal>>
    {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsync>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsync>>
    {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncMoi>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncMoi>,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSync>>,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSync>>
    {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncMoi>>,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncMoi>>
    {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinMoi>>,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinMoi>>
    {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinNormal>>,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinNormal>>
    {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsync>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsync>>
    {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncMoi>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncMoi>,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSync>>,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSync>>
    {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncMoi>>,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncMoi>>
    {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleA>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleA>,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleB>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleB>,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldWithoutOptionTwinMoi,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldWithoutOptionTwinMoi,
        >,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal,
        >,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync,
        >,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncMoi,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncMoi,
        >,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldWithoutOptionTwinSync,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldWithoutOptionTwinSync,
        >,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncMoi,
            >,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncMoi,
        >,
    > {
        decode_rust_opaque_moi(self as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithImplBlockInMultiFile>,
        >,
    > for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithImplBlockInMultiFile>,
    > {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueMoi<i16>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<i16> {
        decode_rust_opaque_moi(self as _)
    }
}
impl CstDecode<RustOpaqueNom<i32>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<i32> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<std::collections::HashSet<String>> for *mut wire_cst_list_String {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashSet<String> {
        let vec: Vec<String> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashSet<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode>,
    > for *mut wire_cst_list_application_mode
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> std::collections::HashSet<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode>
    {
        let vec: Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode> =
            self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashSet<i32>> for *mut wire_cst_list_prim_i_32_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> std::collections::HashSet<i32> {
        let vec: Vec<i32> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8(vec).unwrap()
    }
}
impl CstDecode<uuid::Uuid> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> uuid::Uuid {
        let single: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::decode_uuid(single)
    }
}
impl CstDecode<crate::api::misc_example::ATwinNormal> for wire_cst_a_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_example::ATwinNormal {
        crate::api::misc_example::ATwinNormal {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync>
    for wire_cst_a_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync>
    for wire_cst_a_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_example::AbcTwinNormal> for wire_cst_abc_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_example::AbcTwinNormal {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.A };
                crate::api::misc_example::AbcTwinNormal::A(ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.B };
                crate::api::misc_example::AbcTwinNormal::B(ans.field0.cst_decode())
            }
            2 => {
                let ans = unsafe { self.kind.C };
                crate::api::misc_example::AbcTwinNormal::C(ans.field0.cst_decode())
            }
            3 => {
                let ans = unsafe { self.kind.JustInt };
                crate::api::misc_example::AbcTwinNormal::JustInt(ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>
    for wire_cst_abc_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.A };
                crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::A(
                    ans.field0.cst_decode(),
                )
            }
            1 => {
                let ans = unsafe { self.kind.B };
                crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::B(
                    ans.field0.cst_decode(),
                )
            }
            2 => {
                let ans = unsafe { self.kind.C };
                crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::C(
                    ans.field0.cst_decode(),
                )
            }
            3 => {
                let ans = unsafe { self.kind.JustInt };
                crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::JustInt(
                    ans.field0.cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>
    for wire_cst_abc_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.A };
                crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::A(
                    ans.field0.cst_decode(),
                )
            }
            1 => {
                let ans = unsafe { self.kind.B };
                crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::B(
                    ans.field0.cst_decode(),
                )
            }
            2 => {
                let ans = unsafe { self.kind.C };
                crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::C(
                    ans.field0.cst_decode(),
                )
            }
            3 => {
                let ans = unsafe { self.kind.JustInt };
                crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::JustInt(
                    ans.field0.cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::inside_macro::AnotherMacroStructTwinNormal>
    for wire_cst_another_macro_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::inside_macro::AnotherMacroStructTwinNormal {
        crate::api::inside_macro::AnotherMacroStructTwinNormal {
            data: self.data.cst_decode(),
            non_final_data: self.non_final_data.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::mirror::AnotherTwinNormal> for wire_cst_another_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::mirror::AnotherTwinNormal {
        crate::api::mirror::AnotherTwinNormal {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync>
    for wire_cst_another_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync {
        crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync>
    for wire_cst_another_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync {
        crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>
    for wire_cst_application_env
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv {
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv {
            vars: self.vars.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar>
    for wire_cst_application_env_var
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar {
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar(
            self.field0.cst_decode(),
            self.field1.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage>
    for wire_cst_application_message
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.DisplayMessage };
                crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::DisplayMessage(
                    ans.field0.cst_decode(),
                )
            }
            1 => {
                let ans = unsafe { self.kind.RenderPixel };
                crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::RenderPixel {
                    x: ans.x.cst_decode(),
                    y: ans.y.cst_decode(),
                }
            }
            2 => crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::Exit,
            _ => unreachable!(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode; 2]>
    for *mut wire_cst_list_application_mode
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode; 2] {
        let vec: Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>
    for wire_cst_application_settings
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings {
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings {
            name: self.name.cst_decode(),
            version: self.version.cst_decode(),
            mode: self.mode.cst_decode(),
            env: self.env.cst_decode(),
            env_optional: self.env_optional.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::optional::AttributeTwinNormal> for wire_cst_attribute_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::optional::AttributeTwinNormal {
        crate::api::optional::AttributeTwinNormal {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>
    for wire_cst_attribute_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync {
        crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>
    for wire_cst_attribute_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync {
        crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_example::BTwinNormal> for wire_cst_b_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_example::BTwinNormal {
        crate::api::misc_example::BTwinNormal {
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync>
    for wire_cst_b_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync {
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync>
    for wire_cst_b_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync {
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>
    for wire_cst_basic_general_enum_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Apple };
                crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal::Apple {
                    field: ans.field.cst_decode(),
                }
            }
            1 => crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal::Orange,
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>
    for wire_cst_basic_general_enum_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync {
        match self.tag {
                    0 => {
                        let ans = unsafe { self.kind.Apple };
                        crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync::Apple{field:  ans.field.cst_decode()}
                    }
1 => crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync::Orange,
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync>
    for wire_cst_basic_general_enum_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Apple };
                crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync::Apple {
                    field: ans.field.cst_decode(),
                }
            }
            1 => crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync::Orange,
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic::BasicStructTwinNormal>
    for wire_cst_basic_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::basic::BasicStructTwinNormal {
        crate::api::pseudo_manual::basic::BasicStructTwinNormal {
            apple: self.apple.cst_decode(),
            orange: self.orange.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync>
    for wire_cst_basic_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync {
        crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync {
            apple: self.apple.cst_decode(),
            orange: self.orange.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync>
    for wire_cst_basic_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync {
        crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync {
            apple: self.apple.cst_decode(),
            orange: self.orange.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal>
    for wire_cst_benchmark_binary_tree_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal {
        crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal {
            name: self.name.cst_decode(),
            left: self.left.cst_decode(),
            right: self.right.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync,
    > for wire_cst_benchmark_binary_tree_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync
    {
        crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync {
            name: self.name.cst_decode(),
            left: self.left.cst_decode(),
            right: self.right.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync>
    for wire_cst_benchmark_binary_tree_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync {
        crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync {
            name: self.name.cst_decode(),
            left: self.left.cst_decode(),
            right: self.right.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::benchmark_api::BenchmarkBlobTwinNormal>
    for wire_cst_benchmark_blob_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::benchmark_api::BenchmarkBlobTwinNormal {
        crate::api::pseudo_manual::benchmark_api::BenchmarkBlobTwinNormal {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
            third: self.third.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBlobTwinRustAsync>
    for wire_cst_benchmark_blob_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBlobTwinRustAsync {
        crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBlobTwinRustAsync {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
            third: self.third.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBlobTwinSync>
    for wire_cst_benchmark_blob_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBlobTwinSync {
        crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBlobTwinSync {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
            third: self.third.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_example::BigBuffersTwinNormal>
    for wire_cst_big_buffers_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_example::BigBuffersTwinNormal {
        crate::api::misc_example::BigBuffersTwinNormal {
            int64: self.int64.cst_decode(),
            uint64: self.uint64.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync>
    for wire_cst_big_buffers_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync {
            int64: self.int64.cst_decode(),
            uint64: self.uint64.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync>
    for wire_cst_big_buffers_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync {
            int64: self.int64.cst_decode(),
            uint64: self.uint64.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::array::BlobTwinNormal> for wire_cst_blob_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::array::BlobTwinNormal {
        crate::api::array::BlobTwinNormal(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync>
    for wire_cst_blob_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync {
        crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>
    for wire_cst_blob_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::BlobTwinSync {
        crate::api::pseudo_manual::array_twin_sync::BlobTwinSync(self.field0.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>>
    for *mut wire_cst_application_env
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<NonCloneSimpleTwinMoi> for *mut usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> NonCloneSimpleTwinMoi {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<NonCloneSimpleTwinMoi>::cst_decode(*wrap).into()
    }
}
impl CstDecode<NonCloneSimpleTwinNormal> for *mut usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> NonCloneSimpleTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<NonCloneSimpleTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<NonCloneSimpleTwinRustAsync> for *mut usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> NonCloneSimpleTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<NonCloneSimpleTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<NonCloneSimpleTwinRustAsyncMoi> for *mut usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> NonCloneSimpleTwinRustAsyncMoi {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<NonCloneSimpleTwinRustAsyncMoi>::cst_decode(*wrap).into()
    }
}
impl CstDecode<NonCloneSimpleTwinSync> for *mut usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> NonCloneSimpleTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<NonCloneSimpleTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<NonCloneSimpleTwinSyncMoi> for *mut usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> NonCloneSimpleTwinSyncMoi {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<NonCloneSimpleTwinSyncMoi>::cst_decode(*wrap).into()
    }
}
impl CstDecode<chrono::Duration> for *mut i64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> chrono::Duration {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<chrono::Duration>::cst_decode(*wrap).into()
    }
}
impl CstDecode<chrono::NaiveDateTime> for *mut i64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> chrono::NaiveDateTime {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<chrono::NaiveDateTime>::cst_decode(*wrap).into()
    }
}
impl CstDecode<chrono::DateTime<chrono::Utc>> for *mut i64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> chrono::DateTime<chrono::Utc> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<chrono::DateTime<chrono::Utc>>::cst_decode(*wrap).into()
    }
}
impl CstDecode<flutter_rust_bridge::DartOpaque> for *mut *const std::ffi::c_void {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> flutter_rust_bridge::DartOpaque {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<flutter_rust_bridge::DartOpaque>::cst_decode(*wrap).into()
    }
}
impl CstDecode<RustOpaqueMoi<HideDataAnotherTwinMoi>> for *mut usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<HideDataAnotherTwinMoi> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<RustOpaqueMoi<HideDataAnotherTwinMoi>>::cst_decode(*wrap).into()
    }
}
impl CstDecode<RustOpaqueNom<HideDataAnotherTwinNormal>> for *mut usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<HideDataAnotherTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<RustOpaqueNom<HideDataAnotherTwinNormal>>::cst_decode(*wrap).into()
    }
}
impl CstDecode<RustOpaqueMoi<HideDataTwinMoi>> for *mut usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<HideDataTwinMoi> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<RustOpaqueMoi<HideDataTwinMoi>>::cst_decode(*wrap).into()
    }
}
impl CstDecode<RustOpaqueNom<HideDataTwinNormal>> for *mut usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<HideDataTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<RustOpaqueNom<HideDataTwinNormal>>::cst_decode(*wrap).into()
    }
}
impl CstDecode<RustOpaqueNom<HideDataTwinRustAsync>> for *mut usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<HideDataTwinRustAsync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<RustOpaqueNom<HideDataTwinRustAsync>>::cst_decode(*wrap).into()
    }
}
impl CstDecode<RustOpaqueMoi<HideDataTwinRustAsyncMoi>> for *mut usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<HideDataTwinRustAsyncMoi> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<RustOpaqueMoi<HideDataTwinRustAsyncMoi>>::cst_decode(*wrap).into()
    }
}
impl CstDecode<RustOpaqueNom<HideDataTwinSync>> for *mut usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<HideDataTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<RustOpaqueNom<HideDataTwinSync>>::cst_decode(*wrap).into()
    }
}
impl CstDecode<RustOpaqueMoi<HideDataTwinSyncMoi>> for *mut usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueMoi<HideDataTwinSyncMoi> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<RustOpaqueMoi<HideDataTwinSyncMoi>>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::misc_example::ATwinNormal> for *mut wire_cst_a_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_example::ATwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_example::ATwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync>
    for *mut wire_cst_a_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync>
    for *mut wire_cst_a_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::misc_example::AbcTwinNormal> for *mut wire_cst_abc_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_example::AbcTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_example::AbcTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>
    for *mut wire_cst_abc_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>
    for *mut wire_cst_abc_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>
    for *mut wire_cst_application_env
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode> for *mut i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>
    for *mut wire_cst_application_settings
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::optional::AttributeTwinNormal> for *mut wire_cst_attribute_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::optional::AttributeTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::optional::AttributeTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>
    for *mut wire_cst_attribute_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>
    for *mut wire_cst_attribute_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::misc_example::BTwinNormal> for *mut wire_cst_b_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_example::BTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_example::BTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync>
    for *mut wire_cst_b_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync>
    for *mut wire_cst_b_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>
    for *mut wire_cst_basic_general_enum_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>
    for *mut wire_cst_basic_general_enum_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync>
    for *mut wire_cst_basic_general_enum_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal> for *mut i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>
    for *mut i32
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync>
    for *mut i32
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::basic::BasicStructTwinNormal>
    for *mut wire_cst_basic_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::basic::BasicStructTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::basic::BasicStructTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync>
    for *mut wire_cst_basic_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync>
    for *mut wire_cst_basic_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal>
    for *mut wire_cst_benchmark_binary_tree_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync,
    > for *mut wire_cst_benchmark_binary_tree_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync>
    for *mut wire_cst_benchmark_binary_tree_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::benchmark_api::BenchmarkBlobTwinNormal>
    for *mut wire_cst_benchmark_blob_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::benchmark_api::BenchmarkBlobTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::benchmark_api::BenchmarkBlobTwinNormal>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBlobTwinRustAsync>
    for *mut wire_cst_benchmark_blob_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBlobTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBlobTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBlobTwinSync>
    for *mut wire_cst_benchmark_blob_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBlobTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBlobTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<bool> for *mut bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::api::misc_example::CTwinNormal> for *mut wire_cst_c_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_example::CTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_example::CTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync>
    for *mut wire_cst_c_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync>
    for *mut wire_cst_c_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::method::ConcatenateWithTwinNormal>
    for *mut wire_cst_concatenate_with_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::method::ConcatenateWithTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::method::ConcatenateWithTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync>
    for *mut wire_cst_concatenate_with_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync>
    for *mut wire_cst_concatenate_with_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::exception::CustomNestedError2TwinNormal>
    for *mut wire_cst_custom_nested_error_2_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::exception::CustomNestedError2TwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::exception::CustomNestedError2TwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync>
    for *mut wire_cst_custom_nested_error_2_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync>
    for *mut wire_cst_custom_nested_error_2_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::exception::CustomNestedErrorInnerTwinNormal>
    for *mut wire_cst_custom_nested_error_inner_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::exception::CustomNestedErrorInnerTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::exception::CustomNestedErrorInnerTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync,
    > for *mut wire_cst_custom_nested_error_inner_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync>
    for *mut wire_cst_custom_nested_error_inner_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::exception::CustomNestedErrorOuterTwinNormal>
    for *mut wire_cst_custom_nested_error_outer_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::exception::CustomNestedErrorOuterTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::exception::CustomNestedErrorOuterTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync,
    > for *mut wire_cst_custom_nested_error_outer_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync>
    for *mut wire_cst_custom_nested_error_outer_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::exception::CustomStructErrorTwinNormal>
    for *mut wire_cst_custom_struct_error_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::exception::CustomStructErrorTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::exception::CustomStructErrorTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync>
    for *mut wire_cst_custom_struct_error_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync>
    for *mut wire_cst_custom_struct_error_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::exception::CustomStructTwinNormal>
    for *mut wire_cst_custom_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::exception::CustomStructTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::exception::CustomStructTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync>
    for *mut wire_cst_custom_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync>
    for *mut wire_cst_custom_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::attribute::CustomizedTwinNormal>
    for *mut wire_cst_customized_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::attribute::CustomizedTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::attribute::CustomizedTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync>
    for *mut wire_cst_customized_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync>
    for *mut wire_cst_customized_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::dart_opaque::DartOpaqueNestedTwinNormal>
    for *mut wire_cst_dart_opaque_nested_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::dart_opaque::DartOpaqueNestedTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync>
    for *mut wire_cst_dart_opaque_nested_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync>
    for *mut wire_cst_dart_opaque_nested_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::optional::ElementTwinNormal> for *mut wire_cst_element_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::optional::ElementTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::optional::ElementTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>
    for *mut wire_cst_element_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>
    for *mut wire_cst_element_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::misc_type::EmptyTwinNormal> for *mut wire_cst_empty_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_type::EmptyTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_type::EmptyTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync>
    for *mut wire_cst_empty_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync>
    for *mut wire_cst_empty_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::dart_opaque::EnumDartOpaqueTwinNormal>
    for *mut wire_cst_enum_dart_opaque_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::dart_opaque::EnumDartOpaqueTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::dart_opaque::EnumDartOpaqueTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync>
    for *mut wire_cst_enum_dart_opaque_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync>
    for *mut wire_cst_enum_dart_opaque_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi>
    for *mut wire_cst_enum_opaque_twin_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::rust_opaque::EnumOpaqueTwinNormal>
    for *mut wire_cst_enum_opaque_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::rust_opaque::EnumOpaqueTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::rust_opaque::EnumOpaqueTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>
    for *mut wire_cst_enum_opaque_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi,
    > for *mut wire_cst_enum_opaque_twin_rust_async_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>
    for *mut wire_cst_enum_opaque_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi>
    for *mut wire_cst_enum_opaque_twin_sync_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_moi::EnumWithGoodAndOpaqueTwinMoi>
    for *mut wire_cst_enum_with_good_and_opaque_twin_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_auto_opaque_twin_moi::EnumWithGoodAndOpaqueTwinMoi {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::rust_auto_opaque_twin_moi::EnumWithGoodAndOpaqueTwinMoi,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::rust_auto_opaque::EnumWithGoodAndOpaqueTwinNormal>
    for *mut wire_cst_enum_with_good_and_opaque_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::rust_auto_opaque::EnumWithGoodAndOpaqueTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::rust_auto_opaque::EnumWithGoodAndOpaqueTwinNormal>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::EnumWithGoodAndOpaqueTwinRustAsync> for *mut wire_cst_enum_with_good_and_opaque_twin_rust_async {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::EnumWithGoodAndOpaqueTwinRustAsync {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::EnumWithGoodAndOpaqueTwinRustAsync>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::EnumWithGoodAndOpaqueTwinRustAsyncMoi> for *mut wire_cst_enum_with_good_and_opaque_twin_rust_async_moi {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::EnumWithGoodAndOpaqueTwinRustAsyncMoi {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::EnumWithGoodAndOpaqueTwinRustAsyncMoi>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_sync::EnumWithGoodAndOpaqueTwinSync>
    for *mut wire_cst_enum_with_good_and_opaque_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_auto_opaque_twin_sync::EnumWithGoodAndOpaqueTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::rust_auto_opaque_twin_sync::EnumWithGoodAndOpaqueTwinSync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::EnumWithGoodAndOpaqueTwinSyncMoi,
    > for *mut wire_cst_enum_with_good_and_opaque_twin_sync_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::EnumWithGoodAndOpaqueTwinSyncMoi
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::EnumWithGoodAndOpaqueTwinSyncMoi>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::enumeration::EnumWithItemMixedTwinNormal>
    for *mut wire_cst_enum_with_item_mixed_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemMixedTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::enumeration::EnumWithItemMixedTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync,
    > for *mut wire_cst_enum_with_item_mixed_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync>
    for *mut wire_cst_enum_with_item_mixed_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::enumeration::EnumWithItemStructTwinNormal>
    for *mut wire_cst_enum_with_item_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemStructTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::enumeration::EnumWithItemStructTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync,
    > for *mut wire_cst_enum_with_item_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync>
    for *mut wire_cst_enum_with_item_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::enumeration::EnumWithItemTupleTwinNormal>
    for *mut wire_cst_enum_with_item_tuple_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemTupleTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::enumeration::EnumWithItemTupleTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync,
    > for *mut wire_cst_enum_with_item_tuple_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync>
    for *mut wire_cst_enum_with_item_tuple_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::event_listener::EventTwinNormal> for *mut wire_cst_event_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::event_listener::EventTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::event_listener::EventTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync>
    for *mut wire_cst_event_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::optional::ExoticOptionalsTwinNormal>
    for *mut wire_cst_exotic_optionals_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::optional::ExoticOptionalsTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::optional::ExoticOptionalsTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
    for *mut wire_cst_exotic_optionals_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>
    for *mut wire_cst_exotic_optionals_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<f32> for *mut f32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> f32 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<f64> for *mut f64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> f64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::api::chrono_type::FeatureChronoTwinNormal>
    for *mut wire_cst_feature_chrono_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::chrono_type::FeatureChronoTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::chrono_type::FeatureChronoTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync>
    for *mut wire_cst_feature_chrono_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync>
    for *mut wire_cst_feature_chrono_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::uuid_type::FeatureUuidTwinNormal>
    for *mut wire_cst_feature_uuid_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uuid_type::FeatureUuidTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::uuid_type::FeatureUuidTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync>
    for *mut wire_cst_feature_uuid_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync>
    for *mut wire_cst_feature_uuid_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::array::FeedIdTwinNormal> for *mut wire_cst_feed_id_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::array::FeedIdTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::array::FeedIdTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>
    for *mut wire_cst_feed_id_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>
    for *mut wire_cst_feed_id_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<i16> for *mut i16 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i16 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<i32> for *mut i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i32 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<i64> for *mut i64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<i8> for *mut i8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i8 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<isize> for *mut isize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> isize {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::api::enumeration::KitchenSinkTwinNormal>
    for *mut wire_cst_kitchen_sink_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::enumeration::KitchenSinkTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::enumeration::KitchenSinkTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>
    for *mut wire_cst_kitchen_sink_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>
    for *mut wire_cst_kitchen_sink_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored>
    for *mut wire_cst_list_of_nested_raw_string_mirrored
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::inside_macro::MacroStruct> for *mut wire_cst_macro_struct {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::inside_macro::MacroStruct {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::inside_macro::MacroStruct>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::enumeration::MeasureTwinNormal> for *mut wire_cst_measure_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::enumeration::MeasureTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::enumeration::MeasureTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync>
    for *mut wire_cst_measure_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync>
    for *mut wire_cst_measure_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::array::MessageIdTwinNormal> for *mut wire_cst_message_id_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::array::MessageIdTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::array::MessageIdTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync>
    for *mut wire_cst_message_id_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync>
    for *mut wire_cst_message_id_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::method::MyCallableTwinNormal> for *mut wire_cst_my_callable_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::method::MyCallableTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::method::MyCallableTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::MyCallableTwinRustAsync>
    for *mut wire_cst_my_callable_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async::MyCallableTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::method_twin_rust_async::MyCallableTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync::MyCallableTwinSync>
    for *mut wire_cst_my_callable_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::MyCallableTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::method_twin_sync::MyCallableTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::misc_example::MyNestedStructTwinNormal>
    for *mut wire_cst_my_nested_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_example::MyNestedStructTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_example::MyNestedStructTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync>
    for *mut wire_cst_my_nested_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync>
    for *mut wire_cst_my_nested_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::auxiliary::sample_types::MySize> for *mut wire_cst_my_size {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::auxiliary::sample_types::MySize {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::auxiliary::sample_types::MySize>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::auxiliary::sample_types::MyStruct> for *mut wire_cst_my_struct {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::auxiliary::sample_types::MyStruct {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::auxiliary::sample_types::MyStruct>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::misc_example::MyTreeNodeTwinNormal>
    for *mut wire_cst_my_tree_node_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_example::MyTreeNodeTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_example::MyTreeNodeTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>
    for *mut wire_cst_my_tree_node_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>
    for *mut wire_cst_my_tree_node_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored>
    for *mut wire_cst_nested_raw_string_mirrored
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::newtype_pattern::NewTypeIntTwinNormal>
    for *mut wire_cst_new_type_int_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::newtype_pattern::NewTypeIntTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::newtype_pattern::NewTypeIntTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync>
    for *mut wire_cst_new_type_int_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>
    for *mut wire_cst_new_type_int_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::enumeration::NoteTwinNormal> for *mut wire_cst_note_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::enumeration::NoteTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::enumeration::NoteTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync>
    for *mut wire_cst_note_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync>
    for *mut wire_cst_note_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers> for *mut wire_cst_numbers {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_moi::OpaqueNestedTwinMoi>
    for *mut wire_cst_opaque_nested_twin_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_moi::OpaqueNestedTwinMoi {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_opaque_twin_moi::OpaqueNestedTwinMoi>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::rust_opaque::OpaqueNestedTwinNormal>
    for *mut wire_cst_opaque_nested_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::rust_opaque::OpaqueNestedTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::rust_opaque::OpaqueNestedTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync>
    for *mut wire_cst_opaque_nested_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::OpaqueNestedTwinRustAsyncMoi,
    > for *mut wire_cst_opaque_nested_twin_rust_async_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::OpaqueNestedTwinRustAsyncMoi
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::OpaqueNestedTwinRustAsyncMoi>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync>
    for *mut wire_cst_opaque_nested_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::OpaqueNestedTwinSyncMoi>
    for *mut wire_cst_opaque_nested_twin_sync_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_moi::OpaqueNestedTwinSyncMoi {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::OpaqueNestedTwinSyncMoi>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::optional::OptVecsTwinNormal> for *mut wire_cst_opt_vecs_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::optional::OptVecsTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::optional::OptVecsTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync>
    for *mut wire_cst_opt_vecs_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync>
    for *mut wire_cst_opt_vecs_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>
    for *mut wire_cst_raw_string_mirrored
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<(String, i32)> for *mut wire_cst_record_string_i_32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (String, i32) {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<(String, i32)>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences>
    for *mut wire_cst_sequences
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::method::SimpleStructTwinNormal>
    for *mut wire_cst_simple_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::method::SimpleStructTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::method::SimpleStructTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::SimpleStructTwinRustAsync>
    for *mut wire_cst_simple_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async::SimpleStructTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::method_twin_rust_async::SimpleStructTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync::SimpleStructTwinSync>
    for *mut wire_cst_simple_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::SimpleStructTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::method_twin_sync::SimpleStructTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::exception::SomeStructTwinNormal>
    for *mut wire_cst_some_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::exception::SomeStructTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::exception::SomeStructTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync>
    for *mut wire_cst_some_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync>
    for *mut wire_cst_some_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<crate::api::deliberate_name_conflict::StructInLowerLevel>
    for *mut wire_cst_struct_in_lower_level
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::deliberate_name_conflict::StructInLowerLevel {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::deliberate_name_conflict::StructInLowerLevel>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::comment::StructWithCommentsTwinNormal>
    for *mut wire_cst_struct_with_comments_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::comment::StructWithCommentsTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::comment::StructWithCommentsTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync>
    for *mut wire_cst_struct_with_comments_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync>
    for *mut wire_cst_struct_with_comments_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::misc_example::StructWithEnumTwinNormal>
    for *mut wire_cst_struct_with_enum_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_example::StructWithEnumTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_example::StructWithEnumTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync>
    for *mut wire_cst_struct_with_enum_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync>
    for *mut wire_cst_struct_with_enum_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithExplicitAutoOpaqueFieldTwinMoi> for *mut wire_cst_struct_with_explicit_auto_opaque_field_twin_moi {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithExplicitAutoOpaqueFieldTwinMoi {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithExplicitAutoOpaqueFieldTwinMoi>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::rust_auto_opaque::StructWithExplicitAutoOpaqueFieldTwinNormal>
    for *mut wire_cst_struct_with_explicit_auto_opaque_field_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::rust_auto_opaque::StructWithExplicitAutoOpaqueFieldTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::rust_auto_opaque::StructWithExplicitAutoOpaqueFieldTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithExplicitAutoOpaqueFieldTwinRustAsync> for *mut wire_cst_struct_with_explicit_auto_opaque_field_twin_rust_async {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithExplicitAutoOpaqueFieldTwinRustAsync {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithExplicitAutoOpaqueFieldTwinRustAsync>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncMoi> for *mut wire_cst_struct_with_explicit_auto_opaque_field_twin_rust_async_moi {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncMoi {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncMoi>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithExplicitAutoOpaqueFieldTwinSync> for *mut wire_cst_struct_with_explicit_auto_opaque_field_twin_sync {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithExplicitAutoOpaqueFieldTwinSync {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithExplicitAutoOpaqueFieldTwinSync>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithExplicitAutoOpaqueFieldTwinSyncMoi> for *mut wire_cst_struct_with_explicit_auto_opaque_field_twin_sync_moi {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithExplicitAutoOpaqueFieldTwinSyncMoi {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithExplicitAutoOpaqueFieldTwinSyncMoi>::cst_decode(*wrap).into()
            }
        }
impl
    CstDecode<
        crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithGoodAndOpaqueFieldTwinMoi,
    > for *mut wire_cst_struct_with_good_and_opaque_field_twin_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithGoodAndOpaqueFieldTwinMoi
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithGoodAndOpaqueFieldTwinMoi>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::rust_auto_opaque::StructWithGoodAndOpaqueFieldTwinNormal>
    for *mut wire_cst_struct_with_good_and_opaque_field_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::rust_auto_opaque::StructWithGoodAndOpaqueFieldTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::rust_auto_opaque::StructWithGoodAndOpaqueFieldTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithGoodAndOpaqueFieldTwinRustAsync> for *mut wire_cst_struct_with_good_and_opaque_field_twin_rust_async {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithGoodAndOpaqueFieldTwinRustAsync {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithGoodAndOpaqueFieldTwinRustAsync>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithGoodAndOpaqueFieldTwinRustAsyncMoi> for *mut wire_cst_struct_with_good_and_opaque_field_twin_rust_async_moi {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithGoodAndOpaqueFieldTwinRustAsyncMoi {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithGoodAndOpaqueFieldTwinRustAsyncMoi>::cst_decode(*wrap).into()
            }
        }
impl
    CstDecode<
        crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithGoodAndOpaqueFieldTwinSync,
    > for *mut wire_cst_struct_with_good_and_opaque_field_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithGoodAndOpaqueFieldTwinSync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithGoodAndOpaqueFieldTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithGoodAndOpaqueFieldTwinSyncMoi> for *mut wire_cst_struct_with_good_and_opaque_field_twin_sync_moi {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithGoodAndOpaqueFieldTwinSyncMoi {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithGoodAndOpaqueFieldTwinSyncMoi>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<crate::api::structure::StructWithOneFieldTwinNormal>
    for *mut wire_cst_struct_with_one_field_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::structure::StructWithOneFieldTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::structure::StructWithOneFieldTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync>
    for *mut wire_cst_struct_with_one_field_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync>
    for *mut wire_cst_struct_with_one_field_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::structure::StructWithTwoFieldTwinNormal>
    for *mut wire_cst_struct_with_two_field_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::structure::StructWithTwoFieldTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::structure::StructWithTwoFieldTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync>
    for *mut wire_cst_struct_with_two_field_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync>
    for *mut wire_cst_struct_with_two_field_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::structure::StructWithZeroFieldTwinNormal>
    for *mut wire_cst_struct_with_zero_field_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::structure::StructWithZeroFieldTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::structure::StructWithZeroFieldTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync,
    > for *mut wire_cst_struct_with_zero_field_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<
            crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync,
        >::cst_decode(*wrap)
        .into()
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync>
    for *mut wire_cst_struct_with_zero_field_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::method::SumWithTwinNormal> for *mut wire_cst_sum_with_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::method::SumWithTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::method::SumWithTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>
    for *mut wire_cst_sum_with_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>
    for *mut wire_cst_sum_with_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::array::TestIdTwinNormal> for *mut wire_cst_test_id_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::array::TestIdTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::array::TestIdTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>
    for *mut wire_cst_test_id_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>
    for *mut wire_cst_test_id_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::api::structure::TupleStructWithOneFieldTwinNormal>
    for *mut wire_cst_tuple_struct_with_one_field_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::structure::TupleStructWithOneFieldTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::structure::TupleStructWithOneFieldTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync,
    > for *mut wire_cst_tuple_struct_with_one_field_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync>
    for *mut wire_cst_tuple_struct_with_one_field_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::structure::TupleStructWithTwoFieldTwinNormal>
    for *mut wire_cst_tuple_struct_with_two_field_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::structure::TupleStructWithTwoFieldTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::structure::TupleStructWithTwoFieldTwinNormal>::cst_decode(*wrap)
            .into()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync,
    > for *mut wire_cst_tuple_struct_with_two_field_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync>
    for *mut wire_cst_tuple_struct_with_two_field_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<u16> for *mut u16 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u16 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<u32> for *mut u32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u32 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<u64> for *mut u64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<u8> for *mut u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::api::attribute::UserIdTwinNormal> for *mut wire_cst_user_id_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::attribute::UserIdTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::attribute::UserIdTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync>
    for *mut wire_cst_user_id_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync>
    for *mut wire_cst_user_id_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<usize> for *mut usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> usize {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::api::misc_example::WeekdaysTwinNormal> for *mut i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_example::WeekdaysTwinNormal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_example::WeekdaysTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
    for *mut i32
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> for *mut i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal>>
    for *mut wire_cst_benchmark_binary_tree_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync>> for *mut wire_cst_benchmark_binary_tree_twin_rust_async {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync> {
                let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
                CstDecode::<crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync>::cst_decode(*wrap).into()
            }
        }
impl CstDecode<Box<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync>>
    for *mut wire_cst_benchmark_binary_tree_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::array::BlobTwinNormal>> for *mut wire_cst_blob_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<crate::api::array::BlobTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::array::BlobTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync>>
    for *mut wire_cst_blob_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>>
    for *mut wire_cst_blob_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<Box<bool>> for *mut bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<bool> {
        unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<Box<crate::api::enumeration::DistanceTwinNormal>>
    for *mut wire_cst_distance_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<crate::api::enumeration::DistanceTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::enumeration::DistanceTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>>
    for *mut wire_cst_distance_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync>>
    for *mut wire_cst_distance_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<Box<crate::api::optional::ExoticOptionalsTwinNormal>>
    for *mut wire_cst_exotic_optionals_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<crate::api::optional::ExoticOptionalsTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::optional::ExoticOptionalsTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<
        Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>,
    > for *mut wire_cst_exotic_optionals_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
    {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>>
    for *mut wire_cst_exotic_optionals_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<f64>> for *mut f64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<f64> {
        unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<Box<crate::api::array::FeedIdTwinNormal>> for *mut wire_cst_feed_id_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<crate::api::array::FeedIdTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::array::FeedIdTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>>
    for *mut wire_cst_feed_id_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>>
    for *mut wire_cst_feed_id_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<Box<i32>> for *mut i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<i32> {
        unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<Box<i64>> for *mut i64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<i64> {
        unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<Box<i8>> for *mut i8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<i8> {
        unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<Box<crate::api::enumeration::KitchenSinkTwinNormal>>
    for *mut wire_cst_kitchen_sink_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<crate::api::enumeration::KitchenSinkTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::enumeration::KitchenSinkTwinNormal>::cst_decode(*wrap).into()
    }
}
impl
    CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>>
    for *mut wire_cst_kitchen_sink_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>>
    for *mut wire_cst_kitchen_sink_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::auxiliary::sample_types::MySize>> for *mut wire_cst_my_size {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<crate::auxiliary::sample_types::MySize> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::auxiliary::sample_types::MySize>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::enumeration::SpeedTwinNormal>> for *mut wire_cst_speed_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<crate::api::enumeration::SpeedTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::enumeration::SpeedTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync>>
    for *mut wire_cst_speed_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync>>
    for *mut wire_cst_speed_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync>::cst_decode(
            *wrap,
        )
        .into()
    }
}
impl CstDecode<Box<u8>> for *mut u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<u8> {
        unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<Box<[u8; 1600]>> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<[u8; 1600]> {
        CstDecode::<[u8; 1600]>::cst_decode(self).into()
    }
}
impl CstDecode<Box<[u8; 8]>> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<[u8; 8]> {
        CstDecode::<[u8; 8]>::cst_decode(self).into()
    }
}
impl CstDecode<Box<crate::api::misc_example::WeekdaysTwinNormal>> for *mut i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<crate::api::misc_example::WeekdaysTwinNormal> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::misc_example::WeekdaysTwinNormal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>
    for *mut i32
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>
    for *mut i32
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::misc_example::CTwinNormal> for wire_cst_c_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_example::CTwinNormal {
        crate::api::misc_example::CTwinNormal {
            c: self.c.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync>
    for wire_cst_c_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync {
            c: self.c.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync>
    for wire_cst_c_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync {
            c: self.c.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::method::ConcatenateWithTwinNormal>
    for wire_cst_concatenate_with_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::method::ConcatenateWithTwinNormal {
        crate::api::method::ConcatenateWithTwinNormal {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync>
    for wire_cst_concatenate_with_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync {
        crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync>
    for wire_cst_concatenate_with_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync {
        crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::constructor::ConstructorTranslatableStructTwinNormal>
    for wire_cst_constructor_translatable_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::constructor::ConstructorTranslatableStructTwinNormal {
        crate::api::constructor::ConstructorTranslatableStructTwinNormal {
            one: self.one.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::constructor::ConstructorTranslatableSyncStructTwinNormal>
    for wire_cst_constructor_translatable_sync_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::constructor::ConstructorTranslatableSyncStructTwinNormal {
        crate::api::constructor::ConstructorTranslatableSyncStructTwinNormal {
            one: self.one.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::mirror::ContainsMirroredSubStructTwinNormal>
    for wire_cst_contains_mirrored_sub_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::mirror::ContainsMirroredSubStructTwinNormal {
        crate::api::mirror::ContainsMirroredSubStructTwinNormal {
            test: self.test.cst_decode(),
            test2: self.test2.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync,
    > for wire_cst_contains_mirrored_sub_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync
    {
        crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync {
            test: self.test.cst_decode(),
            test2: self.test2.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync>
    for wire_cst_contains_mirrored_sub_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync {
        crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync {
            test: self.test.cst_decode(),
            test2: self.test2.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomEnumErrorTwinNormal>
    for wire_cst_custom_enum_error_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::exception::CustomEnumErrorTwinNormal {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.One };
                crate::api::exception::CustomEnumErrorTwinNormal::One {
                    message: ans.message.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            }
            1 => {
                let ans = unsafe { self.kind.Two };
                crate::api::exception::CustomEnumErrorTwinNormal::Two {
                    message: ans.message.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync>
    for wire_cst_custom_enum_error_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.One };
                crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync::One{message:  ans.message.cst_decode(),backtrace:  ans.backtrace.cst_decode()}
            }
            1 => {
                let ans = unsafe { self.kind.Two };
                crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync::Two{message:  ans.message.cst_decode(),backtrace:  ans.backtrace.cst_decode()}
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync>
    for wire_cst_custom_enum_error_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.One };
                crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync::One {
                    message: ans.message.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            }
            1 => {
                let ans = unsafe { self.kind.Two };
                crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync::Two {
                    message: ans.message.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomErrorTwinNormal> for wire_cst_custom_error_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::exception::CustomErrorTwinNormal {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Error0 };
                crate::api::exception::CustomErrorTwinNormal::Error0 {
                    e: ans.e.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            }
            1 => {
                let ans = unsafe { self.kind.Error1 };
                crate::api::exception::CustomErrorTwinNormal::Error1 {
                    e: ans.e.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync>
    for wire_cst_custom_error_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Error0 };
                crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync::Error0{e:  ans.e.cst_decode(),backtrace:  ans.backtrace.cst_decode()}
            }
            1 => {
                let ans = unsafe { self.kind.Error1 };
                crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync::Error1{e:  ans.e.cst_decode(),backtrace:  ans.backtrace.cst_decode()}
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync>
    for wire_cst_custom_error_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Error0 };
                crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync::Error0 {
                    e: ans.e.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            }
            1 => {
                let ans = unsafe { self.kind.Error1 };
                crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync::Error1 {
                    e: ans.e.cst_decode(),
                    backtrace: ans.backtrace.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomNestedError1TwinNormal>
    for wire_cst_custom_nested_error_1_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::exception::CustomNestedError1TwinNormal {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.CustomNested1 };
                crate::api::exception::CustomNestedError1TwinNormal::CustomNested1(
                    ans.field0.cst_decode(),
                )
            }
            1 => {
                let ans = unsafe { self.kind.ErrorNested };
                crate::api::exception::CustomNestedError1TwinNormal::ErrorNested(
                    ans.field0.cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync>
    for wire_cst_custom_nested_error_1_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.CustomNested1 };
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync::CustomNested1( ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.ErrorNested };
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync::ErrorNested( ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync>
    for wire_cst_custom_nested_error_1_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.CustomNested1 };
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync::CustomNested1( ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.ErrorNested };
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync::ErrorNested( ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomNestedError2TwinNormal>
    for wire_cst_custom_nested_error_2_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::exception::CustomNestedError2TwinNormal {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.CustomNested2 };
                crate::api::exception::CustomNestedError2TwinNormal::CustomNested2(
                    ans.field0.cst_decode(),
                )
            }
            1 => {
                let ans = unsafe { self.kind.CustomNested2Number };
                crate::api::exception::CustomNestedError2TwinNormal::CustomNested2Number(
                    ans.field0.cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync>
    for wire_cst_custom_nested_error_2_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.CustomNested2 };
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync::CustomNested2( ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.CustomNested2Number };
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync::CustomNested2Number( ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync>
    for wire_cst_custom_nested_error_2_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.CustomNested2 };
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync::CustomNested2( ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.CustomNested2Number };
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync::CustomNested2Number( ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomNestedErrorInnerTwinNormal>
    for wire_cst_custom_nested_error_inner_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::exception::CustomNestedErrorInnerTwinNormal {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Three };
                crate::api::exception::CustomNestedErrorInnerTwinNormal::Three(
                    ans.field0.cst_decode(),
                )
            }
            1 => {
                let ans = unsafe { self.kind.Four };
                crate::api::exception::CustomNestedErrorInnerTwinNormal::Four(
                    ans.field0.cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync,
    > for wire_cst_custom_nested_error_inner_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
    {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Three };
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Three( ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.Four };
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Four( ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync>
    for wire_cst_custom_nested_error_inner_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Three };
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Three( ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.Four };
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Four(
                    ans.field0.cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomNestedErrorOuterTwinNormal>
    for wire_cst_custom_nested_error_outer_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::exception::CustomNestedErrorOuterTwinNormal {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.One };
                crate::api::exception::CustomNestedErrorOuterTwinNormal::One(
                    ans.field0.cst_decode(),
                )
            }
            1 => {
                let ans = unsafe { self.kind.Two };
                crate::api::exception::CustomNestedErrorOuterTwinNormal::Two(
                    ans.field0.cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync,
    > for wire_cst_custom_nested_error_outer_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
    {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.One };
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::One( ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.Two };
                crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::Two( ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync>
    for wire_cst_custom_nested_error_outer_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.One };
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::One(
                    ans.field0.cst_decode(),
                )
            }
            1 => {
                let ans = unsafe { self.kind.Two };
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::Two(
                    ans.field0.cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomStructErrorAnotherTwinNormal>
    for wire_cst_custom_struct_error_another_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::exception::CustomStructErrorAnotherTwinNormal {
        crate::api::exception::CustomStructErrorAnotherTwinNormal {
            message: self.message.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync,
    > for wire_cst_custom_struct_error_another_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync
    {
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync{message:  self.message.cst_decode()}
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync>
    for wire_cst_custom_struct_error_another_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync {
        crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync {
            message: self.message.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomStructErrorTwinNormal>
    for wire_cst_custom_struct_error_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::exception::CustomStructErrorTwinNormal {
        crate::api::exception::CustomStructErrorTwinNormal {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync>
    for wire_cst_custom_struct_error_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync {
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync>
    for wire_cst_custom_struct_error_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
        crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomStructTwinNormal>
    for wire_cst_custom_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::exception::CustomStructTwinNormal {
        crate::api::exception::CustomStructTwinNormal {
            message: self.message.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync>
    for wire_cst_custom_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync {
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync {
            message: self.message.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync>
    for wire_cst_custom_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync {
        crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync {
            message: self.message.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::attribute::CustomizedTwinNormal> for wire_cst_customized_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::attribute::CustomizedTwinNormal {
        crate::api::attribute::CustomizedTwinNormal {
            final_field: self.final_field.cst_decode(),
            non_final_field: self.non_final_field.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync>
    for wire_cst_customized_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync {
        crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync {
            final_field: self.final_field.cst_decode(),
            non_final_field: self.non_final_field.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync>
    for wire_cst_customized_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync {
        crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync {
            final_field: self.final_field.cst_decode(),
            non_final_field: self.non_final_field.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::dart_opaque::DartOpaqueNestedTwinNormal>
    for wire_cst_dart_opaque_nested_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
        crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync>
    for wire_cst_dart_opaque_nested_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync {
        crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync>
    for wire_cst_dart_opaque_nested_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync {
        crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::dart_fn::DemoStructForRustCallDartTwinNormal>
    for wire_cst_demo_struct_for_rust_call_dart_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::dart_fn::DemoStructForRustCallDartTwinNormal {
        crate::api::dart_fn::DemoStructForRustCallDartTwinNormal {
            name: self.name.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync,
    > for wire_cst_demo_struct_for_rust_call_dart_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync
    {
        crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync {
            name: self.name.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::enumeration::DistanceTwinNormal> for wire_cst_distance_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::enumeration::DistanceTwinNormal {
        match self.tag {
            0 => crate::api::enumeration::DistanceTwinNormal::Unknown,
            1 => {
                let ans = unsafe { self.kind.Map };
                crate::api::enumeration::DistanceTwinNormal::Map(ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>
    for wire_cst_distance_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync {
        match self.tag {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Unknown,
1 => {
                        let ans = unsafe { self.kind.Map };
                        crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Map( ans.field0.cst_decode())
                    }
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync>
    for wire_cst_distance_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync {
        match self.tag {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Unknown,
            1 => {
                let ans = unsafe { self.kind.Map };
                crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Map(
                    ans.field0.cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::optional::ElementTwinNormal> for wire_cst_element_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::optional::ElementTwinNormal {
        crate::api::optional::ElementTwinNormal {
            tag: self.tag.cst_decode(),
            text: self.text.cst_decode(),
            attributes: self.attributes.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>
    for wire_cst_element_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync {
        crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync {
            tag: self.tag.cst_decode(),
            text: self.text.cst_decode(),
            attributes: self.attributes.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>
    for wire_cst_element_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync {
        crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync {
            tag: self.tag.cst_decode(),
            text: self.text.cst_decode(),
            attributes: self.attributes.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_type::EmptyTwinNormal> for wire_cst_empty_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_type::EmptyTwinNormal {
        crate::api::misc_type::EmptyTwinNormal {}
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync>
    for wire_cst_empty_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync {
        crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync {}
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync>
    for wire_cst_empty_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync {
        crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync {}
    }
}
impl CstDecode<crate::api::dart_opaque::EnumDartOpaqueTwinNormal>
    for wire_cst_enum_dart_opaque_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::dart_opaque::EnumDartOpaqueTwinNormal {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Primitive };
                crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Primitive(
                    ans.field0.cst_decode(),
                )
            }
            1 => {
                let ans = unsafe { self.kind.Opaque };
                crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Opaque(ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync>
    for wire_cst_enum_dart_opaque_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Primitive };
                crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Primitive( ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.Opaque };
                crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Opaque( ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync>
    for wire_cst_enum_dart_opaque_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Primitive };
                crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Primitive(
                    ans.field0.cst_decode(),
                )
            }
            1 => {
                let ans = unsafe { self.kind.Opaque };
                crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Opaque(
                    ans.field0.cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi>
    for wire_cst_enum_opaque_twin_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Struct };
                crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Struct(
                    ans.field0.cst_decode(),
                )
            }
            1 => {
                let ans = unsafe { self.kind.Primitive };
                crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Primitive(
                    ans.field0.cst_decode(),
                )
            }
            2 => {
                let ans = unsafe { self.kind.TraitObj };
                crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::TraitObj(
                    ans.field0.cst_decode(),
                )
            }
            3 => {
                let ans = unsafe { self.kind.Mutex };
                crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Mutex(
                    ans.field0.cst_decode(),
                )
            }
            4 => {
                let ans = unsafe { self.kind.RwLock };
                crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::RwLock(
                    ans.field0.cst_decode(),
                )
            }
            5 => crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Nothing,
            _ => unreachable!(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi; 5]>
    for *mut wire_cst_list_enum_opaque_twin_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi; 5] {
        let vec: Vec<crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::rust_opaque::EnumOpaqueTwinNormal> for wire_cst_enum_opaque_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::rust_opaque::EnumOpaqueTwinNormal {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Struct };
                crate::api::rust_opaque::EnumOpaqueTwinNormal::Struct(ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.Primitive };
                crate::api::rust_opaque::EnumOpaqueTwinNormal::Primitive(ans.field0.cst_decode())
            }
            2 => {
                let ans = unsafe { self.kind.TraitObj };
                crate::api::rust_opaque::EnumOpaqueTwinNormal::TraitObj(ans.field0.cst_decode())
            }
            3 => {
                let ans = unsafe { self.kind.Mutex };
                crate::api::rust_opaque::EnumOpaqueTwinNormal::Mutex(ans.field0.cst_decode())
            }
            4 => {
                let ans = unsafe { self.kind.RwLock };
                crate::api::rust_opaque::EnumOpaqueTwinNormal::RwLock(ans.field0.cst_decode())
            }
            5 => crate::api::rust_opaque::EnumOpaqueTwinNormal::Nothing,
            _ => unreachable!(),
        }
    }
}
impl CstDecode<[crate::api::rust_opaque::EnumOpaqueTwinNormal; 5]>
    for *mut wire_cst_list_enum_opaque_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [crate::api::rust_opaque::EnumOpaqueTwinNormal; 5] {
        let vec: Vec<crate::api::rust_opaque::EnumOpaqueTwinNormal> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>
    for wire_cst_enum_opaque_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync {
        match self.tag {
                    0 => {
                        let ans = unsafe { self.kind.Struct };
                        crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Struct( ans.field0.cst_decode())
                    }
1 => {
                        let ans = unsafe { self.kind.Primitive };
                        crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Primitive( ans.field0.cst_decode())
                    }
2 => {
                        let ans = unsafe { self.kind.TraitObj };
                        crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::TraitObj( ans.field0.cst_decode())
                    }
3 => {
                        let ans = unsafe { self.kind.Mutex };
                        crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Mutex( ans.field0.cst_decode())
                    }
4 => {
                        let ans = unsafe { self.kind.RwLock };
                        crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::RwLock( ans.field0.cst_decode())
                    }
5 => crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Nothing,
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<[crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync; 5]>
    for *mut wire_cst_list_enum_opaque_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync; 5] {
        let vec: Vec<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync,
        > = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi,
    > for wire_cst_enum_opaque_twin_rust_async_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi
    {
        match self.tag {
                    0 => {
                        let ans = unsafe { self.kind.Struct };
                        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Struct( ans.field0.cst_decode())
                    }
1 => {
                        let ans = unsafe { self.kind.Primitive };
                        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Primitive( ans.field0.cst_decode())
                    }
2 => {
                        let ans = unsafe { self.kind.TraitObj };
                        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::TraitObj( ans.field0.cst_decode())
                    }
3 => {
                        let ans = unsafe { self.kind.Mutex };
                        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Mutex( ans.field0.cst_decode())
                    }
4 => {
                        let ans = unsafe { self.kind.RwLock };
                        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::RwLock( ans.field0.cst_decode())
                    }
5 => crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Nothing,
                    _ => unreachable!(),
                }
    }
}
impl
    CstDecode<
        [crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi; 5],
    > for *mut wire_cst_list_enum_opaque_twin_rust_async_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi; 5]
    {
        let vec: Vec<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi,
        > = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>
    for wire_cst_enum_opaque_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Struct };
                crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Struct(
                    ans.field0.cst_decode(),
                )
            }
            1 => {
                let ans = unsafe { self.kind.Primitive };
                crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Primitive(
                    ans.field0.cst_decode(),
                )
            }
            2 => {
                let ans = unsafe { self.kind.TraitObj };
                crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::TraitObj(
                    ans.field0.cst_decode(),
                )
            }
            3 => {
                let ans = unsafe { self.kind.Mutex };
                crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Mutex(
                    ans.field0.cst_decode(),
                )
            }
            4 => {
                let ans = unsafe { self.kind.RwLock };
                crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::RwLock(
                    ans.field0.cst_decode(),
                )
            }
            5 => crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Nothing,
            _ => unreachable!(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync; 5]>
    for *mut wire_cst_list_enum_opaque_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync; 5] {
        let vec: Vec<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi>
    for wire_cst_enum_opaque_twin_sync_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Struct };
                crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Struct(
                    ans.field0.cst_decode(),
                )
            }
            1 => {
                let ans = unsafe { self.kind.Primitive };
                crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Primitive( ans.field0.cst_decode())
            }
            2 => {
                let ans = unsafe { self.kind.TraitObj };
                crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::TraitObj( ans.field0.cst_decode())
            }
            3 => {
                let ans = unsafe { self.kind.Mutex };
                crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Mutex(
                    ans.field0.cst_decode(),
                )
            }
            4 => {
                let ans = unsafe { self.kind.RwLock };
                crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::RwLock(
                    ans.field0.cst_decode(),
                )
            }
            5 => {
                crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Nothing
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi; 5]>
    for *mut wire_cst_list_enum_opaque_twin_sync_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi; 5] {
        let vec: Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_moi::EnumWithGoodAndOpaqueTwinMoi>
    for wire_cst_enum_with_good_and_opaque_twin_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_auto_opaque_twin_moi::EnumWithGoodAndOpaqueTwinMoi {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Good };
                crate::api::pseudo_manual::rust_auto_opaque_twin_moi::EnumWithGoodAndOpaqueTwinMoi::Good( ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.Opaque };
                crate::api::pseudo_manual::rust_auto_opaque_twin_moi::EnumWithGoodAndOpaqueTwinMoi::Opaque( ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::rust_auto_opaque::EnumWithGoodAndOpaqueTwinNormal>
    for wire_cst_enum_with_good_and_opaque_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::rust_auto_opaque::EnumWithGoodAndOpaqueTwinNormal {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Good };
                crate::api::rust_auto_opaque::EnumWithGoodAndOpaqueTwinNormal::Good(
                    ans.field0.cst_decode(),
                )
            }
            1 => {
                let ans = unsafe { self.kind.Opaque };
                crate::api::rust_auto_opaque::EnumWithGoodAndOpaqueTwinNormal::Opaque(
                    ans.field0.cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::EnumWithGoodAndOpaqueTwinRustAsync> for wire_cst_enum_with_good_and_opaque_twin_rust_async {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::EnumWithGoodAndOpaqueTwinRustAsync {
                match self.tag {
                    0 => {
                        let ans = unsafe { self.kind.Good };
                        crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::EnumWithGoodAndOpaqueTwinRustAsync::Good( ans.field0.cst_decode())
                    }
1 => {
                        let ans = unsafe { self.kind.Opaque };
                        crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::EnumWithGoodAndOpaqueTwinRustAsync::Opaque( ans.field0.cst_decode())
                    }
                    _ => unreachable!(),
                }
            }
        }
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::EnumWithGoodAndOpaqueTwinRustAsyncMoi> for wire_cst_enum_with_good_and_opaque_twin_rust_async_moi {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::EnumWithGoodAndOpaqueTwinRustAsyncMoi {
                match self.tag {
                    0 => {
                        let ans = unsafe { self.kind.Good };
                        crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::EnumWithGoodAndOpaqueTwinRustAsyncMoi::Good( ans.field0.cst_decode())
                    }
1 => {
                        let ans = unsafe { self.kind.Opaque };
                        crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::EnumWithGoodAndOpaqueTwinRustAsyncMoi::Opaque( ans.field0.cst_decode())
                    }
                    _ => unreachable!(),
                }
            }
        }
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_sync::EnumWithGoodAndOpaqueTwinSync>
    for wire_cst_enum_with_good_and_opaque_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_auto_opaque_twin_sync::EnumWithGoodAndOpaqueTwinSync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Good };
                crate::api::pseudo_manual::rust_auto_opaque_twin_sync::EnumWithGoodAndOpaqueTwinSync::Good( ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.Opaque };
                crate::api::pseudo_manual::rust_auto_opaque_twin_sync::EnumWithGoodAndOpaqueTwinSync::Opaque( ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::EnumWithGoodAndOpaqueTwinSyncMoi,
    > for wire_cst_enum_with_good_and_opaque_twin_sync_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::EnumWithGoodAndOpaqueTwinSyncMoi
    {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Good };
                crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::EnumWithGoodAndOpaqueTwinSyncMoi::Good( ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.Opaque };
                crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::EnumWithGoodAndOpaqueTwinSyncMoi::Opaque( ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::enumeration::EnumWithItemMixedTwinNormal>
    for wire_cst_enum_with_item_mixed_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemMixedTwinNormal {
        match self.tag {
            0 => crate::api::enumeration::EnumWithItemMixedTwinNormal::A,
            1 => {
                let ans = unsafe { self.kind.B };
                crate::api::enumeration::EnumWithItemMixedTwinNormal::B(ans.field0.cst_decode())
            }
            2 => {
                let ans = unsafe { self.kind.C };
                crate::api::enumeration::EnumWithItemMixedTwinNormal::C {
                    c_field: ans.c_field.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync,
    > for wire_cst_enum_with_item_mixed_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
    {
        match self.tag {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::A,
1 => {
                        let ans = unsafe { self.kind.B };
                        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::B( ans.field0.cst_decode())
                    }
2 => {
                        let ans = unsafe { self.kind.C };
                        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::C{c_field:  ans.c_field.cst_decode()}
                    }
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync>
    for wire_cst_enum_with_item_mixed_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync {
        match self.tag {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::A,
            1 => {
                let ans = unsafe { self.kind.B };
                crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::B(
                    ans.field0.cst_decode(),
                )
            }
            2 => {
                let ans = unsafe { self.kind.C };
                crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::C {
                    c_field: ans.c_field.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::enumeration::EnumWithItemStructTwinNormal>
    for wire_cst_enum_with_item_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemStructTwinNormal {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.A };
                crate::api::enumeration::EnumWithItemStructTwinNormal::A {
                    a_field: ans.a_field.cst_decode(),
                }
            }
            1 => {
                let ans = unsafe { self.kind.B };
                crate::api::enumeration::EnumWithItemStructTwinNormal::B {
                    b_field: ans.b_field.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync,
    > for wire_cst_enum_with_item_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
    {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.A };
                crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::A{a_field:  ans.a_field.cst_decode()}
            }
            1 => {
                let ans = unsafe { self.kind.B };
                crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::B{b_field:  ans.b_field.cst_decode()}
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync>
    for wire_cst_enum_with_item_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.A };
                crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::A {
                    a_field: ans.a_field.cst_decode(),
                }
            }
            1 => {
                let ans = unsafe { self.kind.B };
                crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::B {
                    b_field: ans.b_field.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::enumeration::EnumWithItemTupleTwinNormal>
    for wire_cst_enum_with_item_tuple_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemTupleTwinNormal {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.A };
                crate::api::enumeration::EnumWithItemTupleTwinNormal::A(ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.B };
                crate::api::enumeration::EnumWithItemTupleTwinNormal::B(ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync,
    > for wire_cst_enum_with_item_tuple_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
    {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.A };
                crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::A( ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.B };
                crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::B( ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync>
    for wire_cst_enum_with_item_tuple_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.A };
                crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::A(
                    ans.field0.cst_decode(),
                )
            }
            1 => {
                let ans = unsafe { self.kind.B };
                crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::B(
                    ans.field0.cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::event_listener::EventTwinNormal> for wire_cst_event_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::event_listener::EventTwinNormal {
        crate::api::event_listener::EventTwinNormal {
            address: self.address.cst_decode(),
            payload: self.payload.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync>
    for wire_cst_event_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync {
        crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync {
            address: self.address.cst_decode(),
            payload: self.payload.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::optional::ExoticOptionalsTwinNormal>
    for wire_cst_exotic_optionals_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::optional::ExoticOptionalsTwinNormal {
        crate::api::optional::ExoticOptionalsTwinNormal {
            int32: self.int32.cst_decode(),
            int64: self.int64.cst_decode(),
            float64: self.float64.cst_decode(),
            boolean: self.boolean.cst_decode(),
            zerocopy: self.zerocopy.cst_decode(),
            int8list: self.int8list.cst_decode(),
            uint8list: self.uint8list.cst_decode(),
            int32list: self.int32list.cst_decode(),
            float32list: self.float32list.cst_decode(),
            float64list: self.float64list.cst_decode(),
            attributes: self.attributes.cst_decode(),
            attributes_nullable: self.attributes_nullable.cst_decode(),
            nullable_attributes: self.nullable_attributes.cst_decode(),
            newtypeint: self.newtypeint.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
    for wire_cst_exotic_optionals_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync {
        crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync {
            int32: self.int32.cst_decode(),
            int64: self.int64.cst_decode(),
            float64: self.float64.cst_decode(),
            boolean: self.boolean.cst_decode(),
            zerocopy: self.zerocopy.cst_decode(),
            int8list: self.int8list.cst_decode(),
            uint8list: self.uint8list.cst_decode(),
            int32list: self.int32list.cst_decode(),
            float32list: self.float32list.cst_decode(),
            float64list: self.float64list.cst_decode(),
            attributes: self.attributes.cst_decode(),
            attributes_nullable: self.attributes_nullable.cst_decode(),
            nullable_attributes: self.nullable_attributes.cst_decode(),
            newtypeint: self.newtypeint.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>
    for wire_cst_exotic_optionals_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync {
        crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync {
            int32: self.int32.cst_decode(),
            int64: self.int64.cst_decode(),
            float64: self.float64.cst_decode(),
            boolean: self.boolean.cst_decode(),
            zerocopy: self.zerocopy.cst_decode(),
            int8list: self.int8list.cst_decode(),
            uint8list: self.uint8list.cst_decode(),
            int32list: self.int32list.cst_decode(),
            float32list: self.float32list.cst_decode(),
            float64list: self.float64list.cst_decode(),
            attributes: self.attributes.cst_decode(),
            attributes_nullable: self.attributes_nullable.cst_decode(),
            nullable_attributes: self.nullable_attributes.cst_decode(),
            newtypeint: self.newtypeint.cst_decode(),
        }
    }
}
impl CstDecode<[f64; 16]> for *mut wire_cst_list_prim_f_64_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [f64; 16] {
        let vec: Vec<f64> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::chrono_type::FeatureChronoTwinNormal>
    for wire_cst_feature_chrono_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::chrono_type::FeatureChronoTwinNormal {
        crate::api::chrono_type::FeatureChronoTwinNormal {
            utc: self.utc.cst_decode(),
            local: self.local.cst_decode(),
            duration: self.duration.cst_decode(),
            naive: self.naive.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync>
    for wire_cst_feature_chrono_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync {
        crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync {
            utc: self.utc.cst_decode(),
            local: self.local.cst_decode(),
            duration: self.duration.cst_decode(),
            naive: self.naive.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync>
    for wire_cst_feature_chrono_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync {
        crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync {
            utc: self.utc.cst_decode(),
            local: self.local.cst_decode(),
            duration: self.duration.cst_decode(),
            naive: self.naive.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::uuid_type::FeatureUuidTwinNormal> for wire_cst_feature_uuid_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uuid_type::FeatureUuidTwinNormal {
        crate::api::uuid_type::FeatureUuidTwinNormal {
            one: self.one.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync>
    for wire_cst_feature_uuid_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync {
        crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync {
            one: self.one.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync>
    for wire_cst_feature_uuid_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync {
        crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync {
            one: self.one.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::array::FeedIdTwinNormal> for wire_cst_feed_id_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::array::FeedIdTwinNormal {
        crate::api::array::FeedIdTwinNormal(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>
    for wire_cst_feed_id_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync {
        crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>
    for wire_cst_feed_id_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync {
        crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::HashMapValue>
    for wire_cst_hash_map_value
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::HashMapValue {
        crate::api::pseudo_manual::mirror_twin_sync_sse::HashMapValue {
            inner: self.inner.cst_decode(),
        }
    }
}
impl CstDecode<[i32; 2]> for *mut wire_cst_list_prim_i_32_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [i32; 2] {
        let vec: Vec<i32> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::enumeration::KitchenSinkTwinNormal>
    for wire_cst_kitchen_sink_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::enumeration::KitchenSinkTwinNormal {
        match self.tag {
            0 => crate::api::enumeration::KitchenSinkTwinNormal::Empty,
            1 => {
                let ans = unsafe { self.kind.Primitives };
                crate::api::enumeration::KitchenSinkTwinNormal::Primitives {
                    int32: ans.int32.cst_decode(),
                    float64: ans.float64.cst_decode(),
                    boolean: ans.boolean.cst_decode(),
                }
            }
            2 => {
                let ans = unsafe { self.kind.Nested };
                crate::api::enumeration::KitchenSinkTwinNormal::Nested(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            }
            3 => {
                let ans = unsafe { self.kind.Optional };
                crate::api::enumeration::KitchenSinkTwinNormal::Optional(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            }
            4 => {
                let ans = unsafe { self.kind.Buffer };
                crate::api::enumeration::KitchenSinkTwinNormal::Buffer(ans.field0.cst_decode())
            }
            5 => {
                let ans = unsafe { self.kind.Enums };
                crate::api::enumeration::KitchenSinkTwinNormal::Enums(ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>
    for wire_cst_kitchen_sink_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync {
        match self.tag {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Empty,
1 => {
                        let ans = unsafe { self.kind.Primitives };
                        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Primitives{int32:  ans.int32.cst_decode(),float64:  ans.float64.cst_decode(),boolean:  ans.boolean.cst_decode()}
                    }
2 => {
                        let ans = unsafe { self.kind.Nested };
                        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Nested( ans.field0.cst_decode(), ans.field1.cst_decode())
                    }
3 => {
                        let ans = unsafe { self.kind.Optional };
                        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Optional( ans.field0.cst_decode(), ans.field1.cst_decode())
                    }
4 => {
                        let ans = unsafe { self.kind.Buffer };
                        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Buffer( ans.field0.cst_decode())
                    }
5 => {
                        let ans = unsafe { self.kind.Enums };
                        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Enums( ans.field0.cst_decode())
                    }
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>
    for wire_cst_kitchen_sink_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync {
        match self.tag {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Empty,
            1 => {
                let ans = unsafe { self.kind.Primitives };
                crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Primitives {
                    int32: ans.int32.cst_decode(),
                    float64: ans.float64.cst_decode(),
                    boolean: ans.boolean.cst_decode(),
                }
            }
            2 => {
                let ans = unsafe { self.kind.Nested };
                crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Nested(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            }
            3 => {
                let ans = unsafe { self.kind.Optional };
                crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Optional(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            }
            4 => {
                let ans = unsafe { self.kind.Buffer };
                crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Buffer(
                    ans.field0.cst_decode(),
                )
            }
            5 => {
                let ans = unsafe { self.kind.Enums };
                crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Enums(
                    ans.field0.cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<Vec<NonCloneSimpleTwinMoi>> for *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> Vec<NonCloneSimpleTwinMoi> {
                let vec = unsafe {
        let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
        flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
    };
    vec.into_iter().map(CstDecode::cst_decode).collect()
            }
        }
impl CstDecode<Vec<NonCloneSimpleTwinNormal>> for *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> Vec<NonCloneSimpleTwinNormal> {
                let vec = unsafe {
        let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
        flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
    };
    vec.into_iter().map(CstDecode::cst_decode).collect()
            }
        }
impl CstDecode<Vec<NonCloneSimpleTwinRustAsync>> for *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> Vec<NonCloneSimpleTwinRustAsync> {
                let vec = unsafe {
        let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
        flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
    };
    vec.into_iter().map(CstDecode::cst_decode).collect()
            }
        }
impl CstDecode<Vec<NonCloneSimpleTwinRustAsyncMoi>> for *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> Vec<NonCloneSimpleTwinRustAsyncMoi> {
                let vec = unsafe {
        let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
        flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
    };
    vec.into_iter().map(CstDecode::cst_decode).collect()
            }
        }
impl CstDecode<Vec<NonCloneSimpleTwinSync>> for *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> Vec<NonCloneSimpleTwinSync> {
                let vec = unsafe {
        let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
        flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
    };
    vec.into_iter().map(CstDecode::cst_decode).collect()
            }
        }
impl CstDecode<Vec<NonCloneSimpleTwinSyncMoi>> for *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> Vec<NonCloneSimpleTwinSyncMoi> {
                let vec = unsafe {
        let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
        flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
    };
    vec.into_iter().map(CstDecode::cst_decode).collect()
            }
        }
impl CstDecode<Vec<chrono::Duration>> for *mut wire_cst_list_Chrono_Duration {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<chrono::Duration> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<chrono::DateTime<chrono::Local>>> for *mut wire_cst_list_Chrono_Local {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<chrono::DateTime<chrono::Local>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<chrono::NaiveDateTime>> for *mut wire_cst_list_Chrono_Naive {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<chrono::NaiveDateTime> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<flutter_rust_bridge::DartOpaque>> for *mut wire_cst_list_DartOpaque {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<flutter_rust_bridge::DartOpaque> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<RustOpaqueMoi<HideDataTwinMoi>>>
    for *mut wire_cst_list_RustOpaque_HideDataTwinMoi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<RustOpaqueMoi<HideDataTwinMoi>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<RustOpaqueNom<HideDataTwinNormal>>>
    for *mut wire_cst_list_RustOpaque_HideDataTwinNormal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<RustOpaqueNom<HideDataTwinNormal>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<RustOpaqueNom<HideDataTwinRustAsync>>>
    for *mut wire_cst_list_RustOpaque_HideDataTwinRustAsync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<RustOpaqueNom<HideDataTwinRustAsync>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<RustOpaqueMoi<HideDataTwinRustAsyncMoi>>>
    for *mut wire_cst_list_RustOpaque_HideDataTwinRustAsyncMoi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<RustOpaqueMoi<HideDataTwinRustAsyncMoi>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<RustOpaqueNom<HideDataTwinSync>>>
    for *mut wire_cst_list_RustOpaque_HideDataTwinSync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<RustOpaqueNom<HideDataTwinSync>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<RustOpaqueMoi<HideDataTwinSyncMoi>>>
    for *mut wire_cst_list_RustOpaque_HideDataTwinSyncMoi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<RustOpaqueMoi<HideDataTwinSyncMoi>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<String>> for *mut wire_cst_list_String {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<String> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<uuid::Uuid>> for *mut wire_cst_list_Uuid {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<uuid::Uuid> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar>>
    for *mut wire_cst_list_application_env_var
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode>>
    for *mut wire_cst_list_application_mode
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>>
    for *mut wire_cst_list_application_settings
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::optional::AttributeTwinNormal>>
    for *mut wire_cst_list_attribute_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::optional::AttributeTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>
    for *mut wire_cst_list_attribute_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>
    for *mut wire_cst_list_attribute_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>>
    for *mut wire_cst_list_basic_general_enum_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>>
    for *mut wire_cst_list_basic_general_enum_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync>>
    for *mut wire_cst_list_basic_general_enum_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal>>
    for *mut wire_cst_list_basic_primitive_enum_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>,
    > for *mut wire_cst_list_basic_primitive_enum_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>
    {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync>>
    for *mut wire_cst_list_basic_primitive_enum_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic::BasicStructTwinNormal>>
    for *mut wire_cst_list_basic_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::basic::BasicStructTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync>>
    for *mut wire_cst_list_basic_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync>>
    for *mut wire_cst_list_basic_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<bool>> for *mut wire_cst_list_bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<bool> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::optional::ElementTwinNormal>>
    for *mut wire_cst_list_element_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::optional::ElementTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>>
    for *mut wire_cst_list_element_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>>
    for *mut wire_cst_list_element_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi>>
    for *mut wire_cst_list_enum_opaque_twin_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::rust_opaque::EnumOpaqueTwinNormal>>
    for *mut wire_cst_list_enum_opaque_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::rust_opaque::EnumOpaqueTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>>
    for *mut wire_cst_list_enum_opaque_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi>,
    > for *mut wire_cst_list_enum_opaque_twin_rust_async_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi>
    {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>>
    for *mut wire_cst_list_enum_opaque_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi>>
    for *mut wire_cst_list_enum_opaque_twin_sync_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Vec<u8>>> for *mut wire_cst_list_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<Vec<u8>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::auxiliary::sample_types::MyEnum>> for *mut wire_cst_list_my_enum {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::auxiliary::sample_types::MyEnum> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::auxiliary::sample_types::MySize>> for *mut wire_cst_list_my_size {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::auxiliary::sample_types::MySize> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::misc_example::MyTreeNodeTwinNormal>>
    for *mut wire_cst_list_my_tree_node_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::misc_example::MyTreeNodeTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>>
    for *mut wire_cst_list_my_tree_node_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>>
    for *mut wire_cst_list_my_tree_node_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored>>
    for *mut wire_cst_list_nested_raw_string_mirrored
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored>
    for wire_cst_list_of_nested_raw_string_mirrored
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored {
        crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored {
            raw: self.raw.cst_decode(),
        }
    }
}
impl CstDecode<Vec<Option<String>>> for *mut wire_cst_list_opt_String {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<Option<String>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<crate::api::optional::AttributeTwinNormal>>>
    for *mut wire_cst_list_opt_box_autoadd_attribute_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<Option<crate::api::optional::AttributeTwinNormal>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>,
    > for *mut wire_cst_list_opt_box_autoadd_attribute_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>
    {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>
    for *mut wire_cst_list_opt_box_autoadd_attribute_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<i32>>> for *mut wire_cst_list_opt_box_autoadd_i_32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<Option<i32>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<crate::api::misc_example::WeekdaysTwinNormal>>>
    for *mut wire_cst_list_opt_box_autoadd_weekdays_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<Option<crate::api::misc_example::WeekdaysTwinNormal>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>,
    > for *mut wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>
    {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>>
    for *mut wire_cst_list_opt_box_autoadd_weekdays_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<Vec<i32>>>> for *mut wire_cst_list_opt_list_prim_i_32_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<Option<Vec<i32>>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::array::PointTwinNormal>> for *mut wire_cst_list_point_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::array::PointTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync>>
    for *mut wire_cst_list_point_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_sync::PointTwinSync>>
    for *mut wire_cst_list_point_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::array_twin_sync::PointTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<f32>> for *mut wire_cst_list_prim_f_32_loose {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<f32> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<f32>> for *mut wire_cst_list_prim_f_32_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<f32> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<f64>> for *mut wire_cst_list_prim_f_64_loose {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<f64> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<f64>> for *mut wire_cst_list_prim_f_64_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<f64> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<i16>> for *mut wire_cst_list_prim_i_16_loose {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<i16> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<i16>> for *mut wire_cst_list_prim_i_16_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<i16> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<i32>> for *mut wire_cst_list_prim_i_32_loose {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<i32> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<i32>> for *mut wire_cst_list_prim_i_32_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<i32> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<i64>> for *mut wire_cst_list_prim_i_64_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<i64> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<i8>> for *mut wire_cst_list_prim_i_8_loose {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<i8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<i8>> for *mut wire_cst_list_prim_i_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<i8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u16>> for *mut wire_cst_list_prim_u_16_loose {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u16> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u16>> for *mut wire_cst_list_prim_u_16_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u16> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u32>> for *mut wire_cst_list_prim_u_32_loose {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u32> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u32>> for *mut wire_cst_list_prim_u_32_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u32> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u64>> for *mut wire_cst_list_prim_u_64_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u64> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_loose {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored>>
    for *mut wire_cst_list_raw_string_enum_mirrored
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>>
    for *mut wire_cst_list_raw_string_mirrored
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
        )>,
    > for *mut wire_cst_list_record_i_32_basic_general_enum_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
    )> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
        )>,
    > for *mut wire_cst_list_record_i_32_basic_general_enum_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
    )> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
        )>,
    > for *mut wire_cst_list_record_i_32_basic_general_enum_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
    )> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
        )>,
    > for *mut wire_cst_list_record_i_32_basic_primitive_enum_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
    )> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
        )>,
    > for *mut wire_cst_list_record_i_32_basic_primitive_enum_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
    )> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
        )>,
    > for *mut wire_cst_list_record_i_32_basic_primitive_enum_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
    )> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal)>>
    for *mut wire_cst_list_record_i_32_basic_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
        )>,
    > for *mut wire_cst_list_record_i_32_basic_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
    )> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
        )>,
    > for *mut wire_cst_list_record_i_32_basic_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
    )> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(i32, bool)>> for *mut wire_cst_list_record_i_32_bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(i32, bool)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(i32, f32)>> for *mut wire_cst_list_record_i_32_f_32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(i32, f32)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(i32, f64)>> for *mut wire_cst_list_record_i_32_f_64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(i32, f64)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(i32, i16)>> for *mut wire_cst_list_record_i_32_i_16 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(i32, i16)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(i32, i32)>> for *mut wire_cst_list_record_i_32_i_32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(i32, i32)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(i32, i64)>> for *mut wire_cst_list_record_i_32_i_64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(i32, i64)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(i32, i8)>> for *mut wire_cst_list_record_i_32_i_8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(i32, i8)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(i32, isize)>> for *mut wire_cst_list_record_i_32_isize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(i32, isize)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(i32, Vec<u8>)>> for *mut wire_cst_list_record_i_32_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(i32, Vec<u8>)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(i32, String)>> for *mut wire_cst_list_record_i_32_string {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(i32, String)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(i32, u16)>> for *mut wire_cst_list_record_i_32_u_16 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(i32, u16)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(i32, u32)>> for *mut wire_cst_list_record_i_32_u_32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(i32, u32)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(i32, u64)>> for *mut wire_cst_list_record_i_32_u_64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(i32, u64)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(i32, u8)>> for *mut wire_cst_list_record_i_32_u_8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(i32, u8)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(i32, usize)>> for *mut wire_cst_list_record_i_32_usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(i32, usize)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(String, crate::api::enumeration::EnumSimpleTwinNormal)>>
    for *mut wire_cst_list_record_string_enum_simple_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(String, crate::api::enumeration::EnumSimpleTwinNormal)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
        )>,
    > for *mut wire_cst_list_record_string_enum_simple_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
    )> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
        )>,
    > for *mut wire_cst_list_record_string_enum_simple_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
    )> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<(
            String,
            crate::api::pseudo_manual::mirror_twin_sync_sse::HashMapValue,
        )>,
    > for *mut wire_cst_list_record_string_hash_map_value
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<(
        String,
        crate::api::pseudo_manual::mirror_twin_sync_sse::HashMapValue,
    )> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(String, i32)>> for *mut wire_cst_list_record_string_i_32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(String, i32)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(String, crate::api::enumeration::KitchenSinkTwinNormal)>>
    for *mut wire_cst_list_record_string_kitchen_sink_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(String, crate::api::enumeration::KitchenSinkTwinNormal)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
        )>,
    > for *mut wire_cst_list_record_string_kitchen_sink_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
    )> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
        )>,
    > for *mut wire_cst_list_record_string_kitchen_sink_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
    )> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(String, Vec<u8>)>> for *mut wire_cst_list_record_string_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(String, Vec<u8>)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(String, crate::auxiliary::sample_types::MySize)>>
    for *mut wire_cst_list_record_string_my_size
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(String, crate::auxiliary::sample_types::MySize)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<(String, String)>> for *mut wire_cst_list_record_string_string {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<(String, String)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl
    CstDecode<
        Vec<(
            u8,
            crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode,
        )>,
    > for *mut wire_cst_list_record_u_8_application_mode
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<(
        u8,
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode,
    )> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::method::SimpleStructTwinNormal>>
    for *mut wire_cst_list_simple_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::method::SimpleStructTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::method_twin_rust_async::SimpleStructTwinRustAsync>>
    for *mut wire_cst_list_simple_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::method_twin_rust_async::SimpleStructTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::method_twin_sync::SimpleStructTwinSync>>
    for *mut wire_cst_list_simple_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::method_twin_sync::SimpleStructTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::method::SumWithTwinNormal>>
    for *mut wire_cst_list_sum_with_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::method::SumWithTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>>
    for *mut wire_cst_list_sum_with_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>>
    for *mut wire_cst_list_sum_with_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::array::TestIdTwinNormal>>
    for *mut wire_cst_list_test_id_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::array::TestIdTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>>
    for *mut wire_cst_list_test_id_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>>
    for *mut wire_cst_list_test_id_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::misc_example::WeekdaysTwinNormal>>
    for *mut wire_cst_list_weekdays_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::misc_example::WeekdaysTwinNormal> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>
    for *mut wire_cst_list_weekdays_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>
    for *mut wire_cst_list_weekdays_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<crate::api::method::Log2TwinNormal> for wire_cst_log_2_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::method::Log2TwinNormal {
        crate::api::method::Log2TwinNormal {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync>
    for wire_cst_log_2_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync {
        crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync::Log2TwinSync>
    for wire_cst_log_2_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::Log2TwinSync {
        crate::api::pseudo_manual::method_twin_sync::Log2TwinSync {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::stream::LogTwinNormal> for wire_cst_log_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::stream::LogTwinNormal {
        crate::api::stream::LogTwinNormal {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync>
    for wire_cst_log_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync {
        crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync {
            key: self.key.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::inside_macro::MacroStruct> for wire_cst_macro_struct {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::inside_macro::MacroStruct {
        crate::api::inside_macro::MacroStruct {
            data: self.data.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::enumeration::MeasureTwinNormal> for wire_cst_measure_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::enumeration::MeasureTwinNormal {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Speed };
                crate::api::enumeration::MeasureTwinNormal::Speed(ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.Distance };
                crate::api::enumeration::MeasureTwinNormal::Distance(ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync>
    for wire_cst_measure_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Speed };
                crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Speed(
                    ans.field0.cst_decode(),
                )
            }
            1 => {
                let ans = unsafe { self.kind.Distance };
                crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Distance( ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync>
    for wire_cst_measure_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Speed };
                crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Speed(
                    ans.field0.cst_decode(),
                )
            }
            1 => {
                let ans = unsafe { self.kind.Distance };
                crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Distance(
                    ans.field0.cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::array::MessageIdTwinNormal> for wire_cst_message_id_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::array::MessageIdTwinNormal {
        crate::api::array::MessageIdTwinNormal(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync>
    for wire_cst_message_id_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync {
        crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync>
    for wire_cst_message_id_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync {
        crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::mirror::MirrorStructTwinNormal> for wire_cst_mirror_struct_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::mirror::MirrorStructTwinNormal {
        crate::api::mirror::MirrorStructTwinNormal {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
            c: self.c.cst_decode(),
            d: self.d.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync>
    for wire_cst_mirror_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync {
        crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
            c: self.c.cst_decode(),
            d: self.d.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync>
    for wire_cst_mirror_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync {
        crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
            c: self.c.cst_decode(),
            d: self.d.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal>
    for wire_cst_more_than_just_one_raw_string_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal {
        crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal {
            regular: self.regular.cst_decode(),
            r#type: self.r#type.cst_decode(),
            r#async: self.r#async.cst_decode(),
            another: self.another.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync> for wire_cst_more_than_just_one_raw_string_struct_twin_rust_async {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync {
                crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync{regular:  self.regular.cst_decode(),r#type:  self.r#type.cst_decode(),r#async:  self.r#async.cst_decode(),another:  self.another.cst_decode()}
            }
        }
impl
    CstDecode<
        crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync,
    > for wire_cst_more_than_just_one_raw_string_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync
    {
        crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync {
            regular: self.regular.cst_decode(),
            r#type: self.r#type.cst_decode(),
            r#async: self.r#async.cst_decode(),
            another: self.another.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::method::MyCallableTwinNormal> for wire_cst_my_callable_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::method::MyCallableTwinNormal {
        crate::api::method::MyCallableTwinNormal {
            one: self.one.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::MyCallableTwinRustAsync>
    for wire_cst_my_callable_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async::MyCallableTwinRustAsync {
        crate::api::pseudo_manual::method_twin_rust_async::MyCallableTwinRustAsync {
            one: self.one.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync::MyCallableTwinSync>
    for wire_cst_my_callable_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::MyCallableTwinSync {
        crate::api::pseudo_manual::method_twin_sync::MyCallableTwinSync {
            one: self.one.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_example::MyNestedStructTwinNormal>
    for wire_cst_my_nested_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_example::MyNestedStructTwinNormal {
        crate::api::misc_example::MyNestedStructTwinNormal {
            tree_node: self.tree_node.cst_decode(),
            weekday: self.weekday.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync>
    for wire_cst_my_nested_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync {
            tree_node: self.tree_node.cst_decode(),
            weekday: self.weekday.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync>
    for wire_cst_my_nested_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync {
            tree_node: self.tree_node.cst_decode(),
            weekday: self.weekday.cst_decode(),
        }
    }
}
impl CstDecode<crate::auxiliary::sample_types::MySize> for wire_cst_my_size {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::auxiliary::sample_types::MySize {
        crate::auxiliary::sample_types::MySize {
            width: self.width.cst_decode(),
            height: self.height.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::stream::MyStreamEntryTwinNormal>
    for wire_cst_my_stream_entry_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::stream::MyStreamEntryTwinNormal {
        crate::api::stream::MyStreamEntryTwinNormal {
            hello: self.hello.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync>
    for wire_cst_my_stream_entry_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync {
        crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync {
            hello: self.hello.cst_decode(),
        }
    }
}
impl CstDecode<crate::auxiliary::sample_types::MyStruct> for wire_cst_my_struct {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::auxiliary::sample_types::MyStruct {
        crate::auxiliary::sample_types::MyStruct {
            content: self.content.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_example::MyTreeNodeTwinNormal>
    for wire_cst_my_tree_node_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_example::MyTreeNodeTwinNormal {
        crate::api::misc_example::MyTreeNodeTwinNormal {
            value_i32: self.value_i32.cst_decode(),
            value_vec_u8: self.value_vec_u8.cst_decode(),
            value_boolean: self.value_boolean.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>
    for wire_cst_my_tree_node_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync {
            value_i32: self.value_i32.cst_decode(),
            value_vec_u8: self.value_vec_u8.cst_decode(),
            value_boolean: self.value_boolean.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>
    for wire_cst_my_tree_node_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync {
            value_i32: self.value_i32.cst_decode(),
            value_vec_u8: self.value_vec_u8.cst_decode(),
            value_boolean: self.value_boolean.cst_decode(),
            children: self.children.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored>
    for wire_cst_nested_raw_string_mirrored
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored {
        crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored {
            raw: self.raw.cst_decode(),
        }
    }
}
impl CstDecode<crate::auxiliary::new_module_system::sub_module::NewSimpleStruct>
    for wire_cst_new_simple_struct
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::auxiliary::new_module_system::sub_module::NewSimpleStruct {
        crate::auxiliary::new_module_system::sub_module::NewSimpleStruct {
            field: self.field.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::newtype_pattern::NewTypeIntTwinNormal>
    for wire_cst_new_type_int_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::newtype_pattern::NewTypeIntTwinNormal {
        crate::api::newtype_pattern::NewTypeIntTwinNormal(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync>
    for wire_cst_new_type_int_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync {
        crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>
    for wire_cst_new_type_int_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync {
        crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::enumeration::NoteTwinNormal> for wire_cst_note_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::enumeration::NoteTwinNormal {
        crate::api::enumeration::NoteTwinNormal {
            day: self.day.cst_decode(),
            body: self.body.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync>
    for wire_cst_note_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync {
        crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync {
            day: self.day.cst_decode(),
            body: self.body.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync>
    for wire_cst_note_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync {
        crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync {
            day: self.day.cst_decode(),
            body: self.body.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers> for wire_cst_numbers {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers {
        crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers(self.field0.cst_decode())
    }
}
impl CstDecode<crate::auxiliary::old_module_system::sub_module::OldSimpleStruct>
    for wire_cst_old_simple_struct
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::auxiliary::old_module_system::sub_module::OldSimpleStruct {
        crate::auxiliary::old_module_system::sub_module::OldSimpleStruct {
            field: self.field.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_moi::OpaqueNestedTwinMoi>
    for wire_cst_opaque_nested_twin_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_moi::OpaqueNestedTwinMoi {
        crate::api::pseudo_manual::rust_opaque_twin_moi::OpaqueNestedTwinMoi {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::rust_opaque::OpaqueNestedTwinNormal>
    for wire_cst_opaque_nested_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::rust_opaque::OpaqueNestedTwinNormal {
        crate::api::rust_opaque::OpaqueNestedTwinNormal {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync>
    for wire_cst_opaque_nested_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync {
        crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::OpaqueNestedTwinRustAsyncMoi,
    > for wire_cst_opaque_nested_twin_rust_async_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::OpaqueNestedTwinRustAsyncMoi
    {
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::OpaqueNestedTwinRustAsyncMoi {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync>
    for wire_cst_opaque_nested_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync {
        crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::OpaqueNestedTwinSyncMoi>
    for wire_cst_opaque_nested_twin_sync_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_moi::OpaqueNestedTwinSyncMoi {
        crate::api::pseudo_manual::rust_opaque_twin_sync_moi::OpaqueNestedTwinSyncMoi {
            first: self.first.cst_decode(),
            second: self.second.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::optional::OptVecsTwinNormal> for wire_cst_opt_vecs_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::optional::OptVecsTwinNormal {
        crate::api::optional::OptVecsTwinNormal {
            i32: self.i32.cst_decode(),
            enums: self.enums.cst_decode(),
            strings: self.strings.cst_decode(),
            buffers: self.buffers.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync>
    for wire_cst_opt_vecs_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync {
        crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync {
            i32: self.i32.cst_decode(),
            enums: self.enums.cst_decode(),
            strings: self.strings.cst_decode(),
            buffers: self.buffers.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync>
    for wire_cst_opt_vecs_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync {
        crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync {
            i32: self.i32.cst_decode(),
            enums: self.enums.cst_decode(),
            strings: self.strings.cst_decode(),
            buffers: self.buffers.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::array::PointTwinNormal> for wire_cst_point_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::array::PointTwinNormal {
        crate::api::array::PointTwinNormal {
            x: self.x.cst_decode(),
            y: self.y.cst_decode(),
        }
    }
}
impl CstDecode<[crate::api::array::PointTwinNormal; 2]> for *mut wire_cst_list_point_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [crate::api::array::PointTwinNormal; 2] {
        let vec: Vec<crate::api::array::PointTwinNormal> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync>
    for wire_cst_point_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync {
        crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync {
            x: self.x.cst_decode(),
            y: self.y.cst_decode(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync; 2]>
    for *mut wire_cst_list_point_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::PointTwinSync>
    for wire_cst_point_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::PointTwinSync {
        crate::api::pseudo_manual::array_twin_sync::PointTwinSync {
            x: self.x.cst_decode(),
            y: self.y.cst_decode(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sync::PointTwinSync; 2]>
    for *mut wire_cst_list_point_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sync::PointTwinSync; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sync::PointTwinSync> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored>
    for wire_cst_raw_string_enum_mirrored
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Raw };
                crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::Raw(
                    ans.field0.cst_decode(),
                )
            }
            1 => {
                let ans = unsafe { self.kind.Nested };
                crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::Nested(
                    ans.field0.cst_decode(),
                )
            }
            2 => {
                let ans = unsafe { self.kind.ListOfNested };
                crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::ListOfNested(
                    ans.field0.cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::raw_string::RawStringItemStructTwinNormal>
    for wire_cst_raw_string_item_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::raw_string::RawStringItemStructTwinNormal {
        crate::api::raw_string::RawStringItemStructTwinNormal {
            r#type: self.r#type.cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync,
    > for wire_cst_raw_string_item_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync
    {
        crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync {
            r#type: self.r#type.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync>
    for wire_cst_raw_string_item_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync {
        crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync {
            r#type: self.r#type.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>
    for wire_cst_raw_string_mirrored
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored {
        crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored {
            value: self.value.cst_decode(),
        }
    }
}
impl
    CstDecode<(
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings,
        crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored,
    )> for wire_cst_record_application_settings_raw_string_enum_mirrored
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> (
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings,
        crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored,
    ) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(OpaqueOneTwinMoi,OpaqueTwoTwinMoi,)> for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_moi_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_moi {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> (OpaqueOneTwinMoi,OpaqueTwoTwinMoi,) {
                (self.field0.cst_decode(),self.field1.cst_decode(),)
            }
        }
impl CstDecode<(OpaqueOneTwinNormal,OpaqueTwoTwinNormal,)> for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_normal_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_normal {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> (OpaqueOneTwinNormal,OpaqueTwoTwinNormal,) {
                (self.field0.cst_decode(),self.field1.cst_decode(),)
            }
        }
impl CstDecode<(OpaqueOneTwinRustAsync,OpaqueTwoTwinRustAsync,)> for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_rust_async_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_rust_async {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> (OpaqueOneTwinRustAsync,OpaqueTwoTwinRustAsync,) {
                (self.field0.cst_decode(),self.field1.cst_decode(),)
            }
        }
impl CstDecode<(OpaqueOneTwinRustAsyncMoi,OpaqueTwoTwinRustAsyncMoi,)> for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_rust_async_moi_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_rust_async_moi {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> (OpaqueOneTwinRustAsyncMoi,OpaqueTwoTwinRustAsyncMoi,) {
                (self.field0.cst_decode(),self.field1.cst_decode(),)
            }
        }
impl CstDecode<(OpaqueOneTwinSync,OpaqueTwoTwinSync,)> for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_sync_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_sync {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> (OpaqueOneTwinSync,OpaqueTwoTwinSync,) {
                (self.field0.cst_decode(),self.field1.cst_decode(),)
            }
        }
impl CstDecode<(OpaqueOneTwinSyncMoi,OpaqueTwoTwinSyncMoi,)> for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_sync_moi_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_sync_moi {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> (OpaqueOneTwinSyncMoi,OpaqueTwoTwinSyncMoi,) {
                (self.field0.cst_decode(),self.field1.cst_decode(),)
            }
        }
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
    )> for wire_cst_record_i_32_basic_general_enum_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
    ) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
    )> for wire_cst_record_i_32_basic_general_enum_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
    ) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
    )> for wire_cst_record_i_32_basic_general_enum_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
    ) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
    )> for wire_cst_record_i_32_basic_primitive_enum_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
    ) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
    )> for wire_cst_record_i_32_basic_primitive_enum_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
    ) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
    )> for wire_cst_record_i_32_basic_primitive_enum_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
    ) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal)>
    for wire_cst_record_i_32_basic_struct_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
    )> for wire_cst_record_i_32_basic_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
    ) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
    )> for wire_cst_record_i_32_basic_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
    ) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(i32, bool)> for wire_cst_record_i_32_bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (i32, bool) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(i32, f32)> for wire_cst_record_i_32_f_32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (i32, f32) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(i32, f64)> for wire_cst_record_i_32_f_64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (i32, f64) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(i32, i16)> for wire_cst_record_i_32_i_16 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (i32, i16) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(i32, i32)> for wire_cst_record_i_32_i_32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (i32, i32) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(i32, i64)> for wire_cst_record_i_32_i_64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (i32, i64) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(i32, i8)> for wire_cst_record_i_32_i_8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (i32, i8) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(i32, isize)> for wire_cst_record_i_32_isize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (i32, isize) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(i32, Vec<u8>)> for wire_cst_record_i_32_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (i32, Vec<u8>) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(i32, String)> for wire_cst_record_i_32_string {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (i32, String) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(i32, u16)> for wire_cst_record_i_32_u_16 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (i32, u16) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(i32, u32)> for wire_cst_record_i_32_u_32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (i32, u32) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(i32, u64)> for wire_cst_record_i_32_u_64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (i32, u64) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(i32, u8)> for wire_cst_record_i_32_u_8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (i32, u8) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(i32, usize)> for wire_cst_record_i_32_usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (i32, usize) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(String, crate::api::enumeration::EnumSimpleTwinNormal)>
    for wire_cst_record_string_enum_simple_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (String, crate::api::enumeration::EnumSimpleTwinNormal) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl
    CstDecode<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
    )> for wire_cst_record_string_enum_simple_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> (
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
    ) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl
    CstDecode<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
    )> for wire_cst_record_string_enum_simple_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> (
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
    ) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl
    CstDecode<(
        String,
        crate::api::pseudo_manual::mirror_twin_sync_sse::HashMapValue,
    )> for wire_cst_record_string_hash_map_value
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> (
        String,
        crate::api::pseudo_manual::mirror_twin_sync_sse::HashMapValue,
    ) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(String, i32)> for wire_cst_record_string_i_32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (String, i32) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(String, crate::api::enumeration::KitchenSinkTwinNormal)>
    for wire_cst_record_string_kitchen_sink_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (String, crate::api::enumeration::KitchenSinkTwinNormal) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl
    CstDecode<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
    )> for wire_cst_record_string_kitchen_sink_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> (
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
    ) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl
    CstDecode<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
    )> for wire_cst_record_string_kitchen_sink_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> (
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
    ) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(String, Vec<u8>)> for wire_cst_record_string_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (String, Vec<u8>) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(String, crate::auxiliary::sample_types::MySize)>
    for wire_cst_record_string_my_size
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (String, crate::auxiliary::sample_types::MySize) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(String, String)> for wire_cst_record_string_string {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (String, String) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl
    CstDecode<(
        u8,
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode,
    )> for wire_cst_record_u_8_application_mode
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> (
        u8,
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode,
    ) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences> for wire_cst_sequences {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences {
        crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::method::SimpleStructTwinNormal> for wire_cst_simple_struct_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::method::SimpleStructTwinNormal {
        crate::api::method::SimpleStructTwinNormal {
            one: self.one.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::SimpleStructTwinRustAsync>
    for wire_cst_simple_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async::SimpleStructTwinRustAsync {
        crate::api::pseudo_manual::method_twin_rust_async::SimpleStructTwinRustAsync {
            one: self.one.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync::SimpleStructTwinSync>
    for wire_cst_simple_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::SimpleStructTwinSync {
        crate::api::pseudo_manual::method_twin_sync::SimpleStructTwinSync {
            one: self.one.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::exception::SomeStructTwinNormal> for wire_cst_some_struct_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::exception::SomeStructTwinNormal {
        crate::api::exception::SomeStructTwinNormal {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync>
    for wire_cst_some_struct_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync {
        crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync>
    for wire_cst_some_struct_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync {
        crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::enumeration::SpeedTwinNormal> for wire_cst_speed_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::enumeration::SpeedTwinNormal {
        match self.tag {
            0 => crate::api::enumeration::SpeedTwinNormal::Unknown,
            1 => {
                let ans = unsafe { self.kind.GPS };
                crate::api::enumeration::SpeedTwinNormal::GPS(ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync>
    for wire_cst_speed_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync {
        match self.tag {
            0 => {
                crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::Unknown
            }
            1 => {
                let ans = unsafe { self.kind.GPS };
                crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::GPS(
                    ans.field0.cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync>
    for wire_cst_speed_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync {
        match self.tag {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::Unknown,
            1 => {
                let ans = unsafe { self.kind.GPS };
                crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::GPS(
                    ans.field0.cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::deliberate_name_conflict::StructInLowerLevel>
    for wire_cst_struct_in_lower_level
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::deliberate_name_conflict::StructInLowerLevel {
        crate::api::deliberate_name_conflict::StructInLowerLevel {
            inner: self.inner.cst_decode(),
        }
    }
}
impl CstDecode<crate::deliberate_name_conflict::StructInUpperLevel>
    for wire_cst_struct_in_upper_level
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::deliberate_name_conflict::StructInUpperLevel {
        crate::deliberate_name_conflict::StructInUpperLevel {
            upper: self.upper.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::comment::StructWithCommentsTwinNormal>
    for wire_cst_struct_with_comments_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::comment::StructWithCommentsTwinNormal {
        crate::api::comment::StructWithCommentsTwinNormal {
            field_with_comments: self.field_with_comments.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync>
    for wire_cst_struct_with_comments_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync {
        crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync {
            field_with_comments: self.field_with_comments.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync>
    for wire_cst_struct_with_comments_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync {
        crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync {
            field_with_comments: self.field_with_comments.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_example::StructWithEnumTwinNormal>
    for wire_cst_struct_with_enum_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_example::StructWithEnumTwinNormal {
        crate::api::misc_example::StructWithEnumTwinNormal {
            abc1: self.abc1.cst_decode(),
            abc2: self.abc2.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync>
    for wire_cst_struct_with_enum_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync {
        crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync {
            abc1: self.abc1.cst_decode(),
            abc2: self.abc2.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync>
    for wire_cst_struct_with_enum_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync {
        crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync {
            abc1: self.abc1.cst_decode(),
            abc2: self.abc2.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithExplicitAutoOpaqueFieldTwinMoi> for wire_cst_struct_with_explicit_auto_opaque_field_twin_moi {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithExplicitAutoOpaqueFieldTwinMoi {
                crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithExplicitAutoOpaqueFieldTwinMoi{auto_opaque:  self.auto_opaque.cst_decode(),normal:  self.normal.cst_decode()}
            }
        }
impl CstDecode<crate::api::rust_auto_opaque::StructWithExplicitAutoOpaqueFieldTwinNormal>
    for wire_cst_struct_with_explicit_auto_opaque_field_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::rust_auto_opaque::StructWithExplicitAutoOpaqueFieldTwinNormal {
        crate::api::rust_auto_opaque::StructWithExplicitAutoOpaqueFieldTwinNormal {
            auto_opaque: self.auto_opaque.cst_decode(),
            normal: self.normal.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithExplicitAutoOpaqueFieldTwinRustAsync> for wire_cst_struct_with_explicit_auto_opaque_field_twin_rust_async {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithExplicitAutoOpaqueFieldTwinRustAsync {
                crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithExplicitAutoOpaqueFieldTwinRustAsync{auto_opaque:  self.auto_opaque.cst_decode(),normal:  self.normal.cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncMoi> for wire_cst_struct_with_explicit_auto_opaque_field_twin_rust_async_moi {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncMoi {
                crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncMoi{auto_opaque:  self.auto_opaque.cst_decode(),normal:  self.normal.cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithExplicitAutoOpaqueFieldTwinSync> for wire_cst_struct_with_explicit_auto_opaque_field_twin_sync {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithExplicitAutoOpaqueFieldTwinSync {
                crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithExplicitAutoOpaqueFieldTwinSync{auto_opaque:  self.auto_opaque.cst_decode(),normal:  self.normal.cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithExplicitAutoOpaqueFieldTwinSyncMoi> for wire_cst_struct_with_explicit_auto_opaque_field_twin_sync_moi {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithExplicitAutoOpaqueFieldTwinSyncMoi {
                crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithExplicitAutoOpaqueFieldTwinSyncMoi{auto_opaque:  self.auto_opaque.cst_decode(),normal:  self.normal.cst_decode()}
            }
        }
impl
    CstDecode<
        crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithGoodAndOpaqueFieldTwinMoi,
    > for wire_cst_struct_with_good_and_opaque_field_twin_moi
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithGoodAndOpaqueFieldTwinMoi
    {
        crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithGoodAndOpaqueFieldTwinMoi {
            good: self.good.cst_decode(),
            opaque: self.opaque.cst_decode(),
            option_opaque: self.option_opaque.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::rust_auto_opaque::StructWithGoodAndOpaqueFieldTwinNormal>
    for wire_cst_struct_with_good_and_opaque_field_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::rust_auto_opaque::StructWithGoodAndOpaqueFieldTwinNormal {
        crate::api::rust_auto_opaque::StructWithGoodAndOpaqueFieldTwinNormal {
            good: self.good.cst_decode(),
            opaque: self.opaque.cst_decode(),
            option_opaque: self.option_opaque.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithGoodAndOpaqueFieldTwinRustAsync> for wire_cst_struct_with_good_and_opaque_field_twin_rust_async {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithGoodAndOpaqueFieldTwinRustAsync {
                crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithGoodAndOpaqueFieldTwinRustAsync{good:  self.good.cst_decode(),opaque:  self.opaque.cst_decode(),option_opaque:  self.option_opaque.cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithGoodAndOpaqueFieldTwinRustAsyncMoi> for wire_cst_struct_with_good_and_opaque_field_twin_rust_async_moi {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithGoodAndOpaqueFieldTwinRustAsyncMoi {
                crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithGoodAndOpaqueFieldTwinRustAsyncMoi{good:  self.good.cst_decode(),opaque:  self.opaque.cst_decode(),option_opaque:  self.option_opaque.cst_decode()}
            }
        }
impl
    CstDecode<
        crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithGoodAndOpaqueFieldTwinSync,
    > for wire_cst_struct_with_good_and_opaque_field_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithGoodAndOpaqueFieldTwinSync
    {
        crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithGoodAndOpaqueFieldTwinSync{good:  self.good.cst_decode(),opaque:  self.opaque.cst_decode(),option_opaque:  self.option_opaque.cst_decode()}
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithGoodAndOpaqueFieldTwinSyncMoi> for wire_cst_struct_with_good_and_opaque_field_twin_sync_moi {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithGoodAndOpaqueFieldTwinSyncMoi {
                crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithGoodAndOpaqueFieldTwinSyncMoi{good:  self.good.cst_decode(),opaque:  self.opaque.cst_decode(),option_opaque:  self.option_opaque.cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::StructWithHashMap>
    for wire_cst_struct_with_hash_map
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::StructWithHashMap {
        crate::api::pseudo_manual::mirror_twin_sync_sse::StructWithHashMap {
            map: self.map.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::structure::StructWithOneFieldTwinNormal>
    for wire_cst_struct_with_one_field_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::structure::StructWithOneFieldTwinNormal {
        crate::api::structure::StructWithOneFieldTwinNormal {
            a: self.a.cst_decode(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync>
    for wire_cst_struct_with_one_field_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync {
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync>
    for wire_cst_struct_with_one_field_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
        crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
            a: self.a.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::structure::StructWithTwoFieldTwinNormal>
    for wire_cst_struct_with_two_field_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::structure::StructWithTwoFieldTwinNormal {
        crate::api::structure::StructWithTwoFieldTwinNormal {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync>
    for wire_cst_struct_with_two_field_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync {
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync>
    for wire_cst_struct_with_two_field_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
        crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
            a: self.a.cst_decode(),
            b: self.b.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::structure::StructWithZeroFieldTwinNormal>
    for wire_cst_struct_with_zero_field_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::structure::StructWithZeroFieldTwinNormal {
        crate::api::structure::StructWithZeroFieldTwinNormal {}
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync,
    > for wire_cst_struct_with_zero_field_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
    {
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync {}
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync>
    for wire_cst_struct_with_zero_field_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {
        crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {}
    }
}
impl CstDecode<crate::api::method::SumWithTwinNormal> for wire_cst_sum_with_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::method::SumWithTwinNormal {
        crate::api::method::SumWithTwinNormal {
            x: self.x.cst_decode(),
        }
    }
}
impl CstDecode<[crate::api::method::SumWithTwinNormal; 3]>
    for *mut wire_cst_list_sum_with_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [crate::api::method::SumWithTwinNormal; 3] {
        let vec: Vec<crate::api::method::SumWithTwinNormal> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>
    for wire_cst_sum_with_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync {
        crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync {
            x: self.x.cst_decode(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync; 3]>
    for *mut wire_cst_list_sum_with_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync; 3] {
        let vec: Vec<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>
    for wire_cst_sum_with_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync {
        crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync {
            x: self.x.cst_decode(),
        }
    }
}
impl CstDecode<[crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync; 3]>
    for *mut wire_cst_list_sum_with_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync; 3] {
        let vec: Vec<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::chrono_type::TestChronoTwinNormal> for wire_cst_test_chrono_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::chrono_type::TestChronoTwinNormal {
        crate::api::chrono_type::TestChronoTwinNormal {
            dt: self.dt.cst_decode(),
            dt2: self.dt2.cst_decode(),
            du: self.du.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync>
    for wire_cst_test_chrono_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync {
        crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync {
            dt: self.dt.cst_decode(),
            dt2: self.dt2.cst_decode(),
            du: self.du.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync>
    for wire_cst_test_chrono_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync {
        crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync {
            dt: self.dt.cst_decode(),
            dt2: self.dt2.cst_decode(),
            du: self.du.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::array::TestIdTwinNormal> for wire_cst_test_id_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::array::TestIdTwinNormal {
        crate::api::array::TestIdTwinNormal(self.field0.cst_decode())
    }
}
impl CstDecode<[crate::api::array::TestIdTwinNormal; 2]>
    for *mut wire_cst_list_test_id_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [crate::api::array::TestIdTwinNormal; 2] {
        let vec: Vec<crate::api::array::TestIdTwinNormal> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::array::TestIdTwinNormal; 4]>
    for *mut wire_cst_list_test_id_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [crate::api::array::TestIdTwinNormal; 4] {
        let vec: Vec<crate::api::array::TestIdTwinNormal> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>
    for wire_cst_test_id_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync {
        crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 2]>
    for *mut wire_cst_list_test_id_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 4]>
    for *mut wire_cst_list_test_id_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 4] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>
    for wire_cst_test_id_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync {
        crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync(self.field0.cst_decode())
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 2]>
    for *mut wire_cst_list_test_id_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 4]>
    for *mut wire_cst_list_test_id_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 4] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::type_alias::TestModelTwinNormal> for wire_cst_test_model_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::type_alias::TestModelTwinNormal {
        crate::api::type_alias::TestModelTwinNormal {
            id: self.id.cst_decode(),
            name: self.name.cst_decode(),
            alias_enum: self.alias_enum.cst_decode(),
            alias_struct: self.alias_struct.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync>
    for wire_cst_test_model_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync {
        crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync {
            id: self.id.cst_decode(),
            name: self.name.cst_decode(),
            alias_enum: self.alias_enum.cst_decode(),
            alias_struct: self.alias_struct.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync>
    for wire_cst_test_model_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync {
        crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync {
            id: self.id.cst_decode(),
            name: self.name.cst_decode(),
            alias_enum: self.alias_enum.cst_decode(),
            alias_struct: self.alias_struct.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::structure::TupleStructWithOneFieldTwinNormal>
    for wire_cst_tuple_struct_with_one_field_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::structure::TupleStructWithOneFieldTwinNormal {
        crate::api::structure::TupleStructWithOneFieldTwinNormal(self.field0.cst_decode())
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync,
    > for wire_cst_tuple_struct_with_one_field_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
    {
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync>
    for wire_cst_tuple_struct_with_one_field_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync {
        crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync(
            self.field0.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::structure::TupleStructWithTwoFieldTwinNormal>
    for wire_cst_tuple_struct_with_two_field_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::structure::TupleStructWithTwoFieldTwinNormal {
        crate::api::structure::TupleStructWithTwoFieldTwinNormal(
            self.field0.cst_decode(),
            self.field1.cst_decode(),
        )
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync,
    > for wire_cst_tuple_struct_with_two_field_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
    {
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync(
            self.field0.cst_decode(),
            self.field1.cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync>
    for wire_cst_tuple_struct_with_two_field_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync {
        crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync(
            self.field0.cst_decode(),
            self.field1.cst_decode(),
        )
    }
}
impl CstDecode<[u8; 1600]> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [u8; 1600] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[u8; 2]> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [u8; 2] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[u8; 32]> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [u8; 32] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[u8; 5]> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [u8; 5] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[u8; 8]> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [u8; 8] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::attribute::UserIdTwinNormal> for wire_cst_user_id_twin_normal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::attribute::UserIdTwinNormal {
        crate::api::attribute::UserIdTwinNormal {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync>
    for wire_cst_user_id_twin_rust_async
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync {
        crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync>
    for wire_cst_user_id_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync {
        crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync {
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal>
    for wire_cst_vec_of_primitive_pack_twin_normal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal {
        crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal {
            int8list: self.int8list.cst_decode(),
            uint8list: self.uint8list.cst_decode(),
            int16list: self.int16list.cst_decode(),
            uint16list: self.uint16list.cst_decode(),
            uint32list: self.uint32list.cst_decode(),
            int32list: self.int32list.cst_decode(),
            uint64list: self.uint64list.cst_decode(),
            int64list: self.int64list.cst_decode(),
            float32list: self.float32list.cst_decode(),
            float64list: self.float64list.cst_decode(),
            bool_list: self.bool_list.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync> for wire_cst_vec_of_primitive_pack_twin_rust_async {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync {
                crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync{int8list:  self.int8list.cst_decode(),uint8list:  self.uint8list.cst_decode(),int16list:  self.int16list.cst_decode(),uint16list:  self.uint16list.cst_decode(),uint32list:  self.uint32list.cst_decode(),int32list:  self.int32list.cst_decode(),uint64list:  self.uint64list.cst_decode(),int64list:  self.int64list.cst_decode(),float32list:  self.float32list.cst_decode(),float64list:  self.float64list.cst_decode(),bool_list:  self.bool_list.cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync>
    for wire_cst_vec_of_primitive_pack_twin_sync
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync {
        crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync {
            int8list: self.int8list.cst_decode(),
            uint8list: self.uint8list.cst_decode(),
            int16list: self.int16list.cst_decode(),
            uint16list: self.uint16list.cst_decode(),
            uint32list: self.uint32list.cst_decode(),
            int32list: self.int32list.cst_decode(),
            uint64list: self.uint64list.cst_decode(),
            int64list: self.int64list.cst_decode(),
            float32list: self.float32list.cst_decode(),
            float64list: self.float64list.cst_decode(),
            bool_list: self.bool_list.cst_decode(),
        }
    }
}
impl NewWithNullPtr for wire_cst_a_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_a_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_a_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_a_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_a_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_a_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_abc_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: AbcTwinNormalKind { nil__: () },
        }
    }
}
impl Default for wire_cst_abc_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_abc_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: AbcTwinRustAsyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_abc_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_abc_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: AbcTwinSyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_abc_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_another_macro_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            data: Default::default(),
            non_final_data: Default::default(),
        }
    }
}
impl Default for wire_cst_another_macro_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_another_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_another_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_another_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_another_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_another_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_another_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_application_env {
    fn new_with_null_ptr() -> Self {
        Self {
            vars: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_application_env {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_application_env_var {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_application_env_var {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_application_message {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: ApplicationMessageKind { nil__: () },
        }
    }
}
impl Default for wire_cst_application_message {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_application_settings {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
            version: core::ptr::null_mut(),
            mode: Default::default(),
            env: core::ptr::null_mut(),
            env_optional: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_application_settings {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_attribute_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            key: core::ptr::null_mut(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_attribute_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_attribute_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            key: core::ptr::null_mut(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_attribute_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_attribute_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            key: core::ptr::null_mut(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_attribute_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_b_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_b_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_b_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_b_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_b_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_b_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_basic_general_enum_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: BasicGeneralEnumTwinNormalKind { nil__: () },
        }
    }
}
impl Default for wire_cst_basic_general_enum_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_basic_general_enum_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: BasicGeneralEnumTwinRustAsyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_basic_general_enum_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_basic_general_enum_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: BasicGeneralEnumTwinSyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_basic_general_enum_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_basic_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            apple: core::ptr::null_mut(),
            orange: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_basic_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_basic_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            apple: core::ptr::null_mut(),
            orange: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_basic_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_basic_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            apple: core::ptr::null_mut(),
            orange: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_basic_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_benchmark_binary_tree_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
            left: core::ptr::null_mut(),
            right: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_benchmark_binary_tree_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_benchmark_binary_tree_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
            left: core::ptr::null_mut(),
            right: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_benchmark_binary_tree_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_benchmark_binary_tree_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
            left: core::ptr::null_mut(),
            right: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_benchmark_binary_tree_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_benchmark_blob_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
            third: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_benchmark_blob_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_benchmark_blob_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
            third: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_benchmark_blob_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_benchmark_blob_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
            third: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_benchmark_blob_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_big_buffers_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            int64: core::ptr::null_mut(),
            uint64: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_big_buffers_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_big_buffers_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            int64: core::ptr::null_mut(),
            uint64: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_big_buffers_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_big_buffers_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            int64: core::ptr::null_mut(),
            uint64: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_big_buffers_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_blob_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_blob_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_blob_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_blob_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_blob_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_blob_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_c_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            c: Default::default(),
        }
    }
}
impl Default for wire_cst_c_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_c_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            c: Default::default(),
        }
    }
}
impl Default for wire_cst_c_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_c_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            c: Default::default(),
        }
    }
}
impl Default for wire_cst_c_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_concatenate_with_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_concatenate_with_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_concatenate_with_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_concatenate_with_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_concatenate_with_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_concatenate_with_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_constructor_translatable_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            one: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_constructor_translatable_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_constructor_translatable_sync_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            one: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_constructor_translatable_sync_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_contains_mirrored_sub_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            test: Default::default(),
            test2: Default::default(),
        }
    }
}
impl Default for wire_cst_contains_mirrored_sub_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_contains_mirrored_sub_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            test: Default::default(),
            test2: Default::default(),
        }
    }
}
impl Default for wire_cst_contains_mirrored_sub_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_contains_mirrored_sub_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            test: Default::default(),
            test2: Default::default(),
        }
    }
}
impl Default for wire_cst_contains_mirrored_sub_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_enum_error_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: CustomEnumErrorTwinNormalKind { nil__: () },
        }
    }
}
impl Default for wire_cst_custom_enum_error_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_enum_error_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: CustomEnumErrorTwinRustAsyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_custom_enum_error_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_enum_error_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: CustomEnumErrorTwinSyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_custom_enum_error_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_error_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: CustomErrorTwinNormalKind { nil__: () },
        }
    }
}
impl Default for wire_cst_custom_error_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_error_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: CustomErrorTwinRustAsyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_custom_error_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_error_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: CustomErrorTwinSyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_custom_error_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_1_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: CustomNestedError1TwinNormalKind { nil__: () },
        }
    }
}
impl Default for wire_cst_custom_nested_error_1_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_1_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: CustomNestedError1TwinRustAsyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_custom_nested_error_1_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_1_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: CustomNestedError1TwinSyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_custom_nested_error_1_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_2_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: CustomNestedError2TwinNormalKind { nil__: () },
        }
    }
}
impl Default for wire_cst_custom_nested_error_2_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_2_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: CustomNestedError2TwinRustAsyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_custom_nested_error_2_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_2_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: CustomNestedError2TwinSyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_custom_nested_error_2_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_inner_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: CustomNestedErrorInnerTwinNormalKind { nil__: () },
        }
    }
}
impl Default for wire_cst_custom_nested_error_inner_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_inner_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: CustomNestedErrorInnerTwinRustAsyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_custom_nested_error_inner_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_inner_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: CustomNestedErrorInnerTwinSyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_custom_nested_error_inner_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_outer_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: CustomNestedErrorOuterTwinNormalKind { nil__: () },
        }
    }
}
impl Default for wire_cst_custom_nested_error_outer_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_outer_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: CustomNestedErrorOuterTwinRustAsyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_custom_nested_error_outer_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_nested_error_outer_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: CustomNestedErrorOuterTwinSyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_custom_nested_error_outer_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_another_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_another_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_another_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_another_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_another_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_another_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_error_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_error_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_custom_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_custom_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_customized_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            final_field: core::ptr::null_mut(),
            non_final_field: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_customized_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_customized_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            final_field: core::ptr::null_mut(),
            non_final_field: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_customized_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_customized_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            final_field: core::ptr::null_mut(),
            non_final_field: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_customized_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_dart_opaque_nested_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_dart_opaque_nested_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_dart_opaque_nested_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_dart_opaque_nested_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_dart_opaque_nested_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            first: core::ptr::null_mut(),
            second: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_dart_opaque_nested_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_demo_struct_for_rust_call_dart_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_demo_struct_for_rust_call_dart_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_demo_struct_for_rust_call_dart_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_demo_struct_for_rust_call_dart_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_distance_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: DistanceTwinNormalKind { nil__: () },
        }
    }
}
impl Default for wire_cst_distance_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_distance_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: DistanceTwinRustAsyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_distance_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_distance_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: DistanceTwinSyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_distance_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_element_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: core::ptr::null_mut(),
            text: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_element_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_element_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: core::ptr::null_mut(),
            text: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_element_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_element_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: core::ptr::null_mut(),
            text: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_element_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_empty_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_empty_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_empty_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_empty_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_empty_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_empty_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_dart_opaque_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumDartOpaqueTwinNormalKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_dart_opaque_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_dart_opaque_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumDartOpaqueTwinRustAsyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_dart_opaque_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_dart_opaque_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumDartOpaqueTwinSyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_dart_opaque_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_opaque_twin_moi {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumOpaqueTwinMoiKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_opaque_twin_moi {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_opaque_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumOpaqueTwinNormalKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_opaque_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_opaque_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumOpaqueTwinRustAsyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_opaque_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_opaque_twin_rust_async_moi {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumOpaqueTwinRustAsyncMoiKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_opaque_twin_rust_async_moi {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_opaque_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumOpaqueTwinSyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_opaque_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_opaque_twin_sync_moi {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumOpaqueTwinSyncMoiKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_opaque_twin_sync_moi {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_good_and_opaque_twin_moi {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumWithGoodAndOpaqueTwinMoiKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_with_good_and_opaque_twin_moi {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_good_and_opaque_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumWithGoodAndOpaqueTwinNormalKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_with_good_and_opaque_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_good_and_opaque_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumWithGoodAndOpaqueTwinRustAsyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_with_good_and_opaque_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_good_and_opaque_twin_rust_async_moi {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumWithGoodAndOpaqueTwinRustAsyncMoiKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_with_good_and_opaque_twin_rust_async_moi {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_good_and_opaque_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumWithGoodAndOpaqueTwinSyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_with_good_and_opaque_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_good_and_opaque_twin_sync_moi {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumWithGoodAndOpaqueTwinSyncMoiKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_with_good_and_opaque_twin_sync_moi {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_mixed_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumWithItemMixedTwinNormalKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_with_item_mixed_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_mixed_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumWithItemMixedTwinRustAsyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_with_item_mixed_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_mixed_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumWithItemMixedTwinSyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_with_item_mixed_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumWithItemStructTwinNormalKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_with_item_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumWithItemStructTwinRustAsyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_with_item_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumWithItemStructTwinSyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_with_item_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_tuple_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumWithItemTupleTwinNormalKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_with_item_tuple_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_tuple_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumWithItemTupleTwinRustAsyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_with_item_tuple_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_enum_with_item_tuple_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EnumWithItemTupleTwinSyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_enum_with_item_tuple_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_event_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            address: core::ptr::null_mut(),
            payload: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_event_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_event_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            address: core::ptr::null_mut(),
            payload: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_event_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_exotic_optionals_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            int32: core::ptr::null_mut(),
            int64: core::ptr::null_mut(),
            float64: core::ptr::null_mut(),
            boolean: core::ptr::null_mut(),
            zerocopy: core::ptr::null_mut(),
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            attributes_nullable: core::ptr::null_mut(),
            nullable_attributes: core::ptr::null_mut(),
            newtypeint: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_exotic_optionals_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_exotic_optionals_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            int32: core::ptr::null_mut(),
            int64: core::ptr::null_mut(),
            float64: core::ptr::null_mut(),
            boolean: core::ptr::null_mut(),
            zerocopy: core::ptr::null_mut(),
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            attributes_nullable: core::ptr::null_mut(),
            nullable_attributes: core::ptr::null_mut(),
            newtypeint: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_exotic_optionals_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_exotic_optionals_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            int32: core::ptr::null_mut(),
            int64: core::ptr::null_mut(),
            float64: core::ptr::null_mut(),
            boolean: core::ptr::null_mut(),
            zerocopy: core::ptr::null_mut(),
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            attributes: core::ptr::null_mut(),
            attributes_nullable: core::ptr::null_mut(),
            nullable_attributes: core::ptr::null_mut(),
            newtypeint: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_exotic_optionals_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feature_chrono_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            utc: Default::default(),
            local: Default::default(),
            duration: Default::default(),
            naive: Default::default(),
        }
    }
}
impl Default for wire_cst_feature_chrono_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feature_chrono_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            utc: Default::default(),
            local: Default::default(),
            duration: Default::default(),
            naive: Default::default(),
        }
    }
}
impl Default for wire_cst_feature_chrono_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feature_chrono_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            utc: Default::default(),
            local: Default::default(),
            duration: Default::default(),
            naive: Default::default(),
        }
    }
}
impl Default for wire_cst_feature_chrono_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feature_uuid_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            one: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feature_uuid_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feature_uuid_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            one: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feature_uuid_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feature_uuid_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            one: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feature_uuid_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feed_id_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feed_id_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feed_id_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feed_id_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_feed_id_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_feed_id_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_hash_map_value {
    fn new_with_null_ptr() -> Self {
        Self {
            inner: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_hash_map_value {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_kitchen_sink_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: KitchenSinkTwinNormalKind { nil__: () },
        }
    }
}
impl Default for wire_cst_kitchen_sink_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_kitchen_sink_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: KitchenSinkTwinRustAsyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_kitchen_sink_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_kitchen_sink_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: KitchenSinkTwinSyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_kitchen_sink_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_list_of_nested_raw_string_mirrored {
    fn new_with_null_ptr() -> Self {
        Self {
            raw: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_list_of_nested_raw_string_mirrored {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_log_2_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            key: Default::default(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_log_2_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_log_2_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            key: Default::default(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_log_2_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_log_2_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            key: Default::default(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_log_2_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_log_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            key: Default::default(),
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_log_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_log_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            key: Default::default(),
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_log_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_macro_struct {
    fn new_with_null_ptr() -> Self {
        Self {
            data: Default::default(),
        }
    }
}
impl Default for wire_cst_macro_struct {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_measure_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: MeasureTwinNormalKind { nil__: () },
        }
    }
}
impl Default for wire_cst_measure_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_measure_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: MeasureTwinRustAsyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_measure_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_measure_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: MeasureTwinSyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_measure_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_message_id_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_message_id_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_message_id_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_message_id_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_message_id_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_message_id_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_mirror_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
            c: core::ptr::null_mut(),
            d: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_mirror_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_mirror_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
            c: core::ptr::null_mut(),
            d: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_mirror_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_mirror_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
            c: core::ptr::null_mut(),
            d: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_mirror_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_more_than_just_one_raw_string_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            regular: core::ptr::null_mut(),
            r#type: core::ptr::null_mut(),
            r#async: Default::default(),
            another: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_more_than_just_one_raw_string_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_more_than_just_one_raw_string_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            regular: core::ptr::null_mut(),
            r#type: core::ptr::null_mut(),
            r#async: Default::default(),
            another: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_more_than_just_one_raw_string_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_more_than_just_one_raw_string_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            regular: core::ptr::null_mut(),
            r#type: core::ptr::null_mut(),
            r#async: Default::default(),
            another: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_more_than_just_one_raw_string_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_callable_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            one: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_callable_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_callable_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            one: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_callable_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_callable_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            one: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_callable_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_nested_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tree_node: Default::default(),
            weekday: Default::default(),
        }
    }
}
impl Default for wire_cst_my_nested_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_nested_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tree_node: Default::default(),
            weekday: Default::default(),
        }
    }
}
impl Default for wire_cst_my_nested_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_nested_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tree_node: Default::default(),
            weekday: Default::default(),
        }
    }
}
impl Default for wire_cst_my_nested_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_size {
    fn new_with_null_ptr() -> Self {
        Self {
            width: Default::default(),
            height: Default::default(),
        }
    }
}
impl Default for wire_cst_my_size {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_stream_entry_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            hello: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_stream_entry_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_stream_entry_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            hello: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_stream_entry_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_struct {
    fn new_with_null_ptr() -> Self {
        Self {
            content: Default::default(),
        }
    }
}
impl Default for wire_cst_my_struct {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_tree_node_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            value_i32: Default::default(),
            value_vec_u8: core::ptr::null_mut(),
            value_boolean: Default::default(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_tree_node_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_tree_node_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            value_i32: Default::default(),
            value_vec_u8: core::ptr::null_mut(),
            value_boolean: Default::default(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_tree_node_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_my_tree_node_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            value_i32: Default::default(),
            value_vec_u8: core::ptr::null_mut(),
            value_boolean: Default::default(),
            children: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_my_tree_node_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_nested_raw_string_mirrored {
    fn new_with_null_ptr() -> Self {
        Self {
            raw: Default::default(),
        }
    }
}
impl Default for wire_cst_nested_raw_string_mirrored {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_new_simple_struct {
    fn new_with_null_ptr() -> Self {
        Self {
            field: Default::default(),
        }
    }
}
impl Default for wire_cst_new_simple_struct {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_new_type_int_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_new_type_int_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_new_type_int_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_new_type_int_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_new_type_int_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_new_type_int_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_note_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            day: core::ptr::null_mut(),
            body: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_note_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_note_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            day: core::ptr::null_mut(),
            body: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_note_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_note_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            day: core::ptr::null_mut(),
            body: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_note_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_numbers {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_numbers {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_old_simple_struct {
    fn new_with_null_ptr() -> Self {
        Self {
            field: Default::default(),
        }
    }
}
impl Default for wire_cst_old_simple_struct {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opaque_nested_twin_moi {
    fn new_with_null_ptr() -> Self {
        Self {
            first: Default::default(),
            second: Default::default(),
        }
    }
}
impl Default for wire_cst_opaque_nested_twin_moi {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opaque_nested_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            first: Default::default(),
            second: Default::default(),
        }
    }
}
impl Default for wire_cst_opaque_nested_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opaque_nested_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            first: Default::default(),
            second: Default::default(),
        }
    }
}
impl Default for wire_cst_opaque_nested_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opaque_nested_twin_rust_async_moi {
    fn new_with_null_ptr() -> Self {
        Self {
            first: Default::default(),
            second: Default::default(),
        }
    }
}
impl Default for wire_cst_opaque_nested_twin_rust_async_moi {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opaque_nested_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            first: Default::default(),
            second: Default::default(),
        }
    }
}
impl Default for wire_cst_opaque_nested_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opaque_nested_twin_sync_moi {
    fn new_with_null_ptr() -> Self {
        Self {
            first: Default::default(),
            second: Default::default(),
        }
    }
}
impl Default for wire_cst_opaque_nested_twin_sync_moi {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opt_vecs_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            i32: core::ptr::null_mut(),
            enums: core::ptr::null_mut(),
            strings: core::ptr::null_mut(),
            buffers: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opt_vecs_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opt_vecs_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            i32: core::ptr::null_mut(),
            enums: core::ptr::null_mut(),
            strings: core::ptr::null_mut(),
            buffers: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opt_vecs_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opt_vecs_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            i32: core::ptr::null_mut(),
            enums: core::ptr::null_mut(),
            strings: core::ptr::null_mut(),
            buffers: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opt_vecs_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_point_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
            y: Default::default(),
        }
    }
}
impl Default for wire_cst_point_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_point_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
            y: Default::default(),
        }
    }
}
impl Default for wire_cst_point_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_point_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
            y: Default::default(),
        }
    }
}
impl Default for wire_cst_point_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_raw_string_enum_mirrored {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: RawStringEnumMirroredKind { nil__: () },
        }
    }
}
impl Default for wire_cst_raw_string_enum_mirrored {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_raw_string_item_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            r#type: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_raw_string_item_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_raw_string_item_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            r#type: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_raw_string_item_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_raw_string_item_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            r#type: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_raw_string_item_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_raw_string_mirrored {
    fn new_with_null_ptr() -> Self {
        Self {
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_raw_string_mirrored {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_application_settings_raw_string_enum_mirrored {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_application_settings_raw_string_enum_mirrored {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_moi_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_moi {
            fn new_with_null_ptr() -> Self {
                Self { field0: Default::default(),
field1: Default::default(), }
            }
        }
impl Default for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_moi_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_moi {
            fn default() -> Self {
                Self::new_with_null_ptr()
            }
        }
impl NewWithNullPtr for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_normal_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_normal {
            fn new_with_null_ptr() -> Self {
                Self { field0: Default::default(),
field1: Default::default(), }
            }
        }
impl Default for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_normal_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_normal {
            fn default() -> Self {
                Self::new_with_null_ptr()
            }
        }
impl NewWithNullPtr for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_rust_async_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_rust_async {
            fn new_with_null_ptr() -> Self {
                Self { field0: Default::default(),
field1: Default::default(), }
            }
        }
impl Default for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_rust_async_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_rust_async {
            fn default() -> Self {
                Self::new_with_null_ptr()
            }
        }
impl NewWithNullPtr for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_rust_async_moi_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_rust_async_moi {
            fn new_with_null_ptr() -> Self {
                Self { field0: Default::default(),
field1: Default::default(), }
            }
        }
impl Default for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_rust_async_moi_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_rust_async_moi {
            fn default() -> Self {
                Self::new_with_null_ptr()
            }
        }
impl NewWithNullPtr for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_sync_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_sync {
            fn new_with_null_ptr() -> Self {
                Self { field0: Default::default(),
field1: Default::default(), }
            }
        }
impl Default for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_sync_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_sync {
            fn default() -> Self {
                Self::new_with_null_ptr()
            }
        }
impl NewWithNullPtr for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_sync_moi_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_sync_moi {
            fn new_with_null_ptr() -> Self {
                Self { field0: Default::default(),
field1: Default::default(), }
            }
        }
impl Default for wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_sync_moi_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_sync_moi {
            fn default() -> Self {
                Self::new_with_null_ptr()
            }
        }
impl NewWithNullPtr for wire_cst_record_i_32_basic_general_enum_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_basic_general_enum_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_basic_general_enum_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_basic_general_enum_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_basic_general_enum_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_basic_general_enum_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_basic_primitive_enum_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_basic_primitive_enum_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_basic_primitive_enum_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_basic_primitive_enum_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_basic_primitive_enum_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_basic_primitive_enum_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_basic_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_basic_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_basic_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_basic_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_basic_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_basic_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_bool {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_bool {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_f_32 {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_f_32 {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_f_64 {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_f_64 {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_i_16 {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_i_16 {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_i_32 {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_i_32 {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_i_64 {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_i_64 {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_i_8 {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_i_8 {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_isize {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_isize {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_list_prim_u_8_strict {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_record_i_32_list_prim_u_8_strict {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_string {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_record_i_32_string {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_u_16 {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_u_16 {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_u_32 {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_u_32 {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_u_64 {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_u_64 {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_u_8 {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_u_8 {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_i_32_usize {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_i_32_usize {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_string_enum_simple_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_string_enum_simple_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_string_enum_simple_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_string_enum_simple_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_string_enum_simple_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_string_enum_simple_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_string_hash_map_value {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_string_hash_map_value {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_string_i_32 {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_string_i_32 {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_string_kitchen_sink_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_string_kitchen_sink_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_string_kitchen_sink_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_string_kitchen_sink_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_string_kitchen_sink_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_string_kitchen_sink_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_string_list_prim_u_8_strict {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_record_string_list_prim_u_8_strict {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_string_my_size {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_string_my_size {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_string_string {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_record_string_string {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_u_8_application_mode {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_record_u_8_application_mode {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sequences {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_sequences {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_simple_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            one: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_simple_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_simple_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            one: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_simple_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_simple_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            one: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_simple_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_some_struct_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_some_struct_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_some_struct_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_some_struct_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_some_struct_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_some_struct_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_speed_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: SpeedTwinNormalKind { nil__: () },
        }
    }
}
impl Default for wire_cst_speed_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_speed_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: SpeedTwinRustAsyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_speed_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_speed_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: SpeedTwinSyncKind { nil__: () },
        }
    }
}
impl Default for wire_cst_speed_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_in_lower_level {
    fn new_with_null_ptr() -> Self {
        Self {
            inner: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_in_lower_level {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_in_upper_level {
    fn new_with_null_ptr() -> Self {
        Self {
            upper: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_in_upper_level {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_comments_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field_with_comments: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_comments_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_comments_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field_with_comments: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_comments_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_comments_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field_with_comments: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_comments_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_enum_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            abc1: Default::default(),
            abc2: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_enum_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_enum_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            abc1: Default::default(),
            abc2: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_enum_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_enum_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            abc1: Default::default(),
            abc2: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_enum_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_explicit_auto_opaque_field_twin_moi {
    fn new_with_null_ptr() -> Self {
        Self {
            auto_opaque: Default::default(),
            normal: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_explicit_auto_opaque_field_twin_moi {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_explicit_auto_opaque_field_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            auto_opaque: Default::default(),
            normal: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_explicit_auto_opaque_field_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_explicit_auto_opaque_field_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            auto_opaque: Default::default(),
            normal: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_explicit_auto_opaque_field_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_explicit_auto_opaque_field_twin_rust_async_moi {
    fn new_with_null_ptr() -> Self {
        Self {
            auto_opaque: Default::default(),
            normal: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_explicit_auto_opaque_field_twin_rust_async_moi {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_explicit_auto_opaque_field_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            auto_opaque: Default::default(),
            normal: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_explicit_auto_opaque_field_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_explicit_auto_opaque_field_twin_sync_moi {
    fn new_with_null_ptr() -> Self {
        Self {
            auto_opaque: Default::default(),
            normal: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_explicit_auto_opaque_field_twin_sync_moi {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_good_and_opaque_field_twin_moi {
    fn new_with_null_ptr() -> Self {
        Self {
            good: core::ptr::null_mut(),
            opaque: Default::default(),
            option_opaque: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_struct_with_good_and_opaque_field_twin_moi {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_good_and_opaque_field_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            good: core::ptr::null_mut(),
            opaque: Default::default(),
            option_opaque: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_struct_with_good_and_opaque_field_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_good_and_opaque_field_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            good: core::ptr::null_mut(),
            opaque: Default::default(),
            option_opaque: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_struct_with_good_and_opaque_field_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_good_and_opaque_field_twin_rust_async_moi {
    fn new_with_null_ptr() -> Self {
        Self {
            good: core::ptr::null_mut(),
            opaque: Default::default(),
            option_opaque: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_struct_with_good_and_opaque_field_twin_rust_async_moi {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_good_and_opaque_field_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            good: core::ptr::null_mut(),
            opaque: Default::default(),
            option_opaque: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_struct_with_good_and_opaque_field_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_good_and_opaque_field_twin_sync_moi {
    fn new_with_null_ptr() -> Self {
        Self {
            good: core::ptr::null_mut(),
            opaque: Default::default(),
            option_opaque: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_struct_with_good_and_opaque_field_twin_sync_moi {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_hash_map {
    fn new_with_null_ptr() -> Self {
        Self {
            map: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_struct_with_hash_map {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_one_field_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_one_field_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_one_field_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_one_field_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_one_field_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_one_field_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_two_field_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_two_field_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_two_field_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_two_field_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_two_field_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            a: Default::default(),
            b: Default::default(),
        }
    }
}
impl Default for wire_cst_struct_with_two_field_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_zero_field_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_struct_with_zero_field_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_zero_field_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_struct_with_zero_field_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_struct_with_zero_field_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {}
    }
}
impl Default for wire_cst_struct_with_zero_field_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sum_with_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
        }
    }
}
impl Default for wire_cst_sum_with_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sum_with_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
        }
    }
}
impl Default for wire_cst_sum_with_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sum_with_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
        }
    }
}
impl Default for wire_cst_sum_with_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_chrono_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            dt: core::ptr::null_mut(),
            dt2: core::ptr::null_mut(),
            du: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_test_chrono_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_chrono_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            dt: core::ptr::null_mut(),
            dt2: core::ptr::null_mut(),
            du: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_test_chrono_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_chrono_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            dt: core::ptr::null_mut(),
            dt2: core::ptr::null_mut(),
            du: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_test_chrono_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_id_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_test_id_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_id_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_test_id_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_id_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_test_id_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_model_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            id: Default::default(),
            name: core::ptr::null_mut(),
            alias_enum: Default::default(),
            alias_struct: Default::default(),
        }
    }
}
impl Default for wire_cst_test_model_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_model_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            id: Default::default(),
            name: core::ptr::null_mut(),
            alias_enum: Default::default(),
            alias_struct: Default::default(),
        }
    }
}
impl Default for wire_cst_test_model_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_test_model_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            id: Default::default(),
            name: core::ptr::null_mut(),
            alias_enum: Default::default(),
            alias_struct: Default::default(),
        }
    }
}
impl Default for wire_cst_test_model_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_one_field_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_one_field_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_one_field_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_one_field_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_one_field_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_one_field_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_two_field_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_two_field_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_two_field_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_two_field_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tuple_struct_with_two_field_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
            field1: Default::default(),
        }
    }
}
impl Default for wire_cst_tuple_struct_with_two_field_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_user_id_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_user_id_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_user_id_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_user_id_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_user_id_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_user_id_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_vec_of_primitive_pack_twin_normal {
    fn new_with_null_ptr() -> Self {
        Self {
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int16list: core::ptr::null_mut(),
            uint16list: core::ptr::null_mut(),
            uint32list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            uint64list: core::ptr::null_mut(),
            int64list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            bool_list: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_vec_of_primitive_pack_twin_normal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_vec_of_primitive_pack_twin_rust_async {
    fn new_with_null_ptr() -> Self {
        Self {
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int16list: core::ptr::null_mut(),
            uint16list: core::ptr::null_mut(),
            uint32list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            uint64list: core::ptr::null_mut(),
            int64list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            bool_list: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_vec_of_primitive_pack_twin_rust_async {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_vec_of_primitive_pack_twin_sync {
    fn new_with_null_ptr() -> Self {
        Self {
            int8list: core::ptr::null_mut(),
            uint8list: core::ptr::null_mut(),
            int16list: core::ptr::null_mut(),
            uint16list: core::ptr::null_mut(),
            uint32list: core::ptr::null_mut(),
            int32list: core::ptr::null_mut(),
            uint64list: core::ptr::null_mut(),
            int64list: core::ptr::null_mut(),
            float32list: core::ptr::null_mut(),
            float64list: core::ptr::null_mut(),
            bool_list: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_vec_of_primitive_pack_twin_sync {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_boxed_blob_twin_normal(
    port_: i64,
    blob: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_boxed_blob_twin_normal_impl(port_, blob)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_test_id_twin_normal(
    port_: i64,
    id: *mut wire_cst_test_id_twin_normal,
) {
    wire_func_test_id_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_array_twin_normal(port_: i64) {
    wire_get_array_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_complex_array_twin_normal(port_: i64) {
    wire_get_complex_array_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_last_number_twin_normal(
    port_: i64,
    array: *mut wire_cst_list_prim_f_64_strict,
) {
    wire_last_number_twin_normal_impl(port_, array)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_nested_id_twin_normal(
    port_: i64,
    id: *mut wire_cst_list_test_id_twin_normal,
) {
    wire_nested_id_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_new_msgid_twin_normal(
    port_: i64,
    id: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_new_msgid_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_boxed_feed_id_twin_normal(
    port_: i64,
    id: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_return_boxed_feed_id_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_boxed_raw_feed_id_twin_normal(
    port_: i64,
    id: *mut wire_cst_feed_id_twin_normal,
) {
    wire_return_boxed_raw_feed_id_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_boxed_blob_twin_normal(
    port_: i64,
    blob: *mut wire_cst_blob_twin_normal,
) {
    wire_use_boxed_blob_twin_normal_impl(port_, blob)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_msgid_twin_normal(
    port_: i64,
    id: *mut wire_cst_message_id_twin_normal,
) {
    wire_use_msgid_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_async_simple_add_twin_normal(
    port_: i64,
    a: i32,
    b: i32,
) {
    wire_func_async_simple_add_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_async_void_twin_normal(port_: i64) {
    wire_func_async_void_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_simple_use_async_spawn(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_simple_use_async_spawn_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_simple_use_async_spawn_blocking(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_simple_use_async_spawn_blocking_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_simple_use_async_spawn_local(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_simple_use_async_spawn_local_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_customized_struct_twin_normal(
    port_: i64,
    val: *mut wire_cst_customized_twin_normal,
) {
    wire_handle_customized_struct_twin_normal_impl(port_, val)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_next_user_id_twin_normal(
    port_: i64,
    user_id: *mut wire_cst_user_id_twin_normal,
) {
    wire_next_user_id_twin_normal_impl(port_, user_id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_void_semi_serialize(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_void_semi_serialize_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_datetime_local_twin_normal(port_: i64, d: i64) {
    wire_datetime_local_twin_normal_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_datetime_utc_twin_normal(port_: i64, d: i64) {
    wire_datetime_utc_twin_normal_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_duration_twin_normal(port_: i64, d: i64) {
    wire_duration_twin_normal_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_durations_twin_normal(
    port_: i64,
    durations: *mut wire_cst_list_Chrono_Duration,
    since: i64,
) {
    wire_handle_durations_twin_normal_impl(port_, durations, since)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_timestamps_twin_normal(
    port_: i64,
    timestamps: *mut wire_cst_list_Chrono_Naive,
    epoch: i64,
) {
    wire_handle_timestamps_twin_normal_impl(port_, timestamps, epoch)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_how_long_does_it_take_twin_normal(
    port_: i64,
    mine: *mut wire_cst_feature_chrono_twin_normal,
) {
    wire_how_long_does_it_take_twin_normal_impl(port_, mine)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_naivedatetime_twin_normal(port_: i64, d: i64) {
    wire_naivedatetime_twin_normal_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_optional_empty_datetime_utc_twin_normal(
    port_: i64,
    d: *mut i64,
) {
    wire_optional_empty_datetime_utc_twin_normal_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_chrono_twin_normal(port_: i64) {
    wire_test_chrono_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_precise_chrono_twin_normal(port_: i64) {
    wire_test_precise_chrono_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_StructWithCommentsTwinNormal_instance_method_twin_normal(
    port_: i64,
    that: *mut wire_cst_struct_with_comments_twin_normal,
) {
    wire_StructWithCommentsTwinNormal_instance_method_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_StructWithCommentsTwinNormal_static_method_twin_normal(
    port_: i64,
) {
    wire_StructWithCommentsTwinNormal_static_method_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_function_with_comments_slash_star_star_twin_normal(
    port_: i64,
) {
    wire_function_with_comments_slash_star_star_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_function_with_comments_triple_slash_multi_line_twin_normal(
    port_: i64,
) {
    wire_function_with_comments_triple_slash_multi_line_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_function_with_comments_triple_slash_single_line_twin_normal(
    port_: i64,
) {
    wire_function_with_comments_triple_slash_single_line_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConstructorOpaqueStructTwinNormal_check(
    that: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_ConstructorOpaqueStructTwinNormal_check_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConstructorOpaqueStructTwinNormal_new(
    port_: i64,
) {
    wire_ConstructorOpaqueStructTwinNormal_new_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConstructorOpaqueSyncStructTwinNormal_check(
    that: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_ConstructorOpaqueSyncStructTwinNormal_check_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConstructorOpaqueSyncStructTwinNormal_new(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_ConstructorOpaqueSyncStructTwinNormal_new_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConstructorTranslatableStructTwinNormal_new(
    port_: i64,
) {
    wire_ConstructorTranslatableStructTwinNormal_new_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConstructorTranslatableSyncStructTwinNormal_new(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_ConstructorTranslatableSyncStructTwinNormal_new_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_check_init_done(port_: i64) {
    wire_check_init_done_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_init_app(port_: i64) {
    wire_init_app_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_my_init_one(port_: i64) {
    wire_my_init_one_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_my_init_two(port_: i64) {
    wire_my_init_two_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_dart_dynamic_twin_normal(port_: i64) {
    wire_return_dart_dynamic_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_loopback_twin_normal(
    port_: i64,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_loopback_twin_normal_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_multi_times_twin_normal(
    port_: i64,
    callback: *const std::ffi::c_void,
    num_times: i32,
) {
    wire_rust_call_dart_multi_times_twin_normal_impl(port_, callback, num_times)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_one_arg_twin_normal(
    port_: i64,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_one_arg_twin_normal_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_return_twin_normal(
    port_: i64,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_return_twin_normal_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_simple_twin_normal(
    port_: i64,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_simple_twin_normal_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_two_args_twin_normal(
    port_: i64,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_two_args_twin_normal_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_with_dart_opaque_arg_twin_normal(
    port_: i64,
    input: *const std::ffi::c_void,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_with_dart_opaque_arg_twin_normal_impl(port_, input, callback)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_with_dart_opaque_result_twin_normal(
    port_: i64,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_with_dart_opaque_result_twin_normal_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_async_accept_dart_opaque_twin_normal(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_async_accept_dart_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_clone_dart_opaque_twin_normal(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_clone_dart_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_enum_dart_opaque_twin_normal(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_create_enum_dart_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_nested_dart_opaque_twin_normal(
    port_: i64,
    opaque1: *const std::ffi::c_void,
    opaque2: *const std::ffi::c_void,
) {
    wire_create_nested_dart_opaque_twin_normal_impl(port_, opaque1, opaque2)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_drop_static_dart_opaque_twin_normal(
    port_: i64,
    id: i32,
) {
    wire_drop_static_dart_opaque_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_enum_dart_opaque_twin_normal(
    port_: i64,
    opaque: *mut wire_cst_enum_dart_opaque_twin_normal,
) {
    wire_get_enum_dart_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_nested_dart_opaque_twin_normal(
    port_: i64,
    opaque: *mut wire_cst_dart_opaque_nested_twin_normal,
) {
    wire_get_nested_dart_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_array_get_twin_normal(
    port_: i64,
    opaque: *mut wire_cst_list_DartOpaque,
) {
    wire_loop_back_array_get_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_array_twin_normal(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_loop_back_array_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_option_get_twin_normal(
    port_: i64,
    opaque: *mut *const std::ffi::c_void,
) {
    wire_loop_back_option_get_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_option_twin_normal(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_loop_back_option_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_twin_normal(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_loop_back_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_vec_get_twin_normal(
    port_: i64,
    opaque: *mut wire_cst_list_DartOpaque,
) {
    wire_loop_back_vec_get_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_vec_twin_normal(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_loop_back_vec_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_panic_unwrap_dart_opaque_twin_normal(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_panic_unwrap_dart_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_set_static_dart_opaque_twin_normal(
    port_: i64,
    id: i32,
    opaque: *const std::ffi::c_void,
) {
    wire_set_static_dart_opaque_twin_normal_impl(port_, id, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_accept_dart_opaque_twin_normal(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_accept_dart_opaque_twin_normal_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_loopback_twin_normal(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_loopback_twin_normal_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_option_dart_opaque_twin_normal(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_option_dart_opaque_twin_normal_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_option_loopback_twin_normal(
    opaque: *mut *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_option_loopback_twin_normal_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_unwrap_dart_opaque_twin_normal(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_unwrap_dart_opaque_twin_normal_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_duplicated_module_names(
    port_: i64,
    s: *mut wire_cst_struct_in_lower_level,
) {
    wire_test_duplicated_module_names_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinNormal_create_stream(
    port_: i64,
    that: usize,
) {
    wire_DroppableTwinNormal_create_stream_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinNormal_get_drop_count_twin_normal(
    port_: i64,
) {
    wire_DroppableTwinNormal_get_drop_count_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinNormal_new_twin_normal(
    port_: i64,
) {
    wire_DroppableTwinNormal_new_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinNormal_simple_method_twin_normal(
    port_: i64,
    that: usize,
) {
    wire_DroppableTwinNormal_simple_method_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_simple_twin_normal(
    port_: i64,
    arg: i32,
) {
    wire_func_enum_simple_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_discriminant_twin_normal(
    port_: i64,
    arg: i32,
) {
    wire_func_enum_with_discriminant_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_item_mixed_twin_normal(
    port_: i64,
    arg: *mut wire_cst_enum_with_item_mixed_twin_normal,
) {
    wire_func_enum_with_item_mixed_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_item_struct_twin_normal(
    port_: i64,
    arg: *mut wire_cst_enum_with_item_struct_twin_normal,
) {
    wire_func_enum_with_item_struct_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_item_tuple_twin_normal(
    port_: i64,
    arg: *mut wire_cst_enum_with_item_tuple_twin_normal,
) {
    wire_func_enum_with_item_tuple_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_enum_parameter_twin_normal(
    port_: i64,
    weekday: i32,
) {
    wire_handle_enum_parameter_twin_normal_impl(port_, weekday)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_enum_struct_twin_normal(
    port_: i64,
    val: *mut wire_cst_kitchen_sink_twin_normal,
) {
    wire_handle_enum_struct_twin_normal_impl(port_, val)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_return_enum_twin_normal(
    port_: i64,
    input: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_handle_return_enum_twin_normal_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_multiply_by_ten_twin_normal(
    port_: i64,
    measure: *mut wire_cst_measure_twin_normal,
) {
    wire_multiply_by_ten_twin_normal_impl(port_, measure)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_print_note_twin_normal(
    port_: i64,
    note: *mut wire_cst_note_twin_normal,
) {
    wire_print_note_twin_normal_impl(port_, note)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_EventTwinNormal_as_string_twin_normal(
    port_: i64,
    that: *mut wire_cst_event_twin_normal,
) {
    wire_EventTwinNormal_as_string_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_close_event_listener_twin_normal(port_: i64) {
    wire_close_event_listener_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_event_twin_normal(
    port_: i64,
    address: *mut wire_cst_list_prim_u_8_strict,
    payload: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_create_event_twin_normal_impl(port_, address, payload)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_register_event_listener_twin_normal(
    port_: i64,
) {
    wire_register_event_listener_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinNormal_new_twin_normal(
    port_: i64,
    message: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_CustomStructTwinNormal_new_twin_normal_impl(port_, message)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinNormal_nonstatic_return_custom_struct_error_twin_normal(
    port_: i64,
    that: *mut wire_cst_custom_struct_twin_normal,
) {
    wire_CustomStructTwinNormal_nonstatic_return_custom_struct_error_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinNormal_nonstatic_return_custom_struct_ok_twin_normal(
    port_: i64,
    that: *mut wire_cst_custom_struct_twin_normal,
) {
    wire_CustomStructTwinNormal_nonstatic_return_custom_struct_ok_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinNormal_static_return_custom_struct_error_twin_normal(
    port_: i64,
) {
    wire_CustomStructTwinNormal_static_return_custom_struct_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinNormal_static_return_custom_struct_ok_twin_normal(
    port_: i64,
) {
    wire_CustomStructTwinNormal_static_return_custom_struct_ok_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinNormal_new_twin_normal(
    port_: i64,
    value: u32,
) {
    wire_SomeStructTwinNormal_new_twin_normal_impl(port_, value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinNormal_non_static_return_err_custom_error_twin_normal(
    port_: i64,
    that: *mut wire_cst_some_struct_twin_normal,
) {
    wire_SomeStructTwinNormal_non_static_return_err_custom_error_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinNormal_non_static_return_ok_custom_error_twin_normal(
    port_: i64,
    that: *mut wire_cst_some_struct_twin_normal,
) {
    wire_SomeStructTwinNormal_non_static_return_ok_custom_error_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinNormal_static_return_err_custom_error_twin_normal(
    port_: i64,
) {
    wire_SomeStructTwinNormal_static_return_err_custom_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinNormal_static_return_ok_custom_error_twin_normal(
    port_: i64,
) {
    wire_SomeStructTwinNormal_static_return_ok_custom_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_enum_error_panic_twin_normal(
    port_: i64,
) {
    wire_custom_enum_error_panic_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_enum_error_return_error_twin_normal(
    port_: i64,
) {
    wire_custom_enum_error_return_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_enum_error_return_ok_twin_normal(
    port_: i64,
    arg: u32,
) {
    wire_custom_enum_error_return_ok_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_nested_error_return_error_twin_normal(
    port_: i64,
    arg: *mut wire_cst_custom_nested_error_outer_twin_normal,
) {
    wire_custom_nested_error_return_error_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_struct_error_return_error_twin_normal(
    port_: i64,
    arg: *mut wire_cst_custom_struct_error_twin_normal,
) {
    wire_custom_struct_error_return_error_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_return_error_twin_normal(port_: i64) {
    wire_func_return_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_type_fallible_panic_twin_normal(
    port_: i64,
) {
    wire_func_type_fallible_panic_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_type_infallible_panic_twin_normal(
    port_: i64,
) {
    wire_func_type_infallible_panic_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_panic_with_custom_result_twin_normal(
    port_: i64,
) {
    wire_panic_with_custom_result_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_nested_error_1_twin_normal(
    port_: i64,
) {
    wire_return_custom_nested_error_1_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_nested_error_1_variant1_twin_normal(
    port_: i64,
) {
    wire_return_custom_nested_error_1_variant1_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_nested_error_2_twin_normal(
    port_: i64,
) {
    wire_return_custom_nested_error_2_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_struct_error_twin_normal(
    port_: i64,
) {
    wire_return_custom_struct_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_struct_ok_twin_normal(
    port_: i64,
) {
    wire_return_custom_struct_ok_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_err_custom_error_twin_normal(
    port_: i64,
) {
    wire_return_err_custom_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_error_variant_twin_normal(
    port_: i64,
    variant: u32,
) {
    wire_return_error_variant_twin_normal_impl(port_, variant)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_ok_custom_error_twin_normal(port_: i64) {
    wire_return_ok_custom_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_stream_sink_throw_anyhow_twin_normal(
    port_: i64,
) {
    wire_stream_sink_throw_anyhow_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_throw_anyhow_twin_normal(port_: i64) {
    wire_throw_anyhow_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_call_new_module_system_twin_normal(port_: i64) {
    wire_call_new_module_system_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_call_old_module_system_twin_normal(port_: i64) {
    wire_call_old_module_system_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_imported_enum_twin_normal(
    port_: i64,
    my_enum: i32,
) {
    wire_use_imported_enum_twin_normal_impl(port_, my_enum)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_imported_struct_twin_normal(
    port_: i64,
    my_struct: *mut wire_cst_my_struct,
) {
    wire_use_imported_struct_twin_normal_impl(port_, my_struct)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_another_macro_struct_twin_normal(port_: i64) {
    wire_another_macro_struct_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_macro_struct_twin_normal(
    port_: i64,
    arg: *mut wire_cst_macro_struct,
) {
    wire_func_macro_struct_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_i32_i32_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_i_32,
) {
    wire_func_hash_map_i32_i32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_bytes_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_string_list_prim_u_8_strict,
) {
    wire_func_hash_map_string_bytes_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_complex_enum_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_string_kitchen_sink_twin_normal,
) {
    wire_func_hash_map_string_complex_enum_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_simple_enum_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_string_enum_simple_twin_normal,
) {
    wire_func_hash_map_string_simple_enum_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_string_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_string_string,
) {
    wire_func_hash_map_string_string_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_struct_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_string_my_size,
) {
    wire_func_hash_map_string_struct_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_set_i32_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_32_strict,
) {
    wire_func_hash_set_i32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_set_string_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_String,
) {
    wire_func_hash_set_string_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinNormal_concatenate_static_twin_normal(
    port_: i64,
    a: *mut wire_cst_list_prim_u_8_strict,
    b: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_ConcatenateWithTwinNormal_concatenate_static_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinNormal_concatenate_twin_normal(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_normal,
    b: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_ConcatenateWithTwinNormal_concatenate_twin_normal_impl(port_, that, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_single_arg_twin_normal(
    port_: i64,
) {
    wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_single_arg_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_twin_normal(
    port_: i64,
    key: u32,
    max: u32,
) {
    wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_twin_normal_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinNormal_handle_some_stream_sink_at_1_twin_normal(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_normal,
) {
    wire_ConcatenateWithTwinNormal_handle_some_stream_sink_at_1_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinNormal_handle_some_stream_sink_twin_normal(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_normal,
    key: u32,
    max: u32,
) {
    wire_ConcatenateWithTwinNormal_handle_some_stream_sink_twin_normal_impl(port_, that, key, max)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinNormal_new_twin_normal(
    port_: i64,
    a: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_ConcatenateWithTwinNormal_new_twin_normal_impl(port_, a)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinNormal_simple_getter_twin_normal(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_normal,
) {
    wire_ConcatenateWithTwinNormal_simple_getter_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_MyCallableTwinNormal_call(
    port_: i64,
    that: *mut wire_cst_my_callable_twin_normal,
    two: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_MyCallableTwinNormal_call_impl(port_, that, two)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SimpleStructTwinNormal_arg_self_twin_normal(
    port_: i64,
    a: *mut wire_cst_simple_struct_twin_normal,
    b: *mut wire_cst_simple_struct_twin_normal,
) {
    wire_SimpleStructTwinNormal_arg_self_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SimpleStructTwinNormal_return_self_twin_normal(
    port_: i64,
    one: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_SimpleStructTwinNormal_return_self_twin_normal_impl(port_, one)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SimpleStructTwinNormal_vec_self_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_simple_struct_twin_normal,
) {
    wire_SimpleStructTwinNormal_vec_self_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SumWithTwinNormal_sum_twin_normal(
    port_: i64,
    that: *mut wire_cst_sum_with_twin_normal,
    y: u32,
    z: u32,
) {
    wire_SumWithTwinNormal_sum_twin_normal_impl(port_, that, y, z)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_sum_array_twin_normal(
    port_: i64,
    a: u32,
    b: u32,
    c: u32,
) {
    wire_get_sum_array_twin_normal_impl(port_, a, b, c)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_sum_struct_twin_normal(port_: i64) {
    wire_get_sum_struct_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_app_settings_stream_twin_normal(port_: i64) {
    wire_app_settings_stream_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_app_settings_vec_stream_twin_normal(
    port_: i64,
) {
    wire_app_settings_vec_stream_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_first_number_twin_normal(
    port_: i64,
    nums: *mut wire_cst_numbers,
) {
    wire_first_number_twin_normal_impl(port_, nums)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_first_sequence_twin_normal(
    port_: i64,
    seqs: *mut wire_cst_sequences,
) {
    wire_first_sequence_twin_normal_impl(port_, seqs)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_app_settings_twin_normal(port_: i64) {
    wire_get_app_settings_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_fallible_app_settings_twin_normal(
    port_: i64,
) {
    wire_get_fallible_app_settings_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_message_twin_normal(port_: i64) {
    wire_get_message_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_is_app_embedded_twin_normal(
    port_: i64,
    app_settings: *mut wire_cst_application_settings,
) {
    wire_is_app_embedded_twin_normal_impl(port_, app_settings)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_array_enum_stream_twin_normal(
    port_: i64,
) {
    wire_mirror_array_enum_stream_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_enum_stream_twin_normal(port_: i64) {
    wire_mirror_enum_stream_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_map_enum_stream_twin_normal(port_: i64) {
    wire_mirror_map_enum_stream_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_option_enum_stream_twin_normal(
    port_: i64,
) {
    wire_mirror_option_enum_stream_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_set_enum_stream_twin_normal(port_: i64) {
    wire_mirror_set_enum_stream_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_struct_stream_twin_normal(port_: i64) {
    wire_mirror_struct_stream_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_tuple_stream_twin_normal(port_: i64) {
    wire_mirror_tuple_stream_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_vec_enum_stream_twin_normal(port_: i64) {
    wire_mirror_vec_enum_stream_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_repeat_number_twin_normal(
    port_: i64,
    num: i32,
    times: usize,
) {
    wire_repeat_number_twin_normal_impl(port_, num, times)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_repeat_sequence_twin_normal(
    port_: i64,
    seq: i32,
    times: usize,
) {
    wire_repeat_sequence_twin_normal_impl(port_, seq, times)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_contains_mirrored_sub_struct_twin_normal(
    port_: i64,
) {
    wire_test_contains_mirrored_sub_struct_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_fallible_of_raw_string_mirrored_twin_normal(
    port_: i64,
) {
    wire_test_fallible_of_raw_string_mirrored_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_hashmap_with_mirrored_value_twin_normal(
    port_: i64,
) {
    wire_test_hashmap_with_mirrored_value_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_list_of_nested_enums_mirrored_twin_normal(
    port_: i64,
) {
    wire_test_list_of_nested_enums_mirrored_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_list_of_raw_nested_string_mirrored_twin_normal(
    port_: i64,
) {
    wire_test_list_of_raw_nested_string_mirrored_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_nested_raw_string_mirrored_twin_normal(
    port_: i64,
) {
    wire_test_nested_raw_string_mirrored_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_raw_string_enum_mirrored_twin_normal(
    port_: i64,
    nested: bool,
) {
    wire_test_raw_string_enum_mirrored_twin_normal_impl(port_, nested)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_raw_string_mirrored_twin_normal(
    port_: i64,
) {
    wire_test_raw_string_mirrored_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_big_buffers_twin_normal(port_: i64) {
    wire_handle_big_buffers_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_complex_struct_twin_normal(
    port_: i64,
    s: *mut wire_cst_my_tree_node_twin_normal,
) {
    wire_handle_complex_struct_twin_normal_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_nested_struct_twin_normal(
    port_: i64,
    s: *mut wire_cst_my_nested_struct_twin_normal,
) {
    wire_handle_nested_struct_twin_normal_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_string_twin_normal(
    port_: i64,
    s: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_handle_string_twin_normal_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_struct_twin_normal(
    port_: i64,
    arg: *mut wire_cst_my_size,
    boxed: *mut wire_cst_my_size,
) {
    wire_handle_struct_twin_normal_impl(port_, arg, boxed)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_vec_u8_twin_normal(
    port_: i64,
    v: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_handle_vec_u8_twin_normal_impl(port_, v)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_list_of_primitive_enums_twin_normal(
    port_: i64,
    weekdays: *mut wire_cst_list_weekdays_twin_normal,
) {
    wire_list_of_primitive_enums_twin_normal_impl(port_, weekdays)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_abc_enum_twin_normal(
    port_: i64,
    abc: *mut wire_cst_abc_twin_normal,
) {
    wire_test_abc_enum_twin_normal_impl(port_, abc)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_struct_with_enum_twin_normal(
    port_: i64,
    se: *mut wire_cst_struct_with_enum_twin_normal,
) {
    wire_test_struct_with_enum_twin_normal_impl(port_, se)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_StructInMiscNoTwinExampleA_sample_function_a(
    port_: i64,
    that: usize,
) {
    wire_StructInMiscNoTwinExampleA_sample_function_a_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_StructWithImplBlockInMultiFile_method_in_a(
    port_: i64,
    that: usize,
) {
    wire_StructWithImplBlockInMultiFile_method_in_a_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_StructInMiscNoTwinExampleB_get_struct_in_misc_no_twin_example_a(
    port_: i64,
    that: usize,
) {
    wire_StructInMiscNoTwinExampleB_get_struct_in_misc_no_twin_example_a_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_StructInMiscNoTwinExampleB_sample_function_b(
    port_: i64,
    that: usize,
) {
    wire_StructInMiscNoTwinExampleB_sample_function_b_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_StructWithImplBlockInMultiFile_method_in_b(
    port_: i64,
    that: usize,
) {
    wire_StructWithImplBlockInMultiFile_method_in_b_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_empty_struct_twin_normal(
    port_: i64,
    empty: *mut wire_cst_empty_twin_normal,
) {
    wire_empty_struct_twin_normal_impl(port_, empty)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_return_unit_twin_normal(port_: i64) {
    wire_func_return_unit_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_list_of_struct_twin_normal(
    port_: i64,
    l: *mut wire_cst_list_my_size,
) {
    wire_handle_list_of_struct_twin_normal_impl(port_, l)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_string_list_twin_normal(
    port_: i64,
    names: *mut wire_cst_list_String,
) {
    wire_handle_string_list_twin_normal_impl(port_, names)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_newtype_twin_normal(
    port_: i64,
    arg: *mut wire_cst_new_type_int_twin_normal,
) {
    wire_handle_newtype_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_increment_boxed_optional_twin_normal(
    port_: i64,
    opt: *mut f64,
) {
    wire_handle_increment_boxed_optional_twin_normal_impl(port_, opt)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_option_box_arguments_twin_normal(
    port_: i64,
    i8box: *mut i8,
    u8box: *mut u8,
    i32box: *mut i32,
    i64box: *mut i64,
    f64box: *mut f64,
    boolbox: *mut bool,
    structbox: *mut wire_cst_exotic_optionals_twin_normal,
) {
    wire_handle_option_box_arguments_twin_normal_impl(
        port_, i8box, u8box, i32box, i64box, f64box, boolbox, structbox,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_optional_increment_twin_normal(
    port_: i64,
    opt: *mut wire_cst_exotic_optionals_twin_normal,
) {
    wire_handle_optional_increment_twin_normal_impl(port_, opt)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_optional_return_twin_normal(
    port_: i64,
    left: f64,
    right: f64,
) {
    wire_handle_optional_return_twin_normal_impl(port_, left, right)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_optional_struct_twin_normal(
    port_: i64,
    document: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_handle_optional_struct_twin_normal_impl(port_, document)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_vec_of_opts_twin_normal(
    port_: i64,
    opt: *mut wire_cst_opt_vecs_twin_normal,
) {
    wire_handle_vec_of_opts_twin_normal_impl(port_, opt)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_primitive_optional_types_twin_normal(
    port_: i64,
    my_i32: *mut i32,
    my_i64: *mut i64,
    my_f64: *mut f64,
    my_bool: *mut bool,
) {
    wire_primitive_optional_types_twin_normal_impl(port_, my_i32, my_i64, my_f64, my_bool)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_vec_of_primitive_twin_normal(
    port_: i64,
    n: i32,
) {
    wire_handle_vec_of_primitive_twin_normal_impl(port_, n)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_primitive_types_twin_normal(
    port_: i64,
    my_i32: i32,
    my_i64: i64,
    my_f64: f64,
    my_bool: bool,
) {
    wire_primitive_types_twin_normal_impl(port_, my_i32, my_i64, my_f64, my_bool)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_primitive_u32_twin_normal(
    port_: i64,
    my_u32: u32,
) {
    wire_primitive_u32_twin_normal_impl(port_, my_u32)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_boxed_blob_twin_rust_async(
    port_: i64,
    blob: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_boxed_blob_twin_rust_async_impl(port_, blob)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_test_id_twin_rust_async(
    port_: i64,
    id: *mut wire_cst_test_id_twin_rust_async,
) {
    wire_func_test_id_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_array_twin_rust_async(port_: i64) {
    wire_get_array_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_complex_array_twin_rust_async(port_: i64) {
    wire_get_complex_array_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_last_number_twin_rust_async(
    port_: i64,
    array: *mut wire_cst_list_prim_f_64_strict,
) {
    wire_last_number_twin_rust_async_impl(port_, array)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_nested_id_twin_rust_async(
    port_: i64,
    id: *mut wire_cst_list_test_id_twin_rust_async,
) {
    wire_nested_id_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_new_msgid_twin_rust_async(
    port_: i64,
    id: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_new_msgid_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_boxed_feed_id_twin_rust_async(
    port_: i64,
    id: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_return_boxed_feed_id_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_boxed_raw_feed_id_twin_rust_async(
    port_: i64,
    id: *mut wire_cst_feed_id_twin_rust_async,
) {
    wire_return_boxed_raw_feed_id_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_boxed_blob_twin_rust_async(
    port_: i64,
    blob: *mut wire_cst_blob_twin_rust_async,
) {
    wire_use_boxed_blob_twin_rust_async_impl(port_, blob)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_msgid_twin_rust_async(
    port_: i64,
    id: *mut wire_cst_message_id_twin_rust_async,
) {
    wire_use_msgid_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_boxed_blob_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_boxed_blob_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_test_id_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_test_id_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_array_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_array_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_complex_array_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_complex_array_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_last_number_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_last_number_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_nested_id_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_nested_id_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_new_msgid_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_new_msgid_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_boxed_feed_id_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_boxed_feed_id_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_boxed_raw_feed_id_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_boxed_raw_feed_id_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_boxed_blob_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_use_boxed_blob_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_msgid_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_use_msgid_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_boxed_blob_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_boxed_blob_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_test_id_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_test_id_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_array_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_array_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_complex_array_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_complex_array_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_last_number_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_last_number_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_nested_id_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_nested_id_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_new_msgid_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_new_msgid_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_boxed_feed_id_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_boxed_feed_id_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_boxed_raw_feed_id_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_boxed_raw_feed_id_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_boxed_blob_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_use_boxed_blob_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_msgid_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_use_msgid_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_boxed_blob_twin_sync(
    blob: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_boxed_blob_twin_sync_impl(blob)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_test_id_twin_sync(
    id: *mut wire_cst_test_id_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_test_id_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_array_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_array_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_complex_array_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_complex_array_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_last_number_twin_sync(
    array: *mut wire_cst_list_prim_f_64_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_last_number_twin_sync_impl(array)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_nested_id_twin_sync(
    id: *mut wire_cst_list_test_id_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_nested_id_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_new_msgid_twin_sync(
    id: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_new_msgid_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_boxed_feed_id_twin_sync(
    id: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_boxed_feed_id_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_boxed_raw_feed_id_twin_sync(
    id: *mut wire_cst_feed_id_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_boxed_raw_feed_id_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_boxed_blob_twin_sync(
    blob: *mut wire_cst_blob_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_use_boxed_blob_twin_sync_impl(blob)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_msgid_twin_sync(
    id: *mut wire_cst_message_id_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_use_msgid_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_boxed_blob_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_boxed_blob_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_test_id_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_test_id_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_array_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_get_array_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_complex_array_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_get_complex_array_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_last_number_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_last_number_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_nested_id_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_nested_id_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_new_msgid_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_new_msgid_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_boxed_feed_id_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_boxed_feed_id_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_boxed_raw_feed_id_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_boxed_raw_feed_id_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_boxed_blob_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_use_boxed_blob_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_msgid_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_use_msgid_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_async_simple_add_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_async_simple_add_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_async_void_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_async_void_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_customized_struct_twin_rust_async(
    port_: i64,
    val: *mut wire_cst_customized_twin_rust_async,
) {
    wire_handle_customized_struct_twin_rust_async_impl(port_, val)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_next_user_id_twin_rust_async(
    port_: i64,
    user_id: *mut wire_cst_user_id_twin_rust_async,
) {
    wire_next_user_id_twin_rust_async_impl(port_, user_id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_customized_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_customized_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_next_user_id_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_next_user_id_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_customized_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_customized_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_next_user_id_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_next_user_id_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_customized_struct_twin_sync(
    val: *mut wire_cst_customized_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_customized_struct_twin_sync_impl(val)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_next_user_id_twin_sync(
    user_id: *mut wire_cst_user_id_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_next_user_id_twin_sync_impl(user_id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_customized_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_customized_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_next_user_id_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_next_user_id_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_basic_general_enum_twin_normal_twin_normal(
    port_: i64,
    arg: *mut wire_cst_basic_general_enum_twin_normal,
) {
    wire_example_basic_type_basic_general_enum_twin_normal_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_basic_primitive_enum_twin_normal_twin_normal(
    port_: i64,
    arg: i32,
) {
    wire_example_basic_type_basic_primitive_enum_twin_normal_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_basic_struct_twin_normal_twin_normal(
    port_: i64,
    arg: *mut wire_cst_basic_struct_twin_normal,
) {
    wire_example_basic_type_basic_struct_twin_normal_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_bool_twin_normal(
    port_: i64,
    arg: bool,
) {
    wire_example_basic_type_bool_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_bytes_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_example_basic_type_bytes_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_f32_twin_normal(
    port_: i64,
    arg: f32,
) {
    wire_example_basic_type_f32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_f64_twin_normal(
    port_: i64,
    arg: f64,
) {
    wire_example_basic_type_f64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i16_twin_normal(
    port_: i64,
    arg: i16,
) {
    wire_example_basic_type_i16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i32_twin_normal(
    port_: i64,
    arg: i32,
) {
    wire_example_basic_type_i32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i64_twin_normal(
    port_: i64,
    arg: i64,
) {
    wire_example_basic_type_i64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i8_twin_normal(
    port_: i64,
    arg: i8,
) {
    wire_example_basic_type_i8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_isize_twin_normal(
    port_: i64,
    arg: isize,
) {
    wire_example_basic_type_isize_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_string_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_example_basic_type_string_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u16_twin_normal(
    port_: i64,
    arg: u16,
) {
    wire_example_basic_type_u16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u32_twin_normal(
    port_: i64,
    arg: u32,
) {
    wire_example_basic_type_u32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u64_twin_normal(
    port_: i64,
    arg: u64,
) {
    wire_example_basic_type_u64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u8_twin_normal(
    port_: i64,
    arg: u8,
) {
    wire_example_basic_type_u8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_usize_twin_normal(
    port_: i64,
    arg: usize,
) {
    wire_example_basic_type_usize_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_basic_general_enum_twin_normal_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_basic_general_enum_twin_normal,
) {
    wire_example_basic_list_type_basic_general_enum_twin_normal_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_basic_primitive_enum_twin_normal_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_basic_primitive_enum_twin_normal,
) {
    wire_example_basic_list_type_basic_primitive_enum_twin_normal_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_basic_struct_twin_normal_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_basic_struct_twin_normal,
) {
    wire_example_basic_list_type_basic_struct_twin_normal_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_bool_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_bool,
) {
    wire_example_basic_list_type_bool_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_bytes_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_list_prim_u_8_strict,
) {
    wire_example_basic_list_type_bytes_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_f32_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_f_32_loose,
) {
    wire_example_basic_list_type_f32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_f64_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_f_64_loose,
) {
    wire_example_basic_list_type_f64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i16_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_16_loose,
) {
    wire_example_basic_list_type_i16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i32_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_32_loose,
) {
    wire_example_basic_list_type_i32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i64_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_64_strict,
) {
    wire_example_basic_list_type_i64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i8_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_8_loose,
) {
    wire_example_basic_list_type_i8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_string_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_String,
) {
    wire_example_basic_list_type_string_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u16_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_16_loose,
) {
    wire_example_basic_list_type_u16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u32_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_32_loose,
) {
    wire_example_basic_list_type_u32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u64_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_64_strict,
) {
    wire_example_basic_list_type_u64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u8_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_example_basic_list_type_u8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_basic_general_enum_twin_rust_async_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_basic_general_enum_twin_rust_async,
) {
    wire_example_basic_list_type_basic_general_enum_twin_rust_async_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_basic_primitive_enum_twin_rust_async_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_basic_primitive_enum_twin_rust_async,
) {
    wire_example_basic_list_type_basic_primitive_enum_twin_rust_async_twin_rust_async_impl(
        port_, arg,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_basic_struct_twin_rust_async_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_basic_struct_twin_rust_async,
) {
    wire_example_basic_list_type_basic_struct_twin_rust_async_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_bool_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_bool,
) {
    wire_example_basic_list_type_bool_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_bytes_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_list_prim_u_8_strict,
) {
    wire_example_basic_list_type_bytes_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_f32_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_f_32_loose,
) {
    wire_example_basic_list_type_f32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_f64_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_f_64_loose,
) {
    wire_example_basic_list_type_f64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i16_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_16_loose,
) {
    wire_example_basic_list_type_i16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i32_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_32_loose,
) {
    wire_example_basic_list_type_i32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i64_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_64_strict,
) {
    wire_example_basic_list_type_i64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i8_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_8_loose,
) {
    wire_example_basic_list_type_i8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_string_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_String,
) {
    wire_example_basic_list_type_string_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u16_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_16_loose,
) {
    wire_example_basic_list_type_u16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u32_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_32_loose,
) {
    wire_example_basic_list_type_u32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u64_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_64_strict,
) {
    wire_example_basic_list_type_u64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u8_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_example_basic_list_type_u8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_bool_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_bool_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_bytes_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_bytes_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_f32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_f32_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_f64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_f64_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i16_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_i16_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_i32_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_i64_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i8_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_i8_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_string_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_string_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u16_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_u16_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_u32_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_u64_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u8_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_u8_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_basic_general_enum_twin_sse_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_basic_general_enum_twin_sse_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_basic_primitive_enum_twin_sse_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_basic_primitive_enum_twin_sse_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_basic_struct_twin_sse_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_basic_struct_twin_sse_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_bool_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_bool_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_bytes_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_bytes_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_f32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_f32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_f64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_f64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i16_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_i16_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_i32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_i64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i8_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_i8_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_string_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_string_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u16_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_u16_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_u32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_u64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u8_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_list_type_u8_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_basic_general_enum_twin_sync_twin_sync(
    arg: *mut wire_cst_list_basic_general_enum_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_list_type_basic_general_enum_twin_sync_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_basic_primitive_enum_twin_sync_twin_sync(
    arg: *mut wire_cst_list_basic_primitive_enum_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_list_type_basic_primitive_enum_twin_sync_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_basic_struct_twin_sync_twin_sync(
    arg: *mut wire_cst_list_basic_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_list_type_basic_struct_twin_sync_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_bool_twin_sync(
    arg: *mut wire_cst_list_bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_list_type_bool_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_bytes_twin_sync(
    arg: *mut wire_cst_list_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_list_type_bytes_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_f32_twin_sync(
    arg: *mut wire_cst_list_prim_f_32_loose,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_list_type_f32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_f64_twin_sync(
    arg: *mut wire_cst_list_prim_f_64_loose,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_list_type_f64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i16_twin_sync(
    arg: *mut wire_cst_list_prim_i_16_loose,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_list_type_i16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i32_twin_sync(
    arg: *mut wire_cst_list_prim_i_32_loose,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_list_type_i32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i64_twin_sync(
    arg: *mut wire_cst_list_prim_i_64_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_list_type_i64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i8_twin_sync(
    arg: *mut wire_cst_list_prim_i_8_loose,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_list_type_i8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_string_twin_sync(
    arg: *mut wire_cst_list_String,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_list_type_string_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u16_twin_sync(
    arg: *mut wire_cst_list_prim_u_16_loose,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_list_type_u16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u32_twin_sync(
    arg: *mut wire_cst_list_prim_u_32_loose,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_list_type_u32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u64_twin_sync(
    arg: *mut wire_cst_list_prim_u_64_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_list_type_u64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u8_twin_sync(
    arg: *mut wire_cst_list_prim_u_8_loose,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_list_type_u8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_basic_general_enum_twin_sync_sse_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_list_type_basic_general_enum_twin_sync_sse_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_list_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_basic_struct_twin_sync_sse_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_list_type_basic_struct_twin_sync_sse_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_bool_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_list_type_bool_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_bytes_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_list_type_bytes_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_f32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_list_type_f32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_f64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_list_type_f64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i16_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_list_type_i16_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_list_type_i32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_list_type_i64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_i8_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_list_type_i8_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_string_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_list_type_string_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u16_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_list_type_u16_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_list_type_u32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_list_type_u64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_list_type_u8_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_list_type_u8_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_basic_general_enum_twin_normal_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_basic_general_enum_twin_normal,
) {
    wire_example_basic_map_type_basic_general_enum_twin_normal_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_basic_primitive_enum_twin_normal_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_basic_primitive_enum_twin_normal,
) {
    wire_example_basic_map_type_basic_primitive_enum_twin_normal_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_basic_struct_twin_normal_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_basic_struct_twin_normal,
) {
    wire_example_basic_map_type_basic_struct_twin_normal_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_bool_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_bool,
) {
    wire_example_basic_map_type_bool_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_bytes_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_list_prim_u_8_strict,
) {
    wire_example_basic_map_type_bytes_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_f32_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_f_32,
) {
    wire_example_basic_map_type_f32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_f64_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_f_64,
) {
    wire_example_basic_map_type_f64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i16_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_i_16,
) {
    wire_example_basic_map_type_i16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i32_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_i_32,
) {
    wire_example_basic_map_type_i32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i64_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_i_64,
) {
    wire_example_basic_map_type_i64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i8_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_i_8,
) {
    wire_example_basic_map_type_i8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_isize_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_isize,
) {
    wire_example_basic_map_type_isize_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_string_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_string,
) {
    wire_example_basic_map_type_string_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u16_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_u_16,
) {
    wire_example_basic_map_type_u16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u32_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_u_32,
) {
    wire_example_basic_map_type_u32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u64_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_u_64,
) {
    wire_example_basic_map_type_u64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u8_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_u_8,
) {
    wire_example_basic_map_type_u8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_usize_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_usize,
) {
    wire_example_basic_map_type_usize_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_basic_general_enum_twin_rust_async_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_basic_general_enum_twin_rust_async,
) {
    wire_example_basic_map_type_basic_general_enum_twin_rust_async_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_basic_primitive_enum_twin_rust_async_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_basic_primitive_enum_twin_rust_async,
) {
    wire_example_basic_map_type_basic_primitive_enum_twin_rust_async_twin_rust_async_impl(
        port_, arg,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_basic_struct_twin_rust_async_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_basic_struct_twin_rust_async,
) {
    wire_example_basic_map_type_basic_struct_twin_rust_async_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_bool_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_bool,
) {
    wire_example_basic_map_type_bool_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_bytes_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_list_prim_u_8_strict,
) {
    wire_example_basic_map_type_bytes_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_f32_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_f_32,
) {
    wire_example_basic_map_type_f32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_f64_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_f_64,
) {
    wire_example_basic_map_type_f64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i16_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_i_16,
) {
    wire_example_basic_map_type_i16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i32_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_i_32,
) {
    wire_example_basic_map_type_i32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i64_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_i_64,
) {
    wire_example_basic_map_type_i64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i8_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_i_8,
) {
    wire_example_basic_map_type_i8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_isize_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_isize,
) {
    wire_example_basic_map_type_isize_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_string_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_string,
) {
    wire_example_basic_map_type_string_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u16_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_u_16,
) {
    wire_example_basic_map_type_u16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u32_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_u_32,
) {
    wire_example_basic_map_type_u32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u64_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_u_64,
) {
    wire_example_basic_map_type_u64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u8_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_u_8,
) {
    wire_example_basic_map_type_u8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_usize_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_usize,
) {
    wire_example_basic_map_type_usize_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_bool_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_bool_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_bytes_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_bytes_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_f32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_f32_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_f64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_f64_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i16_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_i16_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_i32_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_i64_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i8_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_i8_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_isize_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_isize_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_string_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_string_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u16_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_u16_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_u32_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_u64_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u8_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_u8_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_usize_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_usize_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_basic_general_enum_twin_sse_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_basic_general_enum_twin_sse_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_basic_primitive_enum_twin_sse_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_basic_primitive_enum_twin_sse_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_basic_struct_twin_sse_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_basic_struct_twin_sse_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_bool_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_bool_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_bytes_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_bytes_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_f32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_f32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_f64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_f64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i16_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_i16_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_i32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_i64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i8_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_i8_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_isize_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_isize_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_string_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_string_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u16_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_u16_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_u32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_u64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u8_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_u8_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_usize_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_map_type_usize_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_basic_general_enum_twin_sync_twin_sync(
    arg: *mut wire_cst_list_record_i_32_basic_general_enum_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_map_type_basic_general_enum_twin_sync_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_basic_primitive_enum_twin_sync_twin_sync(
    arg: *mut wire_cst_list_record_i_32_basic_primitive_enum_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_map_type_basic_primitive_enum_twin_sync_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_basic_struct_twin_sync_twin_sync(
    arg: *mut wire_cst_list_record_i_32_basic_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_map_type_basic_struct_twin_sync_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_bool_twin_sync(
    arg: *mut wire_cst_list_record_i_32_bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_map_type_bool_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_bytes_twin_sync(
    arg: *mut wire_cst_list_record_i_32_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_map_type_bytes_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_f32_twin_sync(
    arg: *mut wire_cst_list_record_i_32_f_32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_map_type_f32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_f64_twin_sync(
    arg: *mut wire_cst_list_record_i_32_f_64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_map_type_f64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i16_twin_sync(
    arg: *mut wire_cst_list_record_i_32_i_16,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_map_type_i16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i32_twin_sync(
    arg: *mut wire_cst_list_record_i_32_i_32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_map_type_i32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i64_twin_sync(
    arg: *mut wire_cst_list_record_i_32_i_64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_map_type_i64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i8_twin_sync(
    arg: *mut wire_cst_list_record_i_32_i_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_map_type_i8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_isize_twin_sync(
    arg: *mut wire_cst_list_record_i_32_isize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_map_type_isize_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_string_twin_sync(
    arg: *mut wire_cst_list_record_i_32_string,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_map_type_string_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u16_twin_sync(
    arg: *mut wire_cst_list_record_i_32_u_16,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_map_type_u16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u32_twin_sync(
    arg: *mut wire_cst_list_record_i_32_u_32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_map_type_u32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u64_twin_sync(
    arg: *mut wire_cst_list_record_i_32_u_64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_map_type_u64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u8_twin_sync(
    arg: *mut wire_cst_list_record_i_32_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_map_type_u8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_usize_twin_sync(
    arg: *mut wire_cst_list_record_i_32_usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_map_type_usize_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_basic_general_enum_twin_sync_sse_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_map_type_basic_general_enum_twin_sync_sse_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_map_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_basic_struct_twin_sync_sse_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_map_type_basic_struct_twin_sync_sse_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_bool_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_map_type_bool_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_bytes_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_map_type_bytes_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_f32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_map_type_f32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_f64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_map_type_f64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i16_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_map_type_i16_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_map_type_i32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_map_type_i64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_i8_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_map_type_i8_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_isize_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_map_type_isize_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_string_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_map_type_string_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u16_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_map_type_u16_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_map_type_u32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_map_type_u64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_u8_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_map_type_u8_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_map_type_usize_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_map_type_usize_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_basic_general_enum_twin_normal_twin_normal(
    port_: i64,
    arg: *mut wire_cst_basic_general_enum_twin_normal,
) {
    wire_example_basic_optional_type_basic_general_enum_twin_normal_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_basic_primitive_enum_twin_normal_twin_normal(
    port_: i64,
    arg: *mut i32,
) {
    wire_example_basic_optional_type_basic_primitive_enum_twin_normal_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_basic_struct_twin_normal_twin_normal(
    port_: i64,
    arg: *mut wire_cst_basic_struct_twin_normal,
) {
    wire_example_basic_optional_type_basic_struct_twin_normal_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_bool_twin_normal(
    port_: i64,
    arg: *mut bool,
) {
    wire_example_basic_optional_type_bool_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_bytes_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_example_basic_optional_type_bytes_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_f32_twin_normal(
    port_: i64,
    arg: *mut f32,
) {
    wire_example_basic_optional_type_f32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_f64_twin_normal(
    port_: i64,
    arg: *mut f64,
) {
    wire_example_basic_optional_type_f64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i16_twin_normal(
    port_: i64,
    arg: *mut i16,
) {
    wire_example_basic_optional_type_i16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i32_twin_normal(
    port_: i64,
    arg: *mut i32,
) {
    wire_example_basic_optional_type_i32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i64_twin_normal(
    port_: i64,
    arg: *mut i64,
) {
    wire_example_basic_optional_type_i64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i8_twin_normal(
    port_: i64,
    arg: *mut i8,
) {
    wire_example_basic_optional_type_i8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_isize_twin_normal(
    port_: i64,
    arg: *mut isize,
) {
    wire_example_basic_optional_type_isize_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_string_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_example_basic_optional_type_string_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u16_twin_normal(
    port_: i64,
    arg: *mut u16,
) {
    wire_example_basic_optional_type_u16_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u32_twin_normal(
    port_: i64,
    arg: *mut u32,
) {
    wire_example_basic_optional_type_u32_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u64_twin_normal(
    port_: i64,
    arg: *mut u64,
) {
    wire_example_basic_optional_type_u64_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u8_twin_normal(
    port_: i64,
    arg: *mut u8,
) {
    wire_example_basic_optional_type_u8_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_usize_twin_normal(
    port_: i64,
    arg: *mut usize,
) {
    wire_example_basic_optional_type_usize_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_basic_general_enum_twin_rust_async_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_basic_general_enum_twin_rust_async,
) {
    wire_example_basic_optional_type_basic_general_enum_twin_rust_async_twin_rust_async_impl(
        port_, arg,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_basic_primitive_enum_twin_rust_async_twin_rust_async(
    port_: i64,
    arg: *mut i32,
) {
    wire_example_basic_optional_type_basic_primitive_enum_twin_rust_async_twin_rust_async_impl(
        port_, arg,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_basic_struct_twin_rust_async_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_basic_struct_twin_rust_async,
) {
    wire_example_basic_optional_type_basic_struct_twin_rust_async_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_bool_twin_rust_async(
    port_: i64,
    arg: *mut bool,
) {
    wire_example_basic_optional_type_bool_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_bytes_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_example_basic_optional_type_bytes_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_f32_twin_rust_async(
    port_: i64,
    arg: *mut f32,
) {
    wire_example_basic_optional_type_f32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_f64_twin_rust_async(
    port_: i64,
    arg: *mut f64,
) {
    wire_example_basic_optional_type_f64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i16_twin_rust_async(
    port_: i64,
    arg: *mut i16,
) {
    wire_example_basic_optional_type_i16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i32_twin_rust_async(
    port_: i64,
    arg: *mut i32,
) {
    wire_example_basic_optional_type_i32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i64_twin_rust_async(
    port_: i64,
    arg: *mut i64,
) {
    wire_example_basic_optional_type_i64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i8_twin_rust_async(
    port_: i64,
    arg: *mut i8,
) {
    wire_example_basic_optional_type_i8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_isize_twin_rust_async(
    port_: i64,
    arg: *mut isize,
) {
    wire_example_basic_optional_type_isize_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_string_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_example_basic_optional_type_string_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u16_twin_rust_async(
    port_: i64,
    arg: *mut u16,
) {
    wire_example_basic_optional_type_u16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u32_twin_rust_async(
    port_: i64,
    arg: *mut u32,
) {
    wire_example_basic_optional_type_u32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u64_twin_rust_async(
    port_: i64,
    arg: *mut u64,
) {
    wire_example_basic_optional_type_u64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u8_twin_rust_async(
    port_: i64,
    arg: *mut u8,
) {
    wire_example_basic_optional_type_u8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_usize_twin_rust_async(
    port_: i64,
    arg: *mut usize,
) {
    wire_example_basic_optional_type_usize_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_bool_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_bool_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_bytes_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_bytes_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_f32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_f32_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_f64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_f64_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i16_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_i16_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_i32_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_i64_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i8_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_i8_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_isize_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_isize_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_string_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_string_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u16_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_u16_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_u32_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_u64_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u8_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_u8_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_usize_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_usize_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_basic_general_enum_twin_sse_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_basic_general_enum_twin_sse_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_basic_primitive_enum_twin_sse_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_basic_primitive_enum_twin_sse_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_basic_struct_twin_sse_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_basic_struct_twin_sse_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_bool_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_bool_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_bytes_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_bytes_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_f32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_f32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_f64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_f64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i16_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_i16_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_i32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_i64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i8_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_i8_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_isize_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_isize_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_string_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_string_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u16_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_u16_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_u32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_u64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u8_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_u8_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_usize_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_optional_type_usize_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_basic_general_enum_twin_sync_twin_sync(
    arg: *mut wire_cst_basic_general_enum_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_optional_type_basic_general_enum_twin_sync_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_basic_primitive_enum_twin_sync_twin_sync(
    arg: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_optional_type_basic_primitive_enum_twin_sync_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_basic_struct_twin_sync_twin_sync(
    arg: *mut wire_cst_basic_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_optional_type_basic_struct_twin_sync_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_bool_twin_sync(
    arg: *mut bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_optional_type_bool_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_bytes_twin_sync(
    arg: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_optional_type_bytes_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_f32_twin_sync(
    arg: *mut f32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_optional_type_f32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_f64_twin_sync(
    arg: *mut f64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_optional_type_f64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i16_twin_sync(
    arg: *mut i16,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_optional_type_i16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i32_twin_sync(
    arg: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_optional_type_i32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i64_twin_sync(
    arg: *mut i64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_optional_type_i64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i8_twin_sync(
    arg: *mut i8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_optional_type_i8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_isize_twin_sync(
    arg: *mut isize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_optional_type_isize_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_string_twin_sync(
    arg: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_optional_type_string_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u16_twin_sync(
    arg: *mut u16,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_optional_type_u16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u32_twin_sync(
    arg: *mut u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_optional_type_u32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u64_twin_sync(
    arg: *mut u64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_optional_type_u64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u8_twin_sync(
    arg: *mut u8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_optional_type_u8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_usize_twin_sync(
    arg: *mut usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_optional_type_usize_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_basic_general_enum_twin_sync_sse_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_optional_type_basic_general_enum_twin_sync_sse_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_optional_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_basic_struct_twin_sync_sse_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_optional_type_basic_struct_twin_sync_sse_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_bool_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_optional_type_bool_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_bytes_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_optional_type_bytes_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_f32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_optional_type_f32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_f64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_optional_type_f64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i16_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_optional_type_i16_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_optional_type_i32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_optional_type_i64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_i8_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_optional_type_i8_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_isize_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_optional_type_isize_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_string_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_optional_type_string_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u16_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_optional_type_u16_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_optional_type_u32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_optional_type_u64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_u8_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_optional_type_u8_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_optional_type_usize_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_optional_type_usize_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_basic_general_enum_twin_rust_async_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_basic_general_enum_twin_rust_async,
) {
    wire_example_basic_type_basic_general_enum_twin_rust_async_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_basic_primitive_enum_twin_rust_async_twin_rust_async(
    port_: i64,
    arg: i32,
) {
    wire_example_basic_type_basic_primitive_enum_twin_rust_async_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_basic_struct_twin_rust_async_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_basic_struct_twin_rust_async,
) {
    wire_example_basic_type_basic_struct_twin_rust_async_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_bool_twin_rust_async(
    port_: i64,
    arg: bool,
) {
    wire_example_basic_type_bool_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_bytes_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_example_basic_type_bytes_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_f32_twin_rust_async(
    port_: i64,
    arg: f32,
) {
    wire_example_basic_type_f32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_f64_twin_rust_async(
    port_: i64,
    arg: f64,
) {
    wire_example_basic_type_f64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i16_twin_rust_async(
    port_: i64,
    arg: i16,
) {
    wire_example_basic_type_i16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i32_twin_rust_async(
    port_: i64,
    arg: i32,
) {
    wire_example_basic_type_i32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i64_twin_rust_async(
    port_: i64,
    arg: i64,
) {
    wire_example_basic_type_i64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i8_twin_rust_async(
    port_: i64,
    arg: i8,
) {
    wire_example_basic_type_i8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_isize_twin_rust_async(
    port_: i64,
    arg: isize,
) {
    wire_example_basic_type_isize_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_string_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_example_basic_type_string_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u16_twin_rust_async(
    port_: i64,
    arg: u16,
) {
    wire_example_basic_type_u16_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u32_twin_rust_async(
    port_: i64,
    arg: u32,
) {
    wire_example_basic_type_u32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u64_twin_rust_async(
    port_: i64,
    arg: u64,
) {
    wire_example_basic_type_u64_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u8_twin_rust_async(
    port_: i64,
    arg: u8,
) {
    wire_example_basic_type_u8_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_usize_twin_rust_async(
    port_: i64,
    arg: usize,
) {
    wire_example_basic_type_usize_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_bool_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_bool_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_bytes_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_bytes_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_f32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_f32_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_f64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_f64_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i16_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_i16_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_i32_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_i64_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i8_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_i8_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_isize_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_isize_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_string_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_string_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u16_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_u16_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_u32_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u64_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_u64_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u8_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_u8_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_usize_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_usize_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_basic_general_enum_twin_sse_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_basic_general_enum_twin_sse_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_basic_primitive_enum_twin_sse_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_basic_primitive_enum_twin_sse_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_basic_struct_twin_sse_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_basic_struct_twin_sse_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_bool_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_bool_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_bytes_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_bytes_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_f32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_f32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_f64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_f64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i16_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_i16_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_i32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_i64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i8_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_i8_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_isize_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_isize_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_string_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_string_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u16_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_u16_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_u32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u64_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_u64_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u8_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_u8_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_usize_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_example_basic_type_usize_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_basic_general_enum_twin_sync_twin_sync(
    arg: *mut wire_cst_basic_general_enum_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_type_basic_general_enum_twin_sync_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_basic_primitive_enum_twin_sync_twin_sync(
    arg: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_type_basic_primitive_enum_twin_sync_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_basic_struct_twin_sync_twin_sync(
    arg: *mut wire_cst_basic_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_type_basic_struct_twin_sync_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_bool_twin_sync(
    arg: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_type_bool_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_bytes_twin_sync(
    arg: *mut wire_cst_list_prim_u_8_loose,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_type_bytes_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_f32_twin_sync(
    arg: f32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_type_f32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_f64_twin_sync(
    arg: f64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_type_f64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i16_twin_sync(
    arg: i16,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_type_i16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i32_twin_sync(
    arg: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_type_i32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i64_twin_sync(
    arg: i64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_type_i64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i8_twin_sync(
    arg: i8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_type_i8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_isize_twin_sync(
    arg: isize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_type_isize_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_string_twin_sync(
    arg: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_type_string_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u16_twin_sync(
    arg: u16,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_type_u16_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u32_twin_sync(
    arg: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_type_u32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u64_twin_sync(
    arg: u64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_type_u64_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u8_twin_sync(
    arg: u8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_type_u8_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_usize_twin_sync(
    arg: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_example_basic_type_usize_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_basic_general_enum_twin_sync_sse_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_type_basic_general_enum_twin_sync_sse_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_basic_struct_twin_sync_sse_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_type_basic_struct_twin_sync_sse_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_bool_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_type_bool_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_bytes_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_type_bytes_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_f32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_type_f32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_f64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_type_f64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i16_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_type_i16_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_type_i32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_type_i64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_i8_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_type_i8_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_isize_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_type_isize_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_string_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_type_string_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u16_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_type_u16_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_type_u32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u64_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_type_u64_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_u8_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_type_u8_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_example_basic_type_usize_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_example_basic_type_usize_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_input_json_twin_normal(
    port_: i64,
    raw: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_benchmark_binary_tree_input_json_twin_normal_impl(port_, raw)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_input_protobuf_twin_normal(
    port_: i64,
    raw: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_benchmark_binary_tree_input_protobuf_twin_normal_impl(port_, raw)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_input_twin_normal(
    port_: i64,
    tree: *mut wire_cst_benchmark_binary_tree_twin_normal,
) {
    wire_benchmark_binary_tree_input_twin_normal_impl(port_, tree)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_output_json_twin_normal(
    port_: i64,
    depth: i32,
) {
    wire_benchmark_binary_tree_output_json_twin_normal_impl(port_, depth)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_output_protobuf_twin_normal(
    port_: i64,
    depth: i32,
) {
    wire_benchmark_binary_tree_output_protobuf_twin_normal_impl(port_, depth)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_output_twin_normal(
    port_: i64,
    depth: i32,
) {
    wire_benchmark_binary_tree_output_twin_normal_impl(port_, depth)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_input_json_twin_normal(
    port_: i64,
    raw: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_benchmark_blob_input_json_twin_normal_impl(port_, raw)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_input_protobuf_twin_normal(
    port_: i64,
    raw: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_benchmark_blob_input_protobuf_twin_normal_impl(port_, raw)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_input_twin_normal(
    port_: i64,
    blob: *mut wire_cst_benchmark_blob_twin_normal,
) {
    wire_benchmark_blob_input_twin_normal_impl(port_, blob)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_output_json_twin_normal(
    port_: i64,
    size: i32,
) {
    wire_benchmark_blob_output_json_twin_normal_impl(port_, size)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_output_protobuf_twin_normal(
    port_: i64,
    size: i32,
) {
    wire_benchmark_blob_output_protobuf_twin_normal_impl(port_, size)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_output_twin_normal(
    port_: i64,
    size: i32,
) {
    wire_benchmark_blob_output_twin_normal_impl(port_, size)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_input_bytes_twin_normal(
    port_: i64,
    bytes: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_benchmark_input_bytes_twin_normal_impl(port_, bytes)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_output_bytes_twin_normal(
    port_: i64,
    size: i32,
) {
    wire_benchmark_output_bytes_twin_normal_impl(port_, size)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_void_twin_normal(port_: i64) {
    wire_benchmark_void_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_input_json_twin_rust_async(
    port_: i64,
    raw: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_benchmark_binary_tree_input_json_twin_rust_async_impl(port_, raw)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_input_protobuf_twin_rust_async(
    port_: i64,
    raw: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_benchmark_binary_tree_input_protobuf_twin_rust_async_impl(port_, raw)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_input_twin_rust_async(
    port_: i64,
    tree: *mut wire_cst_benchmark_binary_tree_twin_rust_async,
) {
    wire_benchmark_binary_tree_input_twin_rust_async_impl(port_, tree)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_output_json_twin_rust_async(
    port_: i64,
    depth: i32,
) {
    wire_benchmark_binary_tree_output_json_twin_rust_async_impl(port_, depth)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_output_protobuf_twin_rust_async(
    port_: i64,
    depth: i32,
) {
    wire_benchmark_binary_tree_output_protobuf_twin_rust_async_impl(port_, depth)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_output_twin_rust_async(
    port_: i64,
    depth: i32,
) {
    wire_benchmark_binary_tree_output_twin_rust_async_impl(port_, depth)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_input_json_twin_rust_async(
    port_: i64,
    raw: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_benchmark_blob_input_json_twin_rust_async_impl(port_, raw)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_input_protobuf_twin_rust_async(
    port_: i64,
    raw: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_benchmark_blob_input_protobuf_twin_rust_async_impl(port_, raw)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_input_twin_rust_async(
    port_: i64,
    blob: *mut wire_cst_benchmark_blob_twin_rust_async,
) {
    wire_benchmark_blob_input_twin_rust_async_impl(port_, blob)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_output_json_twin_rust_async(
    port_: i64,
    size: i32,
) {
    wire_benchmark_blob_output_json_twin_rust_async_impl(port_, size)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_output_protobuf_twin_rust_async(
    port_: i64,
    size: i32,
) {
    wire_benchmark_blob_output_protobuf_twin_rust_async_impl(port_, size)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_output_twin_rust_async(
    port_: i64,
    size: i32,
) {
    wire_benchmark_blob_output_twin_rust_async_impl(port_, size)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_input_bytes_twin_rust_async(
    port_: i64,
    bytes: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_benchmark_input_bytes_twin_rust_async_impl(port_, bytes)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_output_bytes_twin_rust_async(
    port_: i64,
    size: i32,
) {
    wire_benchmark_output_bytes_twin_rust_async_impl(port_, size)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_void_twin_rust_async(port_: i64) {
    wire_benchmark_void_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_input_json_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_binary_tree_input_json_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_input_protobuf_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_binary_tree_input_protobuf_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_input_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_binary_tree_input_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_output_json_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_binary_tree_output_json_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_output_protobuf_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_binary_tree_output_protobuf_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_output_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_binary_tree_output_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_input_json_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_blob_input_json_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_input_protobuf_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_blob_input_protobuf_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_input_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_blob_input_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_output_json_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_blob_output_json_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_output_protobuf_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_blob_output_protobuf_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_output_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_blob_output_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_input_bytes_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_input_bytes_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_output_bytes_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_output_bytes_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_void_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_void_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_input_json_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_binary_tree_input_json_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_input_protobuf_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_binary_tree_input_protobuf_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_input_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_binary_tree_input_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_output_json_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_binary_tree_output_json_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_output_protobuf_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_binary_tree_output_protobuf_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_output_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_binary_tree_output_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_input_json_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_blob_input_json_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_input_protobuf_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_blob_input_protobuf_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_input_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_blob_input_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_output_json_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_blob_output_json_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_output_protobuf_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_blob_output_protobuf_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_output_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_blob_output_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_input_bytes_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_input_bytes_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_output_bytes_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_output_bytes_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_void_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_benchmark_void_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_input_json_twin_sync(
    raw: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_benchmark_binary_tree_input_json_twin_sync_impl(raw)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_input_protobuf_twin_sync(
    raw: *mut wire_cst_list_prim_u_8_loose,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_benchmark_binary_tree_input_protobuf_twin_sync_impl(raw)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_input_twin_sync(
    tree: *mut wire_cst_benchmark_binary_tree_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_benchmark_binary_tree_input_twin_sync_impl(tree)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_output_json_twin_sync(
    depth: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_benchmark_binary_tree_output_json_twin_sync_impl(depth)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_output_protobuf_twin_sync(
    depth: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_benchmark_binary_tree_output_protobuf_twin_sync_impl(depth)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_output_twin_sync(
    depth: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_benchmark_binary_tree_output_twin_sync_impl(depth)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_input_json_twin_sync(
    raw: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_benchmark_blob_input_json_twin_sync_impl(raw)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_input_protobuf_twin_sync(
    raw: *mut wire_cst_list_prim_u_8_loose,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_benchmark_blob_input_protobuf_twin_sync_impl(raw)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_input_twin_sync(
    blob: *mut wire_cst_benchmark_blob_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_benchmark_blob_input_twin_sync_impl(blob)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_output_json_twin_sync(
    size: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_benchmark_blob_output_json_twin_sync_impl(size)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_output_protobuf_twin_sync(
    size: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_benchmark_blob_output_protobuf_twin_sync_impl(size)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_output_twin_sync(
    size: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_benchmark_blob_output_twin_sync_impl(size)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_input_bytes_twin_sync(
    bytes: *mut wire_cst_list_prim_u_8_loose,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_benchmark_input_bytes_twin_sync_impl(bytes)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_output_bytes_twin_sync(
    size: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_benchmark_output_bytes_twin_sync_impl(size)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_void_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_benchmark_void_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_input_json_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_binary_tree_input_json_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_input_protobuf_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_binary_tree_input_protobuf_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_input_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_binary_tree_input_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_output_json_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_binary_tree_output_json_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_output_protobuf_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_binary_tree_output_protobuf_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_binary_tree_output_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_binary_tree_output_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_input_json_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_blob_input_json_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_input_protobuf_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_blob_input_protobuf_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_input_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_blob_input_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_output_json_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_blob_output_json_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_output_protobuf_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_blob_output_protobuf_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_blob_output_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_blob_output_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_input_bytes_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_input_bytes_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_output_bytes_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_output_bytes_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_benchmark_void_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_benchmark_void_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_datetime_local_twin_rust_async(
    port_: i64,
    d: i64,
) {
    wire_datetime_local_twin_rust_async_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_datetime_utc_twin_rust_async(
    port_: i64,
    d: i64,
) {
    wire_datetime_utc_twin_rust_async_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_duration_twin_rust_async(port_: i64, d: i64) {
    wire_duration_twin_rust_async_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_durations_twin_rust_async(
    port_: i64,
    durations: *mut wire_cst_list_Chrono_Duration,
    since: i64,
) {
    wire_handle_durations_twin_rust_async_impl(port_, durations, since)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_timestamps_twin_rust_async(
    port_: i64,
    timestamps: *mut wire_cst_list_Chrono_Naive,
    epoch: i64,
) {
    wire_handle_timestamps_twin_rust_async_impl(port_, timestamps, epoch)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_how_long_does_it_take_twin_rust_async(
    port_: i64,
    mine: *mut wire_cst_feature_chrono_twin_rust_async,
) {
    wire_how_long_does_it_take_twin_rust_async_impl(port_, mine)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_naivedatetime_twin_rust_async(
    port_: i64,
    d: i64,
) {
    wire_naivedatetime_twin_rust_async_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_optional_empty_datetime_utc_twin_rust_async(
    port_: i64,
    d: *mut i64,
) {
    wire_optional_empty_datetime_utc_twin_rust_async_impl(port_, d)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_chrono_twin_rust_async(port_: i64) {
    wire_test_chrono_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_precise_chrono_twin_rust_async(
    port_: i64,
) {
    wire_test_precise_chrono_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_datetime_local_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_datetime_local_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_datetime_utc_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_datetime_utc_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_duration_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_duration_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_durations_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_durations_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_timestamps_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_timestamps_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_how_long_does_it_take_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_how_long_does_it_take_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_naivedatetime_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_naivedatetime_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_optional_empty_datetime_utc_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_optional_empty_datetime_utc_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_chrono_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_chrono_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_precise_chrono_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_precise_chrono_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_datetime_local_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_datetime_local_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_datetime_utc_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_datetime_utc_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_duration_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_duration_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_durations_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_durations_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_timestamps_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_timestamps_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_how_long_does_it_take_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_how_long_does_it_take_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_naivedatetime_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_naivedatetime_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_optional_empty_datetime_utc_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_optional_empty_datetime_utc_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_chrono_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_chrono_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_precise_chrono_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_precise_chrono_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_datetime_local_twin_sync(
    d: i64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_datetime_local_twin_sync_impl(d)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_datetime_utc_twin_sync(
    d: i64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_datetime_utc_twin_sync_impl(d)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_duration_twin_sync(
    d: i64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_duration_twin_sync_impl(d)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_durations_twin_sync(
    durations: *mut wire_cst_list_Chrono_Duration,
    since: i64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_durations_twin_sync_impl(durations, since)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_timestamps_twin_sync(
    timestamps: *mut wire_cst_list_Chrono_Naive,
    epoch: i64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_timestamps_twin_sync_impl(timestamps, epoch)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_how_long_does_it_take_twin_sync(
    mine: *mut wire_cst_feature_chrono_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_how_long_does_it_take_twin_sync_impl(mine)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_naivedatetime_twin_sync(
    d: i64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_naivedatetime_twin_sync_impl(d)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_optional_empty_datetime_utc_twin_sync(
    d: *mut i64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_optional_empty_datetime_utc_twin_sync_impl(d)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_chrono_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_chrono_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_precise_chrono_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_precise_chrono_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_datetime_local_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_datetime_local_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_datetime_utc_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_datetime_utc_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_duration_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_duration_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_durations_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_durations_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_timestamps_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_timestamps_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_how_long_does_it_take_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_how_long_does_it_take_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_naivedatetime_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_naivedatetime_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_optional_empty_datetime_utc_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_optional_empty_datetime_utc_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_chrono_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_chrono_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_precise_chrono_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_precise_chrono_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_StructWithCommentsTwinRustAsync_instance_method_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_struct_with_comments_twin_rust_async,
) {
    wire_StructWithCommentsTwinRustAsync_instance_method_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_StructWithCommentsTwinRustAsync_static_method_twin_rust_async(
    port_: i64,
) {
    wire_StructWithCommentsTwinRustAsync_static_method_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_function_with_comments_slash_star_star_twin_rust_async(
    port_: i64,
) {
    wire_function_with_comments_slash_star_star_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_function_with_comments_triple_slash_multi_line_twin_rust_async(
    port_: i64,
) {
    wire_function_with_comments_triple_slash_multi_line_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_function_with_comments_triple_slash_single_line_twin_rust_async(
    port_: i64,
) {
    wire_function_with_comments_triple_slash_single_line_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_StructWithCommentsTwinRustAsyncSse_instance_method_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_StructWithCommentsTwinRustAsyncSse_instance_method_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_StructWithCommentsTwinRustAsyncSse_static_method_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_StructWithCommentsTwinRustAsyncSse_static_method_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_function_with_comments_slash_star_star_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_function_with_comments_slash_star_star_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_function_with_comments_triple_slash_multi_line_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_function_with_comments_triple_slash_multi_line_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_function_with_comments_triple_slash_single_line_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_function_with_comments_triple_slash_single_line_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_StructWithCommentsTwinSse_instance_method_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_StructWithCommentsTwinSse_instance_method_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_StructWithCommentsTwinSse_static_method_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_StructWithCommentsTwinSse_static_method_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_function_with_comments_slash_star_star_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_function_with_comments_slash_star_star_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_function_with_comments_triple_slash_multi_line_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_function_with_comments_triple_slash_multi_line_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_function_with_comments_triple_slash_single_line_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_function_with_comments_triple_slash_single_line_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_StructWithCommentsTwinSync_instance_method_twin_sync(
    that: *mut wire_cst_struct_with_comments_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_StructWithCommentsTwinSync_instance_method_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_StructWithCommentsTwinSync_static_method_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_StructWithCommentsTwinSync_static_method_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_function_with_comments_slash_star_star_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_function_with_comments_slash_star_star_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_function_with_comments_triple_slash_multi_line_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_function_with_comments_triple_slash_multi_line_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_function_with_comments_triple_slash_single_line_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_function_with_comments_triple_slash_single_line_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_StructWithCommentsTwinSyncSse_instance_method_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_StructWithCommentsTwinSyncSse_instance_method_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_StructWithCommentsTwinSyncSse_static_method_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_StructWithCommentsTwinSyncSse_static_method_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_function_with_comments_slash_star_star_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_function_with_comments_slash_star_star_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_function_with_comments_triple_slash_multi_line_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_function_with_comments_triple_slash_multi_line_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_function_with_comments_triple_slash_single_line_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_function_with_comments_triple_slash_single_line_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_dart_dynamic_twin_rust_async(
    port_: i64,
) {
    wire_return_dart_dynamic_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_dart_dynamic_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_dart_dynamic_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_loopback_twin_rust_async(
    port_: i64,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_loopback_twin_rust_async_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_multi_times_twin_rust_async(
    port_: i64,
    callback: *const std::ffi::c_void,
    num_times: i32,
) {
    wire_rust_call_dart_multi_times_twin_rust_async_impl(port_, callback, num_times)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_one_arg_twin_rust_async(
    port_: i64,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_one_arg_twin_rust_async_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_return_twin_rust_async(
    port_: i64,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_return_twin_rust_async_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_simple_twin_rust_async(
    port_: i64,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_simple_twin_rust_async_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_two_args_twin_rust_async(
    port_: i64,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_two_args_twin_rust_async_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_with_dart_opaque_arg_twin_rust_async(
    port_: i64,
    input: *const std::ffi::c_void,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_with_dart_opaque_arg_twin_rust_async_impl(port_, input, callback)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_with_dart_opaque_result_twin_rust_async(
    port_: i64,
    callback: *const std::ffi::c_void,
) {
    wire_rust_call_dart_with_dart_opaque_result_twin_rust_async_impl(port_, callback)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_loopback_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_call_dart_loopback_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_multi_times_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_call_dart_multi_times_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_one_arg_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_call_dart_one_arg_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_return_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_call_dart_return_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_simple_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_call_dart_simple_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_two_args_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_call_dart_two_args_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_with_dart_opaque_arg_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_call_dart_with_dart_opaque_arg_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_with_dart_opaque_result_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_call_dart_with_dart_opaque_result_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_loopback_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_call_dart_loopback_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_multi_times_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_call_dart_multi_times_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_one_arg_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_call_dart_one_arg_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_return_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_call_dart_return_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_simple_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_call_dart_simple_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_two_args_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_call_dart_two_args_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_with_dart_opaque_arg_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_call_dart_with_dart_opaque_arg_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_call_dart_with_dart_opaque_result_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_call_dart_with_dart_opaque_result_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_accept_dart_opaque_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_accept_dart_opaque_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_loopback_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_loopback_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_option_dart_opaque_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_option_dart_opaque_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_option_loopback_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_option_loopback_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_unwrap_dart_opaque_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_unwrap_dart_opaque_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_async_accept_dart_opaque_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_async_accept_dart_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_clone_dart_opaque_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_clone_dart_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_enum_dart_opaque_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_create_enum_dart_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_nested_dart_opaque_twin_rust_async(
    port_: i64,
    opaque1: *const std::ffi::c_void,
    opaque2: *const std::ffi::c_void,
) {
    wire_create_nested_dart_opaque_twin_rust_async_impl(port_, opaque1, opaque2)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_drop_static_dart_opaque_twin_rust_async(
    port_: i64,
    id: i32,
) {
    wire_drop_static_dart_opaque_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_enum_dart_opaque_twin_rust_async(
    port_: i64,
    opaque: *mut wire_cst_enum_dart_opaque_twin_rust_async,
) {
    wire_get_enum_dart_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_nested_dart_opaque_twin_rust_async(
    port_: i64,
    opaque: *mut wire_cst_dart_opaque_nested_twin_rust_async,
) {
    wire_get_nested_dart_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_array_get_twin_rust_async(
    port_: i64,
    opaque: *mut wire_cst_list_DartOpaque,
) {
    wire_loop_back_array_get_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_array_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_loop_back_array_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_option_get_twin_rust_async(
    port_: i64,
    opaque: *mut *const std::ffi::c_void,
) {
    wire_loop_back_option_get_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_option_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_loop_back_option_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_loop_back_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_vec_get_twin_rust_async(
    port_: i64,
    opaque: *mut wire_cst_list_DartOpaque,
) {
    wire_loop_back_vec_get_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_vec_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_loop_back_vec_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_panic_unwrap_dart_opaque_twin_rust_async(
    port_: i64,
    opaque: *const std::ffi::c_void,
) {
    wire_panic_unwrap_dart_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_set_static_dart_opaque_twin_rust_async(
    port_: i64,
    id: i32,
    opaque: *const std::ffi::c_void,
) {
    wire_set_static_dart_opaque_twin_rust_async_impl(port_, id, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_async_accept_dart_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_async_accept_dart_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_clone_dart_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_clone_dart_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_enum_dart_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_enum_dart_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_nested_dart_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_nested_dart_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_drop_static_dart_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_drop_static_dart_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_enum_dart_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_enum_dart_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_nested_dart_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_nested_dart_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_array_get_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_array_get_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_array_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_array_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_option_get_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_option_get_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_option_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_option_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_vec_get_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_vec_get_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_vec_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_vec_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_panic_unwrap_dart_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_panic_unwrap_dart_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_set_static_dart_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_set_static_dart_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_async_accept_dart_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_async_accept_dart_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_clone_dart_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_clone_dart_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_enum_dart_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_enum_dart_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_nested_dart_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_nested_dart_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_drop_static_dart_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_drop_static_dart_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_enum_dart_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_enum_dart_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_nested_dart_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_nested_dart_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_array_get_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_array_get_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_array_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_array_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_option_get_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_option_get_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_option_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_option_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_vec_get_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_vec_get_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_vec_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_loop_back_vec_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_panic_unwrap_dart_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_panic_unwrap_dart_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_set_static_dart_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_set_static_dart_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_async_accept_dart_opaque_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_async_accept_dart_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_clone_dart_opaque_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_clone_dart_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_enum_dart_opaque_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_create_enum_dart_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_nested_dart_opaque_twin_sync(
    opaque1: *const std::ffi::c_void,
    opaque2: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_create_nested_dart_opaque_twin_sync_impl(opaque1, opaque2)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_drop_static_dart_opaque_twin_sync(
    id: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_drop_static_dart_opaque_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_enum_dart_opaque_twin_sync(
    opaque: *mut wire_cst_enum_dart_opaque_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_enum_dart_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_nested_dart_opaque_twin_sync(
    opaque: *mut wire_cst_dart_opaque_nested_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_nested_dart_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_array_get_twin_sync(
    opaque: *mut wire_cst_list_DartOpaque,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_loop_back_array_get_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_array_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_loop_back_array_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_option_get_twin_sync(
    opaque: *mut *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_loop_back_option_get_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_option_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_loop_back_option_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_loop_back_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_vec_get_twin_sync(
    opaque: *mut wire_cst_list_DartOpaque,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_loop_back_vec_get_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_vec_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_loop_back_vec_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_panic_unwrap_dart_opaque_twin_sync(
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_panic_unwrap_dart_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_set_static_dart_opaque_twin_sync(
    id: i32,
    opaque: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_set_static_dart_opaque_twin_sync_impl(id, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_async_accept_dart_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_async_accept_dart_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_clone_dart_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_clone_dart_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_enum_dart_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_create_enum_dart_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_nested_dart_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_create_nested_dart_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_drop_static_dart_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_drop_static_dart_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_enum_dart_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_get_enum_dart_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_nested_dart_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_get_nested_dart_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_array_get_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_loop_back_array_get_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_array_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_loop_back_array_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_option_get_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_loop_back_option_get_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_option_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_loop_back_option_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_loop_back_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_vec_get_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_loop_back_vec_get_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_loop_back_vec_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_loop_back_vec_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_panic_unwrap_dart_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_panic_unwrap_dart_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_set_static_dart_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_set_static_dart_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinRustAsync_create_stream_twin_rust_async(
    port_: i64,
    that: usize,
) {
    wire_DroppableTwinRustAsync_create_stream_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinRustAsync_get_drop_count_twin_rust_async(
    port_: i64,
) {
    wire_DroppableTwinRustAsync_get_drop_count_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinRustAsync_new_twin_rust_async(
    port_: i64,
) {
    wire_DroppableTwinRustAsync_new_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinRustAsync_simple_method_twin_rust_async(
    port_: i64,
    that: usize,
) {
    wire_DroppableTwinRustAsync_simple_method_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinRustAsyncSse_create_stream_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_DroppableTwinRustAsyncSse_create_stream_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinRustAsyncSse_get_drop_count_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_DroppableTwinRustAsyncSse_get_drop_count_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinRustAsyncSse_new_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_DroppableTwinRustAsyncSse_new_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinRustAsyncSse_simple_method_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_DroppableTwinRustAsyncSse_simple_method_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinSse_create_stream_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_DroppableTwinSse_create_stream_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinSse_get_drop_count_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_DroppableTwinSse_get_drop_count_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinSse_new_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_DroppableTwinSse_new_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinSse_simple_method_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_DroppableTwinSse_simple_method_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinSync_create_stream_twin_sync(
    port_: i64,
    that: usize,
) {
    wire_DroppableTwinSync_create_stream_twin_sync_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinSync_get_drop_count_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DroppableTwinSync_get_drop_count_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinSync_new_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DroppableTwinSync_new_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinSync_simple_method_twin_sync(
    that: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DroppableTwinSync_simple_method_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinSyncSse_create_stream_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_DroppableTwinSyncSse_create_stream_twin_sync_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinSyncSse_get_drop_count_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_DroppableTwinSyncSse_get_drop_count_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinSyncSse_new_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_DroppableTwinSyncSse_new_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_DroppableTwinSyncSse_simple_method_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_DroppableTwinSyncSse_simple_method_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_simple_twin_rust_async(
    port_: i64,
    arg: i32,
) {
    wire_func_enum_simple_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_discriminant_twin_rust_async(
    port_: i64,
    arg: i32,
) {
    wire_func_enum_with_discriminant_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_item_mixed_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_enum_with_item_mixed_twin_rust_async,
) {
    wire_func_enum_with_item_mixed_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_item_struct_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_enum_with_item_struct_twin_rust_async,
) {
    wire_func_enum_with_item_struct_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_item_tuple_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_enum_with_item_tuple_twin_rust_async,
) {
    wire_func_enum_with_item_tuple_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_enum_parameter_twin_rust_async(
    port_: i64,
    weekday: i32,
) {
    wire_handle_enum_parameter_twin_rust_async_impl(port_, weekday)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_enum_struct_twin_rust_async(
    port_: i64,
    val: *mut wire_cst_kitchen_sink_twin_rust_async,
) {
    wire_handle_enum_struct_twin_rust_async_impl(port_, val)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_return_enum_twin_rust_async(
    port_: i64,
    input: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_handle_return_enum_twin_rust_async_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_multiply_by_ten_twin_rust_async(
    port_: i64,
    measure: *mut wire_cst_measure_twin_rust_async,
) {
    wire_multiply_by_ten_twin_rust_async_impl(port_, measure)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_print_note_twin_rust_async(
    port_: i64,
    note: *mut wire_cst_note_twin_rust_async,
) {
    wire_print_note_twin_rust_async_impl(port_, note)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_simple_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_enum_simple_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_discriminant_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_enum_with_discriminant_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_item_mixed_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_enum_with_item_mixed_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_item_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_enum_with_item_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_item_tuple_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_enum_with_item_tuple_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_enum_parameter_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_enum_parameter_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_enum_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_enum_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_return_enum_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_return_enum_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_multiply_by_ten_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_multiply_by_ten_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_print_note_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_print_note_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_simple_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_enum_simple_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_discriminant_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_enum_with_discriminant_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_item_mixed_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_enum_with_item_mixed_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_item_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_enum_with_item_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_item_tuple_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_enum_with_item_tuple_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_enum_parameter_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_enum_parameter_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_enum_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_enum_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_return_enum_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_return_enum_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_multiply_by_ten_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_multiply_by_ten_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_print_note_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_print_note_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_simple_twin_sync(
    arg: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_enum_simple_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_discriminant_twin_sync(
    arg: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_enum_with_discriminant_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_item_mixed_twin_sync(
    arg: *mut wire_cst_enum_with_item_mixed_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_enum_with_item_mixed_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_item_struct_twin_sync(
    arg: *mut wire_cst_enum_with_item_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_enum_with_item_struct_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_item_tuple_twin_sync(
    arg: *mut wire_cst_enum_with_item_tuple_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_enum_with_item_tuple_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_enum_parameter_twin_sync(
    weekday: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_enum_parameter_twin_sync_impl(weekday)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_enum_struct_twin_sync(
    val: *mut wire_cst_kitchen_sink_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_enum_struct_twin_sync_impl(val)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_return_enum_twin_sync(
    input: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_return_enum_twin_sync_impl(input)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_multiply_by_ten_twin_sync(
    measure: *mut wire_cst_measure_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_multiply_by_ten_twin_sync_impl(measure)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_print_note_twin_sync(
    note: *mut wire_cst_note_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_print_note_twin_sync_impl(note)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_simple_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_enum_simple_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_discriminant_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_enum_with_discriminant_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_item_mixed_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_enum_with_item_mixed_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_item_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_enum_with_item_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_enum_with_item_tuple_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_enum_with_item_tuple_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_enum_parameter_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_enum_parameter_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_enum_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_enum_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_return_enum_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_return_enum_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_multiply_by_ten_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_multiply_by_ten_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_print_note_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_print_note_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_EventTwinRustAsync_as_string_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_event_twin_rust_async,
) {
    wire_EventTwinRustAsync_as_string_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_close_event_listener_twin_rust_async(
    port_: i64,
) {
    wire_close_event_listener_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_event_twin_rust_async(
    port_: i64,
    address: *mut wire_cst_list_prim_u_8_strict,
    payload: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_create_event_twin_rust_async_impl(port_, address, payload)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_register_event_listener_twin_rust_async(
    port_: i64,
) {
    wire_register_event_listener_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_EventTwinRustAsyncSse_as_string_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_EventTwinRustAsyncSse_as_string_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_close_event_listener_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_close_event_listener_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_event_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_event_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_register_event_listener_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_register_event_listener_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_EventTwinSse_as_string_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_EventTwinSse_as_string_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_close_event_listener_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_close_event_listener_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_event_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_event_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_register_event_listener_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_register_event_listener_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinRustAsync_new_twin_rust_async(
    port_: i64,
    message: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_CustomStructTwinRustAsync_new_twin_rust_async_impl(port_, message)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_error_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_custom_struct_twin_rust_async,
) {
    wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_error_twin_rust_async_impl(
        port_, that,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_ok_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_custom_struct_twin_rust_async,
) {
    wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_ok_twin_rust_async_impl(
        port_, that,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinRustAsync_static_return_custom_struct_error_twin_rust_async(
    port_: i64,
) {
    wire_CustomStructTwinRustAsync_static_return_custom_struct_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinRustAsync_static_return_custom_struct_ok_twin_rust_async(
    port_: i64,
) {
    wire_CustomStructTwinRustAsync_static_return_custom_struct_ok_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinRustAsync_new_twin_rust_async(
    port_: i64,
    value: u32,
) {
    wire_SomeStructTwinRustAsync_new_twin_rust_async_impl(port_, value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinRustAsync_non_static_return_err_custom_error_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_some_struct_twin_rust_async,
) {
    wire_SomeStructTwinRustAsync_non_static_return_err_custom_error_twin_rust_async_impl(
        port_, that,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinRustAsync_non_static_return_ok_custom_error_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_some_struct_twin_rust_async,
) {
    wire_SomeStructTwinRustAsync_non_static_return_ok_custom_error_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinRustAsync_static_return_err_custom_error_twin_rust_async(
    port_: i64,
) {
    wire_SomeStructTwinRustAsync_static_return_err_custom_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinRustAsync_static_return_ok_custom_error_twin_rust_async(
    port_: i64,
) {
    wire_SomeStructTwinRustAsync_static_return_ok_custom_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_enum_error_panic_twin_rust_async(
    port_: i64,
) {
    wire_custom_enum_error_panic_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_enum_error_return_error_twin_rust_async(
    port_: i64,
) {
    wire_custom_enum_error_return_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_enum_error_return_ok_twin_rust_async(
    port_: i64,
    arg: u32,
) {
    wire_custom_enum_error_return_ok_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_nested_error_return_error_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_custom_nested_error_outer_twin_rust_async,
) {
    wire_custom_nested_error_return_error_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_struct_error_return_error_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_custom_struct_error_twin_rust_async,
) {
    wire_custom_struct_error_return_error_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_return_error_twin_rust_async(port_: i64) {
    wire_func_return_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_type_fallible_panic_twin_rust_async(
    port_: i64,
) {
    wire_func_type_fallible_panic_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_type_infallible_panic_twin_rust_async(
    port_: i64,
) {
    wire_func_type_infallible_panic_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_panic_with_custom_result_twin_rust_async(
    port_: i64,
) {
    wire_panic_with_custom_result_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_nested_error_1_twin_rust_async(
    port_: i64,
) {
    wire_return_custom_nested_error_1_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_nested_error_1_variant1_twin_rust_async(
    port_: i64,
) {
    wire_return_custom_nested_error_1_variant1_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_nested_error_2_twin_rust_async(
    port_: i64,
) {
    wire_return_custom_nested_error_2_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_struct_error_twin_rust_async(
    port_: i64,
) {
    wire_return_custom_struct_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_struct_ok_twin_rust_async(
    port_: i64,
) {
    wire_return_custom_struct_ok_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_err_custom_error_twin_rust_async(
    port_: i64,
) {
    wire_return_err_custom_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_error_variant_twin_rust_async(
    port_: i64,
    variant: u32,
) {
    wire_return_error_variant_twin_rust_async_impl(port_, variant)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_ok_custom_error_twin_rust_async(
    port_: i64,
) {
    wire_return_ok_custom_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_stream_sink_throw_anyhow_twin_rust_async(
    port_: i64,
) {
    wire_stream_sink_throw_anyhow_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_throw_anyhow_twin_rust_async(port_: i64) {
    wire_throw_anyhow_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinRustAsyncSse_new_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinRustAsyncSse_new_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_error_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_ok_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_ok_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinRustAsyncSse_static_return_custom_struct_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinRustAsyncSse_static_return_custom_struct_error_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinRustAsyncSse_static_return_custom_struct_ok_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinRustAsyncSse_static_return_custom_struct_ok_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinRustAsyncSse_new_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinRustAsyncSse_new_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinRustAsyncSse_non_static_return_err_custom_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinRustAsyncSse_non_static_return_err_custom_error_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinRustAsyncSse_non_static_return_ok_custom_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinRustAsyncSse_non_static_return_ok_custom_error_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinRustAsyncSse_static_return_err_custom_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinRustAsyncSse_static_return_err_custom_error_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinRustAsyncSse_static_return_ok_custom_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinRustAsyncSse_static_return_ok_custom_error_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_enum_error_panic_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_enum_error_panic_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_enum_error_return_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_enum_error_return_error_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_enum_error_return_ok_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_enum_error_return_ok_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_nested_error_return_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_nested_error_return_error_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_struct_error_return_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_struct_error_return_error_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_return_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_return_error_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_type_fallible_panic_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_type_fallible_panic_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_type_infallible_panic_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_type_infallible_panic_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_panic_with_custom_result_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_panic_with_custom_result_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_nested_error_1_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_nested_error_1_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_nested_error_1_variant1_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_nested_error_1_variant1_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_nested_error_2_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_nested_error_2_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_struct_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_struct_error_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_struct_ok_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_struct_ok_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_err_custom_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_err_custom_error_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_error_variant_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_error_variant_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_ok_custom_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_ok_custom_error_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_stream_sink_throw_anyhow_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_stream_sink_throw_anyhow_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_throw_anyhow_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_throw_anyhow_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinSse_new_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinSse_new_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinSse_nonstatic_return_custom_struct_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinSse_nonstatic_return_custom_struct_error_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinSse_nonstatic_return_custom_struct_ok_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinSse_nonstatic_return_custom_struct_ok_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinSse_static_return_custom_struct_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinSse_static_return_custom_struct_error_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinSse_static_return_custom_struct_ok_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_CustomStructTwinSse_static_return_custom_struct_ok_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinSse_new_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinSse_new_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinSse_non_static_return_err_custom_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinSse_non_static_return_err_custom_error_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinSse_non_static_return_ok_custom_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinSse_non_static_return_ok_custom_error_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinSse_static_return_err_custom_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinSse_static_return_err_custom_error_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinSse_static_return_ok_custom_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SomeStructTwinSse_static_return_ok_custom_error_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_enum_error_panic_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_enum_error_panic_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_enum_error_return_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_enum_error_return_error_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_enum_error_return_ok_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_enum_error_return_ok_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_nested_error_return_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_nested_error_return_error_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_struct_error_return_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_custom_struct_error_return_error_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_return_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_return_error_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_type_fallible_panic_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_type_fallible_panic_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_type_infallible_panic_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_type_infallible_panic_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_panic_with_custom_result_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_panic_with_custom_result_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_nested_error_1_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_nested_error_1_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_nested_error_1_variant1_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_nested_error_1_variant1_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_nested_error_2_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_nested_error_2_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_struct_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_struct_error_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_struct_ok_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_custom_struct_ok_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_err_custom_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_err_custom_error_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_error_variant_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_error_variant_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_ok_custom_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_return_ok_custom_error_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_stream_sink_throw_anyhow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_stream_sink_throw_anyhow_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_throw_anyhow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_throw_anyhow_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinSync_new_twin_sync(
    message: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_CustomStructTwinSync_new_twin_sync_impl(message)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinSync_nonstatic_return_custom_struct_error_twin_sync(
    that: *mut wire_cst_custom_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_CustomStructTwinSync_nonstatic_return_custom_struct_error_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinSync_nonstatic_return_custom_struct_ok_twin_sync(
    that: *mut wire_cst_custom_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_CustomStructTwinSync_nonstatic_return_custom_struct_ok_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinSync_static_return_custom_struct_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_CustomStructTwinSync_static_return_custom_struct_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinSync_static_return_custom_struct_ok_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_CustomStructTwinSync_static_return_custom_struct_ok_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinSync_new_twin_sync(
    value: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_SomeStructTwinSync_new_twin_sync_impl(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinSync_non_static_return_err_custom_error_twin_sync(
    that: *mut wire_cst_some_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_SomeStructTwinSync_non_static_return_err_custom_error_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinSync_non_static_return_ok_custom_error_twin_sync(
    that: *mut wire_cst_some_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_SomeStructTwinSync_non_static_return_ok_custom_error_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinSync_static_return_err_custom_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_SomeStructTwinSync_static_return_err_custom_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinSync_static_return_ok_custom_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_SomeStructTwinSync_static_return_ok_custom_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_enum_error_panic_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_custom_enum_error_panic_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_enum_error_return_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_custom_enum_error_return_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_enum_error_return_ok_twin_sync(
    arg: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_custom_enum_error_return_ok_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_nested_error_return_error_twin_sync(
    arg: *mut wire_cst_custom_nested_error_outer_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_custom_nested_error_return_error_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_struct_error_return_error_twin_sync(
    arg: *mut wire_cst_custom_struct_error_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_custom_struct_error_return_error_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_return_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_return_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_type_fallible_panic_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_type_fallible_panic_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_type_infallible_panic_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_type_infallible_panic_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_panic_with_custom_result_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_panic_with_custom_result_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_nested_error_1_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_custom_nested_error_1_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_nested_error_1_variant1_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_custom_nested_error_1_variant1_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_nested_error_2_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_custom_nested_error_2_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_struct_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_custom_struct_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_struct_ok_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_custom_struct_ok_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_err_custom_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_err_custom_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_error_variant_twin_sync(
    variant: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_error_variant_twin_sync_impl(variant)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_ok_custom_error_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_return_ok_custom_error_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_stream_sink_throw_anyhow_twin_sync(port_: i64) {
    wire_stream_sink_throw_anyhow_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_throw_anyhow_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_throw_anyhow_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinSyncSse_new_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_CustomStructTwinSyncSse_new_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinSyncSse_nonstatic_return_custom_struct_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_CustomStructTwinSyncSse_nonstatic_return_custom_struct_error_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinSyncSse_nonstatic_return_custom_struct_ok_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_CustomStructTwinSyncSse_nonstatic_return_custom_struct_ok_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinSyncSse_static_return_custom_struct_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_CustomStructTwinSyncSse_static_return_custom_struct_error_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_CustomStructTwinSyncSse_static_return_custom_struct_ok_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_CustomStructTwinSyncSse_static_return_custom_struct_ok_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinSyncSse_new_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_SomeStructTwinSyncSse_new_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinSyncSse_non_static_return_err_custom_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_SomeStructTwinSyncSse_non_static_return_err_custom_error_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinSyncSse_non_static_return_ok_custom_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_SomeStructTwinSyncSse_non_static_return_ok_custom_error_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinSyncSse_static_return_err_custom_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_SomeStructTwinSyncSse_static_return_err_custom_error_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SomeStructTwinSyncSse_static_return_ok_custom_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_SomeStructTwinSyncSse_static_return_ok_custom_error_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_enum_error_panic_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_custom_enum_error_panic_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_enum_error_return_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_custom_enum_error_return_error_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_enum_error_return_ok_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_custom_enum_error_return_ok_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_nested_error_return_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_custom_nested_error_return_error_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_custom_struct_error_return_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_custom_struct_error_return_error_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_return_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_return_error_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_type_fallible_panic_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_type_fallible_panic_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_type_infallible_panic_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_type_infallible_panic_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_panic_with_custom_result_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_panic_with_custom_result_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_nested_error_1_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_custom_nested_error_1_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_nested_error_1_variant1_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_custom_nested_error_1_variant1_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_nested_error_2_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_custom_nested_error_2_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_struct_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_custom_struct_error_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_custom_struct_ok_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_custom_struct_ok_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_err_custom_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_err_custom_error_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_error_variant_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_error_variant_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_return_ok_custom_error_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_return_ok_custom_error_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_stream_sink_throw_anyhow_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_stream_sink_throw_anyhow_twin_sync_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_throw_anyhow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_throw_anyhow_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_call_new_module_system_twin_rust_async(
    port_: i64,
) {
    wire_call_new_module_system_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_call_old_module_system_twin_rust_async(
    port_: i64,
) {
    wire_call_old_module_system_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_imported_enum_twin_rust_async(
    port_: i64,
    my_enum: i32,
) {
    wire_use_imported_enum_twin_rust_async_impl(port_, my_enum)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_imported_struct_twin_rust_async(
    port_: i64,
    my_struct: *mut wire_cst_my_struct,
) {
    wire_use_imported_struct_twin_rust_async_impl(port_, my_struct)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_call_new_module_system_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_call_new_module_system_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_call_old_module_system_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_call_old_module_system_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_imported_enum_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_use_imported_enum_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_imported_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_use_imported_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_call_new_module_system_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_call_new_module_system_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_call_old_module_system_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_call_old_module_system_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_imported_enum_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_use_imported_enum_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_imported_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_use_imported_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_call_new_module_system_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_call_new_module_system_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_call_old_module_system_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_call_old_module_system_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_imported_enum_twin_sync(
    my_enum: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_use_imported_enum_twin_sync_impl(my_enum)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_imported_struct_twin_sync(
    my_struct: *mut wire_cst_my_struct,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_use_imported_struct_twin_sync_impl(my_struct)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_call_new_module_system_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_call_new_module_system_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_call_old_module_system_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_call_old_module_system_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_imported_enum_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_use_imported_enum_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_use_imported_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_use_imported_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_i32_i32_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_i_32_i_32,
) {
    wire_func_hash_map_i32_i32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_bytes_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_string_list_prim_u_8_strict,
) {
    wire_func_hash_map_string_bytes_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_complex_enum_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_string_kitchen_sink_twin_rust_async,
) {
    wire_func_hash_map_string_complex_enum_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_simple_enum_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_string_enum_simple_twin_rust_async,
) {
    wire_func_hash_map_string_simple_enum_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_string_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_string_string,
) {
    wire_func_hash_map_string_string_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_struct_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_record_string_my_size,
) {
    wire_func_hash_map_string_struct_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_set_i32_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_prim_i_32_strict,
) {
    wire_func_hash_set_i32_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_set_string_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_String,
) {
    wire_func_hash_set_string_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_i32_i32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_hash_map_i32_i32_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_bytes_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_hash_map_string_bytes_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_complex_enum_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_hash_map_string_complex_enum_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_simple_enum_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_hash_map_string_simple_enum_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_string_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_hash_map_string_string_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_hash_map_string_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_set_i32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_hash_set_i32_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_set_string_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_hash_set_string_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_i32_i32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_hash_map_i32_i32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_bytes_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_hash_map_string_bytes_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_complex_enum_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_hash_map_string_complex_enum_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_simple_enum_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_hash_map_string_simple_enum_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_string_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_hash_map_string_string_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_hash_map_string_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_set_i32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_hash_set_i32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_set_string_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_hash_set_string_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_i32_i32_twin_sync(
    arg: *mut wire_cst_list_record_i_32_i_32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_hash_map_i32_i32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_bytes_twin_sync(
    arg: *mut wire_cst_list_record_string_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_hash_map_string_bytes_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_complex_enum_twin_sync(
    arg: *mut wire_cst_list_record_string_kitchen_sink_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_hash_map_string_complex_enum_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_simple_enum_twin_sync(
    arg: *mut wire_cst_list_record_string_enum_simple_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_hash_map_string_simple_enum_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_string_twin_sync(
    arg: *mut wire_cst_list_record_string_string,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_hash_map_string_string_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_struct_twin_sync(
    arg: *mut wire_cst_list_record_string_my_size,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_hash_map_string_struct_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_set_i32_twin_sync(
    arg: *mut wire_cst_list_prim_i_32_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_hash_set_i32_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_set_string_twin_sync(
    arg: *mut wire_cst_list_String,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_hash_set_string_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_i32_i32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_hash_map_i32_i32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_bytes_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_hash_map_string_bytes_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_complex_enum_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_hash_map_string_complex_enum_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_simple_enum_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_hash_map_string_simple_enum_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_string_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_hash_map_string_string_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_map_string_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_hash_map_string_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_set_i32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_hash_set_i32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_hash_set_string_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_hash_set_string_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinRustAsync_concatenate_static_twin_rust_async(
    port_: i64,
    a: *mut wire_cst_list_prim_u_8_strict,
    b: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_ConcatenateWithTwinRustAsync_concatenate_static_twin_rust_async_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinRustAsync_concatenate_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_rust_async,
    b: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_ConcatenateWithTwinRustAsync_concatenate_twin_rust_async_impl(port_, that, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_single_arg_twin_rust_async(
    port_: i64,
) {
    wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_single_arg_twin_rust_async_impl(
        port_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_twin_rust_async(
    port_: i64,
    key: u32,
    max: u32,
) {
    wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_twin_rust_async_impl(
        port_, key, max,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_at_1_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_rust_async,
) {
    wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_at_1_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_rust_async,
    key: u32,
    max: u32,
) {
    wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_twin_rust_async_impl(
        port_, that, key, max,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinRustAsync_new_twin_rust_async(
    port_: i64,
    a: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_ConcatenateWithTwinRustAsync_new_twin_rust_async_impl(port_, a)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinRustAsync_simple_getter_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_rust_async,
) {
    wire_ConcatenateWithTwinRustAsync_simple_getter_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_MyCallableTwinRustAsync_call(
    port_: i64,
    that: *mut wire_cst_my_callable_twin_rust_async,
    two: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_MyCallableTwinRustAsync_call_impl(port_, that, two)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SimpleStructTwinRustAsync_arg_self_twin_rust_async(
    port_: i64,
    a: *mut wire_cst_simple_struct_twin_rust_async,
    b: *mut wire_cst_simple_struct_twin_rust_async,
) {
    wire_SimpleStructTwinRustAsync_arg_self_twin_rust_async_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SimpleStructTwinRustAsync_return_self_twin_rust_async(
    port_: i64,
    one: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_SimpleStructTwinRustAsync_return_self_twin_rust_async_impl(port_, one)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SimpleStructTwinRustAsync_vec_self_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_simple_struct_twin_rust_async,
) {
    wire_SimpleStructTwinRustAsync_vec_self_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SumWithTwinRustAsync_sum_twin_rust_async(
    port_: i64,
    that: *mut wire_cst_sum_with_twin_rust_async,
    y: u32,
    z: u32,
) {
    wire_SumWithTwinRustAsync_sum_twin_rust_async_impl(port_, that, y, z)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_sum_array_twin_rust_async(
    port_: i64,
    a: u32,
    b: u32,
    c: u32,
) {
    wire_get_sum_array_twin_rust_async_impl(port_, a, b, c)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_sum_struct_twin_rust_async(port_: i64) {
    wire_get_sum_struct_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinRustAsyncSse_concatenate_static_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinRustAsyncSse_concatenate_static_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinRustAsyncSse_concatenate_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinRustAsyncSse_concatenate_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_single_arg_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_single_arg_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_at_1_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_at_1_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinRustAsyncSse_new_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinRustAsyncSse_new_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinRustAsyncSse_simple_getter_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinRustAsyncSse_simple_getter_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_MyCallableTwinRustAsyncSse_call(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_MyCallableTwinRustAsyncSse_call_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SimpleStructTwinRustAsyncSse_arg_self_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SimpleStructTwinRustAsyncSse_arg_self_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SimpleStructTwinRustAsyncSse_return_self_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SimpleStructTwinRustAsyncSse_return_self_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SimpleStructTwinRustAsyncSse_vec_self_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SimpleStructTwinRustAsyncSse_vec_self_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SumWithTwinRustAsyncSse_sum_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SumWithTwinRustAsyncSse_sum_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_sum_array_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_sum_array_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_sum_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_sum_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSse_concatenate_static_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSse_concatenate_static_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSse_concatenate_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSse_concatenate_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSse_handle_some_static_stream_sink_single_arg_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSse_handle_some_static_stream_sink_single_arg_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSse_handle_some_static_stream_sink_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSse_handle_some_static_stream_sink_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSse_handle_some_stream_sink_at_1_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSse_handle_some_stream_sink_at_1_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSse_handle_some_stream_sink_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSse_handle_some_stream_sink_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSse_new_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSse_new_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSse_simple_getter_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSse_simple_getter_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_MyCallableTwinSse_call(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_MyCallableTwinSse_call_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SimpleStructTwinSse_arg_self_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SimpleStructTwinSse_arg_self_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SimpleStructTwinSse_return_self_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SimpleStructTwinSse_return_self_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SimpleStructTwinSse_vec_self_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SimpleStructTwinSse_vec_self_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SumWithTwinSse_sum_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_SumWithTwinSse_sum_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_sum_array_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_sum_array_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_sum_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_sum_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSync_concatenate_static_twin_sync(
    a: *mut wire_cst_list_prim_u_8_strict,
    b: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_ConcatenateWithTwinSync_concatenate_static_twin_sync_impl(a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSync_concatenate_twin_sync(
    that: *mut wire_cst_concatenate_with_twin_sync,
    b: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_ConcatenateWithTwinSync_concatenate_twin_sync_impl(that, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_single_arg_twin_sync(
    port_: i64,
) {
    wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_single_arg_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_twin_sync(
    port_: i64,
    key: u32,
    max: u32,
) {
    wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_twin_sync_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSync_handle_some_stream_sink_at_1_twin_sync(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_sync,
) {
    wire_ConcatenateWithTwinSync_handle_some_stream_sink_at_1_twin_sync_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSync_handle_some_stream_sink_twin_sync(
    port_: i64,
    that: *mut wire_cst_concatenate_with_twin_sync,
    key: u32,
    max: u32,
) {
    wire_ConcatenateWithTwinSync_handle_some_stream_sink_twin_sync_impl(port_, that, key, max)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSync_new_twin_sync(
    a: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_ConcatenateWithTwinSync_new_twin_sync_impl(a)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSync_simple_getter_twin_sync(
    that: *mut wire_cst_concatenate_with_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_ConcatenateWithTwinSync_simple_getter_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_MyCallableTwinSync_call(
    that: *mut wire_cst_my_callable_twin_sync,
    two: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_MyCallableTwinSync_call_impl(that, two)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SimpleStructTwinSync_arg_self_twin_sync(
    a: *mut wire_cst_simple_struct_twin_sync,
    b: *mut wire_cst_simple_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_SimpleStructTwinSync_arg_self_twin_sync_impl(a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SimpleStructTwinSync_return_self_twin_sync(
    one: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_SimpleStructTwinSync_return_self_twin_sync_impl(one)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SimpleStructTwinSync_vec_self_twin_sync(
    arg: *mut wire_cst_list_simple_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_SimpleStructTwinSync_vec_self_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SumWithTwinSync_sum_twin_sync(
    that: *mut wire_cst_sum_with_twin_sync,
    y: u32,
    z: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_SumWithTwinSync_sum_twin_sync_impl(that, y, z)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_sum_array_twin_sync(
    a: u32,
    b: u32,
    c: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_sum_array_twin_sync_impl(a, b, c)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_sum_struct_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_sum_struct_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSyncSse_concatenate_static_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_ConcatenateWithTwinSyncSse_concatenate_static_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSyncSse_concatenate_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_ConcatenateWithTwinSyncSse_concatenate_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_single_arg_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_single_arg_twin_sync_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_twin_sync_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSyncSse_handle_some_stream_sink_at_1_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSyncSse_handle_some_stream_sink_at_1_twin_sync_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSyncSse_handle_some_stream_sink_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_ConcatenateWithTwinSyncSse_handle_some_stream_sink_twin_sync_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSyncSse_new_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_ConcatenateWithTwinSyncSse_new_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_ConcatenateWithTwinSyncSse_simple_getter_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_ConcatenateWithTwinSyncSse_simple_getter_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_MyCallableTwinSyncSse_call(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_MyCallableTwinSyncSse_call_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SimpleStructTwinSyncSse_arg_self_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_SimpleStructTwinSyncSse_arg_self_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SimpleStructTwinSyncSse_return_self_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_SimpleStructTwinSyncSse_return_self_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SimpleStructTwinSyncSse_vec_self_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_SimpleStructTwinSyncSse_vec_self_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_SumWithTwinSyncSse_sum_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_SumWithTwinSyncSse_sum_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_sum_array_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_get_sum_array_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_sum_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_get_sum_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_app_settings_stream_twin_rust_async(
    port_: i64,
) {
    wire_app_settings_stream_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_app_settings_vec_stream_twin_rust_async(
    port_: i64,
) {
    wire_app_settings_vec_stream_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_first_number_twin_rust_async(
    port_: i64,
    nums: *mut wire_cst_numbers,
) {
    wire_first_number_twin_rust_async_impl(port_, nums)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_first_sequence_twin_rust_async(
    port_: i64,
    seqs: *mut wire_cst_sequences,
) {
    wire_first_sequence_twin_rust_async_impl(port_, seqs)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_app_settings_twin_rust_async(port_: i64) {
    wire_get_app_settings_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_fallible_app_settings_twin_rust_async(
    port_: i64,
) {
    wire_get_fallible_app_settings_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_message_twin_rust_async(port_: i64) {
    wire_get_message_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_is_app_embedded_twin_rust_async(
    port_: i64,
    app_settings: *mut wire_cst_application_settings,
) {
    wire_is_app_embedded_twin_rust_async_impl(port_, app_settings)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_array_enum_stream_twin_rust_async(
    port_: i64,
) {
    wire_mirror_array_enum_stream_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_enum_stream_twin_rust_async(port_: i64) {
    wire_mirror_enum_stream_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_map_enum_stream_twin_rust_async(
    port_: i64,
) {
    wire_mirror_map_enum_stream_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_option_enum_stream_twin_rust_async(
    port_: i64,
) {
    wire_mirror_option_enum_stream_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_set_enum_stream_twin_rust_async(
    port_: i64,
) {
    wire_mirror_set_enum_stream_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_struct_stream_twin_rust_async(
    port_: i64,
) {
    wire_mirror_struct_stream_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_tuple_stream_twin_rust_async(
    port_: i64,
) {
    wire_mirror_tuple_stream_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_vec_enum_stream_twin_rust_async(
    port_: i64,
) {
    wire_mirror_vec_enum_stream_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_repeat_number_twin_rust_async(
    port_: i64,
    num: i32,
    times: usize,
) {
    wire_repeat_number_twin_rust_async_impl(port_, num, times)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_repeat_sequence_twin_rust_async(
    port_: i64,
    seq: i32,
    times: usize,
) {
    wire_repeat_sequence_twin_rust_async_impl(port_, seq, times)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_contains_mirrored_sub_struct_twin_rust_async(
    port_: i64,
) {
    wire_test_contains_mirrored_sub_struct_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_fallible_of_raw_string_mirrored_twin_rust_async(
    port_: i64,
) {
    wire_test_fallible_of_raw_string_mirrored_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_hashmap_with_mirrored_value_twin_rust_async(
    port_: i64,
) {
    wire_test_hashmap_with_mirrored_value_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_list_of_nested_enums_mirrored_twin_rust_async(
    port_: i64,
) {
    wire_test_list_of_nested_enums_mirrored_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_list_of_raw_nested_string_mirrored_twin_rust_async(
    port_: i64,
) {
    wire_test_list_of_raw_nested_string_mirrored_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_nested_raw_string_mirrored_twin_rust_async(
    port_: i64,
) {
    wire_test_nested_raw_string_mirrored_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_raw_string_enum_mirrored_twin_rust_async(
    port_: i64,
    nested: bool,
) {
    wire_test_raw_string_enum_mirrored_twin_rust_async_impl(port_, nested)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_raw_string_mirrored_twin_rust_async(
    port_: i64,
) {
    wire_test_raw_string_mirrored_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_app_settings_stream_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_app_settings_stream_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_app_settings_vec_stream_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_app_settings_vec_stream_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_first_number_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_first_number_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_first_sequence_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_first_sequence_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_app_settings_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_app_settings_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_fallible_app_settings_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_fallible_app_settings_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_message_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_message_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_is_app_embedded_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_is_app_embedded_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_array_enum_stream_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_array_enum_stream_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_enum_stream_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_enum_stream_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_map_enum_stream_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_map_enum_stream_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_option_enum_stream_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_option_enum_stream_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_set_enum_stream_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_set_enum_stream_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_struct_stream_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_struct_stream_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_tuple_stream_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_tuple_stream_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_vec_enum_stream_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_vec_enum_stream_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_repeat_number_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_repeat_number_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_repeat_sequence_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_repeat_sequence_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_contains_mirrored_sub_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_contains_mirrored_sub_struct_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_fallible_of_raw_string_mirrored_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_fallible_of_raw_string_mirrored_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_hashmap_with_mirrored_value_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_hashmap_with_mirrored_value_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_list_of_nested_enums_mirrored_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_list_of_nested_enums_mirrored_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_list_of_raw_nested_string_mirrored_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_list_of_raw_nested_string_mirrored_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_nested_raw_string_mirrored_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_nested_raw_string_mirrored_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_raw_string_enum_mirrored_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_raw_string_enum_mirrored_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_raw_string_mirrored_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_raw_string_mirrored_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_app_settings_stream_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_app_settings_stream_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_app_settings_vec_stream_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_app_settings_vec_stream_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_first_number_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_first_number_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_first_sequence_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_first_sequence_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_app_settings_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_app_settings_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_fallible_app_settings_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_fallible_app_settings_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_message_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_get_message_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_is_app_embedded_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_is_app_embedded_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_array_enum_stream_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_array_enum_stream_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_enum_stream_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_enum_stream_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_map_enum_stream_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_map_enum_stream_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_option_enum_stream_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_option_enum_stream_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_set_enum_stream_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_set_enum_stream_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_struct_stream_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_struct_stream_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_tuple_stream_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_tuple_stream_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_vec_enum_stream_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_vec_enum_stream_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_repeat_number_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_repeat_number_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_repeat_sequence_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_repeat_sequence_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_contains_mirrored_sub_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_contains_mirrored_sub_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_fallible_of_raw_string_mirrored_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_fallible_of_raw_string_mirrored_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_hashmap_with_mirrored_value_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_hashmap_with_mirrored_value_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_list_of_nested_enums_mirrored_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_list_of_nested_enums_mirrored_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_list_of_raw_nested_string_mirrored_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_list_of_raw_nested_string_mirrored_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_nested_raw_string_mirrored_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_nested_raw_string_mirrored_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_raw_string_enum_mirrored_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_raw_string_enum_mirrored_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_raw_string_mirrored_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_raw_string_mirrored_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_app_settings_stream_twin_sync(port_: i64) {
    wire_app_settings_stream_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_app_settings_vec_stream_twin_sync(port_: i64) {
    wire_app_settings_vec_stream_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_first_number_twin_sync(
    nums: *mut wire_cst_numbers,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_first_number_twin_sync_impl(nums)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_first_sequence_twin_sync(
    seqs: *mut wire_cst_sequences,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_first_sequence_twin_sync_impl(seqs)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_app_settings_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_app_settings_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_fallible_app_settings_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_fallible_app_settings_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_message_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_get_message_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_is_app_embedded_twin_sync(
    app_settings: *mut wire_cst_application_settings,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_is_app_embedded_twin_sync_impl(app_settings)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_array_enum_stream_twin_sync(port_: i64) {
    wire_mirror_array_enum_stream_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_enum_stream_twin_sync(port_: i64) {
    wire_mirror_enum_stream_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_map_enum_stream_twin_sync(port_: i64) {
    wire_mirror_map_enum_stream_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_option_enum_stream_twin_sync(
    port_: i64,
) {
    wire_mirror_option_enum_stream_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_set_enum_stream_twin_sync(port_: i64) {
    wire_mirror_set_enum_stream_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_struct_stream_twin_sync(port_: i64) {
    wire_mirror_struct_stream_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_tuple_stream_twin_sync(port_: i64) {
    wire_mirror_tuple_stream_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_vec_enum_stream_twin_sync(port_: i64) {
    wire_mirror_vec_enum_stream_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_repeat_number_twin_sync(
    num: i32,
    times: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_repeat_number_twin_sync_impl(num, times)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_repeat_sequence_twin_sync(
    seq: i32,
    times: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_repeat_sequence_twin_sync_impl(seq, times)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_contains_mirrored_sub_struct_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_contains_mirrored_sub_struct_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_fallible_of_raw_string_mirrored_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_fallible_of_raw_string_mirrored_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_hashmap_with_mirrored_value_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_hashmap_with_mirrored_value_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_list_of_nested_enums_mirrored_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_list_of_nested_enums_mirrored_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_list_of_raw_nested_string_mirrored_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_list_of_raw_nested_string_mirrored_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_nested_raw_string_mirrored_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_nested_raw_string_mirrored_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_raw_string_enum_mirrored_twin_sync(
    nested: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_raw_string_enum_mirrored_twin_sync_impl(nested)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_raw_string_mirrored_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_raw_string_mirrored_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_app_settings_stream_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_app_settings_stream_twin_sync_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_app_settings_vec_stream_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_app_settings_vec_stream_twin_sync_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_first_number_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_first_number_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_first_sequence_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_first_sequence_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_app_settings_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_get_app_settings_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_fallible_app_settings_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_get_fallible_app_settings_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_get_message_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_get_message_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_is_app_embedded_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_is_app_embedded_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_array_enum_stream_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_array_enum_stream_twin_sync_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_enum_stream_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_enum_stream_twin_sync_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_map_enum_stream_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_map_enum_stream_twin_sync_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_option_enum_stream_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_option_enum_stream_twin_sync_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_set_enum_stream_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_set_enum_stream_twin_sync_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_struct_stream_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_struct_stream_twin_sync_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_tuple_stream_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_tuple_stream_twin_sync_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_mirror_vec_enum_stream_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_mirror_vec_enum_stream_twin_sync_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_repeat_number_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_repeat_number_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_repeat_sequence_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_repeat_sequence_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_contains_mirrored_sub_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_contains_mirrored_sub_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_fallible_of_raw_string_mirrored_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_fallible_of_raw_string_mirrored_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_hashmap_with_mirrored_value_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_hashmap_with_mirrored_value_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_list_of_nested_enums_mirrored_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_list_of_nested_enums_mirrored_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_list_of_raw_nested_string_mirrored_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_list_of_raw_nested_string_mirrored_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_nested_raw_string_mirrored_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_nested_raw_string_mirrored_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_raw_string_enum_mirrored_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_raw_string_enum_mirrored_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_raw_string_mirrored_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_raw_string_mirrored_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_big_buffers_twin_rust_async(port_: i64) {
    wire_handle_big_buffers_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_complex_struct_twin_rust_async(
    port_: i64,
    s: *mut wire_cst_my_tree_node_twin_rust_async,
) {
    wire_handle_complex_struct_twin_rust_async_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_nested_struct_twin_rust_async(
    port_: i64,
    s: *mut wire_cst_my_nested_struct_twin_rust_async,
) {
    wire_handle_nested_struct_twin_rust_async_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_string_twin_rust_async(
    port_: i64,
    s: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_handle_string_twin_rust_async_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_struct_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_my_size,
    boxed: *mut wire_cst_my_size,
) {
    wire_handle_struct_twin_rust_async_impl(port_, arg, boxed)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_vec_u8_twin_rust_async(
    port_: i64,
    v: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_handle_vec_u8_twin_rust_async_impl(port_, v)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_list_of_primitive_enums_twin_rust_async(
    port_: i64,
    weekdays: *mut wire_cst_list_weekdays_twin_rust_async,
) {
    wire_list_of_primitive_enums_twin_rust_async_impl(port_, weekdays)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_abc_enum_twin_rust_async(
    port_: i64,
    abc: *mut wire_cst_abc_twin_rust_async,
) {
    wire_test_abc_enum_twin_rust_async_impl(port_, abc)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_struct_with_enum_twin_rust_async(
    port_: i64,
    se: *mut wire_cst_struct_with_enum_twin_rust_async,
) {
    wire_test_struct_with_enum_twin_rust_async_impl(port_, se)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_big_buffers_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_big_buffers_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_complex_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_complex_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_nested_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_nested_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_string_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_string_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_vec_u8_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_vec_u8_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_list_of_primitive_enums_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_list_of_primitive_enums_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_abc_enum_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_abc_enum_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_struct_with_enum_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_struct_with_enum_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_big_buffers_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_big_buffers_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_complex_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_complex_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_nested_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_nested_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_string_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_string_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_vec_u8_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_vec_u8_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_list_of_primitive_enums_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_list_of_primitive_enums_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_abc_enum_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_abc_enum_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_struct_with_enum_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_struct_with_enum_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_big_buffers_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_big_buffers_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_complex_struct_twin_sync(
    s: *mut wire_cst_my_tree_node_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_complex_struct_twin_sync_impl(s)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_nested_struct_twin_sync(
    s: *mut wire_cst_my_nested_struct_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_nested_struct_twin_sync_impl(s)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_string_twin_sync(
    s: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_string_twin_sync_impl(s)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_struct_twin_sync(
    arg: *mut wire_cst_my_size,
    boxed: *mut wire_cst_my_size,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_struct_twin_sync_impl(arg, boxed)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_vec_u8_twin_sync(
    v: *mut wire_cst_list_prim_u_8_loose,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_vec_u8_twin_sync_impl(v)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_list_of_primitive_enums_twin_sync(
    weekdays: *mut wire_cst_list_weekdays_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_list_of_primitive_enums_twin_sync_impl(weekdays)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_abc_enum_twin_sync(
    abc: *mut wire_cst_abc_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_abc_enum_twin_sync_impl(abc)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_struct_with_enum_twin_sync(
    se: *mut wire_cst_struct_with_enum_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_struct_with_enum_twin_sync_impl(se)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_big_buffers_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_big_buffers_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_complex_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_complex_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_nested_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_nested_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_string_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_string_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_vec_u8_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_vec_u8_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_list_of_primitive_enums_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_list_of_primitive_enums_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_abc_enum_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_abc_enum_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_struct_with_enum_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_struct_with_enum_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_empty_struct_twin_rust_async(
    port_: i64,
    empty: *mut wire_cst_empty_twin_rust_async,
) {
    wire_empty_struct_twin_rust_async_impl(port_, empty)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_return_unit_twin_rust_async(port_: i64) {
    wire_func_return_unit_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_list_of_struct_twin_rust_async(
    port_: i64,
    l: *mut wire_cst_list_my_size,
) {
    wire_handle_list_of_struct_twin_rust_async_impl(port_, l)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_string_list_twin_rust_async(
    port_: i64,
    names: *mut wire_cst_list_String,
) {
    wire_handle_string_list_twin_rust_async_impl(port_, names)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_empty_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_empty_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_return_unit_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_return_unit_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_list_of_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_list_of_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_string_list_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_string_list_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_empty_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_empty_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_return_unit_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_return_unit_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_list_of_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_list_of_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_string_list_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_string_list_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_empty_struct_twin_sync(
    empty: *mut wire_cst_empty_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_empty_struct_twin_sync_impl(empty)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_return_unit_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_return_unit_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_list_of_struct_twin_sync(
    l: *mut wire_cst_list_my_size,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_list_of_struct_twin_sync_impl(l)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_string_list_twin_sync(
    names: *mut wire_cst_list_String,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_string_list_twin_sync_impl(names)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_empty_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_empty_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_return_unit_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_return_unit_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_list_of_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_list_of_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_string_list_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_string_list_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_newtype_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_new_type_int_twin_rust_async,
) {
    wire_handle_newtype_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_newtype_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_newtype_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_newtype_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_newtype_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_newtype_twin_sync(
    arg: *mut wire_cst_new_type_int_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_newtype_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_newtype_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_newtype_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_primitive_optional_types_twin_rust_async(
    port_: i64,
    my_i32: *mut i32,
    my_i64: *mut i64,
    my_f64: *mut f64,
    my_bool: *mut bool,
) {
    wire_primitive_optional_types_twin_rust_async_impl(port_, my_i32, my_i64, my_f64, my_bool)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_primitive_optional_types_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_primitive_optional_types_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_primitive_optional_types_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_primitive_optional_types_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_primitive_optional_types_twin_sync(
    my_i32: *mut i32,
    my_i64: *mut i64,
    my_f64: *mut f64,
    my_bool: *mut bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_primitive_optional_types_twin_sync_impl(my_i32, my_i64, my_f64, my_bool)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_primitive_optional_types_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_primitive_optional_types_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_increment_boxed_optional_twin_rust_async(
    port_: i64,
    opt: *mut f64,
) {
    wire_handle_increment_boxed_optional_twin_rust_async_impl(port_, opt)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_option_box_arguments_twin_rust_async(
    port_: i64,
    i8box: *mut i8,
    u8box: *mut u8,
    i32box: *mut i32,
    i64box: *mut i64,
    f64box: *mut f64,
    boolbox: *mut bool,
    structbox: *mut wire_cst_exotic_optionals_twin_rust_async,
) {
    wire_handle_option_box_arguments_twin_rust_async_impl(
        port_, i8box, u8box, i32box, i64box, f64box, boolbox, structbox,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_optional_increment_twin_rust_async(
    port_: i64,
    opt: *mut wire_cst_exotic_optionals_twin_rust_async,
) {
    wire_handle_optional_increment_twin_rust_async_impl(port_, opt)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_optional_return_twin_rust_async(
    port_: i64,
    left: f64,
    right: f64,
) {
    wire_handle_optional_return_twin_rust_async_impl(port_, left, right)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_optional_struct_twin_rust_async(
    port_: i64,
    document: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_handle_optional_struct_twin_rust_async_impl(port_, document)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_vec_of_opts_twin_rust_async(
    port_: i64,
    opt: *mut wire_cst_opt_vecs_twin_rust_async,
) {
    wire_handle_vec_of_opts_twin_rust_async_impl(port_, opt)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_increment_boxed_optional_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_increment_boxed_optional_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_option_box_arguments_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_option_box_arguments_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_optional_increment_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_optional_increment_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_optional_return_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_optional_return_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_optional_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_optional_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_vec_of_opts_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_vec_of_opts_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_increment_boxed_optional_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_increment_boxed_optional_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_option_box_arguments_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_option_box_arguments_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_optional_increment_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_optional_increment_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_optional_return_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_optional_return_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_optional_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_optional_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_vec_of_opts_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_vec_of_opts_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_increment_boxed_optional_twin_sync(
    opt: *mut f64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_increment_boxed_optional_twin_sync_impl(opt)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_option_box_arguments_twin_sync(
    i8box: *mut i8,
    u8box: *mut u8,
    i32box: *mut i32,
    i64box: *mut i64,
    f64box: *mut f64,
    boolbox: *mut bool,
    structbox: *mut wire_cst_exotic_optionals_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_option_box_arguments_twin_sync_impl(
        i8box, u8box, i32box, i64box, f64box, boolbox, structbox,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_optional_increment_twin_sync(
    opt: *mut wire_cst_exotic_optionals_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_optional_increment_twin_sync_impl(opt)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_optional_return_twin_sync(
    left: f64,
    right: f64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_optional_return_twin_sync_impl(left, right)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_optional_struct_twin_sync(
    document: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_optional_struct_twin_sync_impl(document)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_vec_of_opts_twin_sync(
    opt: *mut wire_cst_opt_vecs_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_vec_of_opts_twin_sync_impl(opt)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_increment_boxed_optional_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_increment_boxed_optional_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_option_box_arguments_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_option_box_arguments_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_optional_increment_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_optional_increment_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_optional_return_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_optional_return_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_optional_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_optional_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_vec_of_opts_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_vec_of_opts_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_vec_of_primitive_twin_rust_async(
    port_: i64,
    n: i32,
) {
    wire_handle_vec_of_primitive_twin_rust_async_impl(port_, n)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_vec_of_primitive_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_vec_of_primitive_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_vec_of_primitive_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_vec_of_primitive_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_vec_of_primitive_twin_sync(
    n: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_vec_of_primitive_twin_sync_impl(n)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_vec_of_primitive_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_vec_of_primitive_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_primitive_types_twin_rust_async(
    port_: i64,
    my_i32: i32,
    my_i64: i64,
    my_f64: f64,
    my_bool: bool,
) {
    wire_primitive_types_twin_rust_async_impl(port_, my_i32, my_i64, my_f64, my_bool)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_primitive_u32_twin_rust_async(
    port_: i64,
    my_u32: u32,
) {
    wire_primitive_u32_twin_rust_async_impl(port_, my_u32)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_primitive_types_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_primitive_types_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_primitive_u32_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_primitive_u32_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_primitive_types_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_primitive_types_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_primitive_u32_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_primitive_u32_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_primitive_types_twin_sync(
    my_i32: i32,
    my_i64: i64,
    my_f64: f64,
    my_bool: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_primitive_types_twin_sync_impl(my_i32, my_i64, my_f64, my_bool)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_primitive_u32_twin_sync(
    my_u32: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_primitive_u32_twin_sync_impl(my_u32)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_primitive_types_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_primitive_types_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_primitive_u32_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_primitive_u32_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_more_than_just_one_raw_string_struct_twin_rust_async(
    port_: i64,
) {
    wire_test_more_than_just_one_raw_string_struct_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_raw_string_item_struct_twin_rust_async(
    port_: i64,
) {
    wire_test_raw_string_item_struct_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_more_than_just_one_raw_string_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_more_than_just_one_raw_string_struct_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_raw_string_item_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_raw_string_item_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_more_than_just_one_raw_string_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_more_than_just_one_raw_string_struct_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_raw_string_item_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_raw_string_item_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_more_than_just_one_raw_string_struct_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_more_than_just_one_raw_string_struct_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_raw_string_item_struct_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_raw_string_item_struct_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_more_than_just_one_raw_string_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_more_than_just_one_raw_string_struct_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_raw_string_item_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_raw_string_item_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinMoi_instance_method_arg_borrow_twin_moi(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinMoi_instance_method_arg_borrow_twin_moi_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinMoi_instance_method_arg_mut_borrow_twin_moi(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinMoi_instance_method_arg_mut_borrow_twin_moi_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinMoi_instance_method_arg_own_twin_moi(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinMoi_instance_method_arg_own_twin_moi_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinMoi_instance_method_getter_twin_moi(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinMoi_instance_method_getter_twin_moi_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinMoi_instance_method_return_own_twin_moi(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinMoi_instance_method_return_own_twin_moi_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinMoi_new_custom_name_twin_moi(
    port_: i64,
) {
    wire_NonCloneSimpleTwinMoi_new_custom_name_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinMoi_new_twin_moi(port_: i64) {
    wire_NonCloneSimpleTwinMoi_new_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinMoi_new_with_result_twin_moi(
    port_: i64,
) {
    wire_NonCloneSimpleTwinMoi_new_with_result_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinMoi_static_method_arg_borrow_twin_moi(
    port_: i64,
    arg: usize,
) {
    wire_NonCloneSimpleTwinMoi_static_method_arg_borrow_twin_moi_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinMoi_static_method_arg_mut_borrow_twin_moi(
    port_: i64,
    arg: usize,
) {
    wire_NonCloneSimpleTwinMoi_static_method_arg_mut_borrow_twin_moi_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinMoi_static_method_arg_own_twin_moi(
    port_: i64,
    arg: usize,
) {
    wire_NonCloneSimpleTwinMoi_static_method_arg_own_twin_moi_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinMoi_static_method_return_own_twin_moi(
    port_: i64,
) {
    wire_NonCloneSimpleTwinMoi_static_method_return_own_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_borrow_twin_moi(
    port_: i64,
    arg: usize,
    expect: i32,
) {
    wire_rust_auto_opaque_arg_borrow_twin_moi_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_mut_borrow_twin_moi(
    port_: i64,
    arg: usize,
    expect: i32,
    adder: i32,
) {
    wire_rust_auto_opaque_arg_mut_borrow_twin_moi_impl(port_, arg, expect, adder)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_and_return_own_twin_moi(
    port_: i64,
    arg: usize,
) {
    wire_rust_auto_opaque_arg_own_and_return_own_twin_moi_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_twin_moi(
    port_: i64,
    arg: usize,
    expect: i32,
) {
    wire_rust_auto_opaque_arg_own_twin_moi_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_vec_own_twin_moi(
    port_: i64,
    arg: *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi,
    expect: *mut wire_cst_list_prim_i_32_loose,
) {
    wire_rust_auto_opaque_arg_vec_own_twin_moi_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_borrow_twin_moi(
    port_: i64,
    a: usize,
    b: usize,
) {
    wire_rust_auto_opaque_borrow_and_borrow_twin_moi_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_mut_borrow_twin_moi(
    port_: i64,
    borrow: usize,
    mut_borrow: usize,
) {
    wire_rust_auto_opaque_borrow_and_mut_borrow_twin_moi_impl(port_, borrow, mut_borrow)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_arg_twin_moi(
    port_: i64,
    arg: usize,
) {
    wire_rust_auto_opaque_callable_arg_twin_moi_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_return_twin_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_callable_return_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_dummy_twin_moi(
    port_: i64,
    a: usize,
    b: usize,
) {
    wire_rust_auto_opaque_dummy_twin_moi_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_arg_borrow_twin_moi(
    port_: i64,
    arg: usize,
) {
    wire_rust_auto_opaque_enum_arg_borrow_twin_moi_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_return_own_twin_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_enum_return_own_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_moi(
    port_: i64,
    arg: *mut wire_cst_enum_with_good_and_opaque_twin_moi,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_moi_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_arg_twin_moi(
    port_: i64,
    arg: usize,
    expect: i32,
) {
    wire_rust_auto_opaque_explicit_arg_twin_moi_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_return_twin_moi(
    port_: i64,
    initial: i32,
) {
    wire_rust_auto_opaque_explicit_return_twin_moi_impl(port_, initial)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_struct_twin_moi(
    port_: i64,
    arg: *mut wire_cst_struct_with_explicit_auto_opaque_field_twin_moi,
) {
    wire_rust_auto_opaque_explicit_struct_twin_moi_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_normal_and_opaque_arg_twin_moi(
    port_: i64,
    a: usize,
    b: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_rust_auto_opaque_normal_and_opaque_arg_twin_moi_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_arg_twin_moi(
    port_: i64,
    arg: usize,
) {
    wire_rust_auto_opaque_plus_sign_arg_twin_moi_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_return_twin_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_plus_sign_return_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_one_and_two_twin_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_return_opaque_one_and_two_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_two_twin_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_return_opaque_two_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_own_twin_moi(
    port_: i64,
    initial: i32,
) {
    wire_rust_auto_opaque_return_own_twin_moi_impl(port_, initial)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_vec_own_twin_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_return_vec_own_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_stream_sink_twin_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_stream_sink_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_moi(
    port_: i64,
    arg: *mut wire_cst_struct_with_good_and_opaque_field_twin_moi,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_moi_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_borrow_twin_moi(
    port_: i64,
    arg: usize,
    expect: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_rust_auto_opaque_trait_object_arg_borrow_twin_moi_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_moi(
    port_: i64,
    arg: usize,
    expect: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_moi_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_own_twin_moi(
    port_: i64,
    arg: usize,
    expect: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_rust_auto_opaque_trait_object_arg_own_twin_moi_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_one_twin_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_trait_object_return_own_one_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_two_twin_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_trait_object_return_own_two_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_two_args_twin_moi(
    port_: i64,
    a: usize,
    b: usize,
) {
    wire_rust_auto_opaque_two_args_twin_moi_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsync_instance_method_arg_borrow_twin_rust_async(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinRustAsync_instance_method_arg_borrow_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsync_instance_method_arg_mut_borrow_twin_rust_async(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinRustAsync_instance_method_arg_mut_borrow_twin_rust_async_impl(
        port_, that,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsync_instance_method_arg_own_twin_rust_async(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinRustAsync_instance_method_arg_own_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsync_instance_method_getter_twin_rust_async(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinRustAsync_instance_method_getter_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsync_instance_method_return_own_twin_rust_async(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinRustAsync_instance_method_return_own_twin_rust_async_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsync_new_custom_name_twin_rust_async(
    port_: i64,
) {
    wire_NonCloneSimpleTwinRustAsync_new_custom_name_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsync_new_twin_rust_async(
    port_: i64,
) {
    wire_NonCloneSimpleTwinRustAsync_new_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsync_new_with_result_twin_rust_async(
    port_: i64,
) {
    wire_NonCloneSimpleTwinRustAsync_new_with_result_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsync_static_method_arg_borrow_twin_rust_async(
    port_: i64,
    arg: usize,
) {
    wire_NonCloneSimpleTwinRustAsync_static_method_arg_borrow_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsync_static_method_arg_mut_borrow_twin_rust_async(
    port_: i64,
    arg: usize,
) {
    wire_NonCloneSimpleTwinRustAsync_static_method_arg_mut_borrow_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsync_static_method_arg_own_twin_rust_async(
    port_: i64,
    arg: usize,
) {
    wire_NonCloneSimpleTwinRustAsync_static_method_arg_own_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsync_static_method_return_own_twin_rust_async(
    port_: i64,
) {
    wire_NonCloneSimpleTwinRustAsync_static_method_return_own_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_borrow_twin_rust_async(
    port_: i64,
    arg: usize,
    expect: i32,
) {
    wire_rust_auto_opaque_arg_borrow_twin_rust_async_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_mut_borrow_twin_rust_async(
    port_: i64,
    arg: usize,
    expect: i32,
    adder: i32,
) {
    wire_rust_auto_opaque_arg_mut_borrow_twin_rust_async_impl(port_, arg, expect, adder)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_and_return_own_twin_rust_async(
    port_: i64,
    arg: usize,
) {
    wire_rust_auto_opaque_arg_own_and_return_own_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_twin_rust_async(
    port_: i64,
    arg: usize,
    expect: i32,
) {
    wire_rust_auto_opaque_arg_own_twin_rust_async_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_vec_own_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync,
    expect: *mut wire_cst_list_prim_i_32_loose,
) {
    wire_rust_auto_opaque_arg_vec_own_twin_rust_async_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_borrow_twin_rust_async(
    port_: i64,
    a: usize,
    b: usize,
) {
    wire_rust_auto_opaque_borrow_and_borrow_twin_rust_async_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async(
    port_: i64,
    borrow: usize,
    mut_borrow: usize,
) {
    wire_rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async_impl(port_, borrow, mut_borrow)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_arg_twin_rust_async(
    port_: i64,
    arg: usize,
) {
    wire_rust_auto_opaque_callable_arg_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_return_twin_rust_async(
    port_: i64,
) {
    wire_rust_auto_opaque_callable_return_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_dummy_twin_rust_async(
    port_: i64,
    a: usize,
    b: usize,
) {
    wire_rust_auto_opaque_dummy_twin_rust_async_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_arg_borrow_twin_rust_async(
    port_: i64,
    arg: usize,
) {
    wire_rust_auto_opaque_enum_arg_borrow_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_return_own_twin_rust_async(
    port_: i64,
) {
    wire_rust_auto_opaque_enum_return_own_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_enum_with_good_and_opaque_twin_rust_async,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_rust_async(
    port_: i64,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_rust_async(
    port_: i64,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_arg_twin_rust_async(
    port_: i64,
    arg: usize,
    expect: i32,
) {
    wire_rust_auto_opaque_explicit_arg_twin_rust_async_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_return_twin_rust_async(
    port_: i64,
    initial: i32,
) {
    wire_rust_auto_opaque_explicit_return_twin_rust_async_impl(port_, initial)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_struct_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_struct_with_explicit_auto_opaque_field_twin_rust_async,
) {
    wire_rust_auto_opaque_explicit_struct_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_normal_and_opaque_arg_twin_rust_async(
    port_: i64,
    a: usize,
    b: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_rust_auto_opaque_normal_and_opaque_arg_twin_rust_async_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_arg_twin_rust_async(
    port_: i64,
    arg: usize,
) {
    wire_rust_auto_opaque_plus_sign_arg_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_return_twin_rust_async(
    port_: i64,
) {
    wire_rust_auto_opaque_plus_sign_return_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_one_and_two_twin_rust_async(
    port_: i64,
) {
    wire_rust_auto_opaque_return_opaque_one_and_two_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_two_twin_rust_async(
    port_: i64,
) {
    wire_rust_auto_opaque_return_opaque_two_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_own_twin_rust_async(
    port_: i64,
    initial: i32,
) {
    wire_rust_auto_opaque_return_own_twin_rust_async_impl(port_, initial)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_vec_own_twin_rust_async(
    port_: i64,
) {
    wire_rust_auto_opaque_return_vec_own_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_stream_sink_twin_rust_async(
    port_: i64,
) {
    wire_rust_auto_opaque_stream_sink_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_struct_with_good_and_opaque_field_twin_rust_async,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async(
    port_: i64,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_borrow_twin_rust_async(
    port_: i64,
    arg: usize,
    expect: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_rust_auto_opaque_trait_object_arg_borrow_twin_rust_async_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async(
    port_: i64,
    arg: usize,
    expect: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_own_twin_rust_async(
    port_: i64,
    arg: usize,
    expect: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_rust_auto_opaque_trait_object_arg_own_twin_rust_async_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_one_twin_rust_async(
    port_: i64,
) {
    wire_rust_auto_opaque_trait_object_return_own_one_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_two_twin_rust_async(
    port_: i64,
) {
    wire_rust_auto_opaque_trait_object_return_own_two_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_two_args_twin_rust_async(
    port_: i64,
    a: usize,
    b: usize,
) {
    wire_rust_auto_opaque_two_args_twin_rust_async_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncMoi_instance_method_arg_borrow_twin_rust_async_moi(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinRustAsyncMoi_instance_method_arg_borrow_twin_rust_async_moi_impl(
        port_, that,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncMoi_instance_method_arg_mut_borrow_twin_rust_async_moi(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinRustAsyncMoi_instance_method_arg_mut_borrow_twin_rust_async_moi_impl(
        port_, that,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncMoi_instance_method_arg_own_twin_rust_async_moi(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinRustAsyncMoi_instance_method_arg_own_twin_rust_async_moi_impl(
        port_, that,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncMoi_instance_method_getter_twin_rust_async_moi(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinRustAsyncMoi_instance_method_getter_twin_rust_async_moi_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncMoi_instance_method_return_own_twin_rust_async_moi(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinRustAsyncMoi_instance_method_return_own_twin_rust_async_moi_impl(
        port_, that,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncMoi_new_custom_name_twin_rust_async_moi(
    port_: i64,
) {
    wire_NonCloneSimpleTwinRustAsyncMoi_new_custom_name_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncMoi_new_twin_rust_async_moi(
    port_: i64,
) {
    wire_NonCloneSimpleTwinRustAsyncMoi_new_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncMoi_new_with_result_twin_rust_async_moi(
    port_: i64,
) {
    wire_NonCloneSimpleTwinRustAsyncMoi_new_with_result_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncMoi_static_method_arg_borrow_twin_rust_async_moi(
    port_: i64,
    arg: usize,
) {
    wire_NonCloneSimpleTwinRustAsyncMoi_static_method_arg_borrow_twin_rust_async_moi_impl(
        port_, arg,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncMoi_static_method_arg_mut_borrow_twin_rust_async_moi(
    port_: i64,
    arg: usize,
) {
    wire_NonCloneSimpleTwinRustAsyncMoi_static_method_arg_mut_borrow_twin_rust_async_moi_impl(
        port_, arg,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncMoi_static_method_arg_own_twin_rust_async_moi(
    port_: i64,
    arg: usize,
) {
    wire_NonCloneSimpleTwinRustAsyncMoi_static_method_arg_own_twin_rust_async_moi_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncMoi_static_method_return_own_twin_rust_async_moi(
    port_: i64,
) {
    wire_NonCloneSimpleTwinRustAsyncMoi_static_method_return_own_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_borrow_twin_rust_async_moi(
    port_: i64,
    arg: usize,
    expect: i32,
) {
    wire_rust_auto_opaque_arg_borrow_twin_rust_async_moi_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_mut_borrow_twin_rust_async_moi(
    port_: i64,
    arg: usize,
    expect: i32,
    adder: i32,
) {
    wire_rust_auto_opaque_arg_mut_borrow_twin_rust_async_moi_impl(port_, arg, expect, adder)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_and_return_own_twin_rust_async_moi(
    port_: i64,
    arg: usize,
) {
    wire_rust_auto_opaque_arg_own_and_return_own_twin_rust_async_moi_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_twin_rust_async_moi(
    port_: i64,
    arg: usize,
    expect: i32,
) {
    wire_rust_auto_opaque_arg_own_twin_rust_async_moi_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_vec_own_twin_rust_async_moi(
    port_: i64,
    arg: *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi,
    expect: *mut wire_cst_list_prim_i_32_loose,
) {
    wire_rust_auto_opaque_arg_vec_own_twin_rust_async_moi_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_borrow_twin_rust_async_moi(
    port_: i64,
    a: usize,
    b: usize,
) {
    wire_rust_auto_opaque_borrow_and_borrow_twin_rust_async_moi_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async_moi(
    port_: i64,
    borrow: usize,
    mut_borrow: usize,
) {
    wire_rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async_moi_impl(port_, borrow, mut_borrow)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_arg_twin_rust_async_moi(
    port_: i64,
    arg: usize,
) {
    wire_rust_auto_opaque_callable_arg_twin_rust_async_moi_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_return_twin_rust_async_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_callable_return_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_dummy_twin_rust_async_moi(
    port_: i64,
    a: usize,
    b: usize,
) {
    wire_rust_auto_opaque_dummy_twin_rust_async_moi_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_arg_borrow_twin_rust_async_moi(
    port_: i64,
    arg: usize,
) {
    wire_rust_auto_opaque_enum_arg_borrow_twin_rust_async_moi_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_return_own_twin_rust_async_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_enum_return_own_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_rust_async_moi(
    port_: i64,
    arg: *mut wire_cst_enum_with_good_and_opaque_twin_rust_async_moi,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_rust_async_moi_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_rust_async_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_rust_async_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_rust_async_moi_impl(
        port_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_arg_twin_rust_async_moi(
    port_: i64,
    arg: usize,
    expect: i32,
) {
    wire_rust_auto_opaque_explicit_arg_twin_rust_async_moi_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_return_twin_rust_async_moi(
    port_: i64,
    initial: i32,
) {
    wire_rust_auto_opaque_explicit_return_twin_rust_async_moi_impl(port_, initial)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_struct_twin_rust_async_moi(
    port_: i64,
    arg: *mut wire_cst_struct_with_explicit_auto_opaque_field_twin_rust_async_moi,
) {
    wire_rust_auto_opaque_explicit_struct_twin_rust_async_moi_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_normal_and_opaque_arg_twin_rust_async_moi(
    port_: i64,
    a: usize,
    b: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_rust_auto_opaque_normal_and_opaque_arg_twin_rust_async_moi_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_arg_twin_rust_async_moi(
    port_: i64,
    arg: usize,
) {
    wire_rust_auto_opaque_plus_sign_arg_twin_rust_async_moi_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_return_twin_rust_async_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_plus_sign_return_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_one_and_two_twin_rust_async_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_return_opaque_one_and_two_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_two_twin_rust_async_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_return_opaque_two_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_own_twin_rust_async_moi(
    port_: i64,
    initial: i32,
) {
    wire_rust_auto_opaque_return_own_twin_rust_async_moi_impl(port_, initial)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_vec_own_twin_rust_async_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_return_vec_own_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_stream_sink_twin_rust_async_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_stream_sink_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async_moi(
    port_: i64,
    arg: *mut wire_cst_struct_with_good_and_opaque_field_twin_rust_async_moi,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async_moi_impl(
        port_, arg,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async_moi_impl(
        port_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_borrow_twin_rust_async_moi(
    port_: i64,
    arg: usize,
    expect: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_rust_auto_opaque_trait_object_arg_borrow_twin_rust_async_moi_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async_moi(
    port_: i64,
    arg: usize,
    expect: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async_moi_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_own_twin_rust_async_moi(
    port_: i64,
    arg: usize,
    expect: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_rust_auto_opaque_trait_object_arg_own_twin_rust_async_moi_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_one_twin_rust_async_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_trait_object_return_own_one_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_two_twin_rust_async_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_trait_object_return_own_two_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_two_args_twin_rust_async_moi(
    port_: i64,
    a: usize,
    b: usize,
) {
    wire_rust_auto_opaque_two_args_twin_rust_async_moi_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSse_instance_method_arg_borrow_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSse_instance_method_arg_borrow_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSse_instance_method_arg_mut_borrow_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSse_instance_method_arg_mut_borrow_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSse_instance_method_arg_own_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSse_instance_method_arg_own_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSse_instance_method_getter_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSse_instance_method_getter_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSse_instance_method_return_own_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSse_instance_method_return_own_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSse_new_custom_name_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSse_new_custom_name_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSse_new_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSse_new_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSse_new_with_result_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSse_new_with_result_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSse_static_method_arg_borrow_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSse_static_method_arg_borrow_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSse_static_method_arg_mut_borrow_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSse_static_method_arg_mut_borrow_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSse_static_method_arg_own_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSse_static_method_arg_own_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSse_static_method_return_own_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSse_static_method_return_own_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_borrow_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_borrow_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_mut_borrow_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_mut_borrow_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_and_return_own_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_own_and_return_own_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_own_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_vec_own_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_vec_own_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_borrow_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_borrow_and_borrow_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_arg_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_callable_arg_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_return_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_callable_return_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_dummy_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_dummy_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_arg_borrow_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_arg_borrow_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_return_own_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_return_own_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_arg_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_explicit_arg_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_return_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_explicit_return_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_explicit_struct_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_normal_and_opaque_arg_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_normal_and_opaque_arg_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_arg_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_plus_sign_arg_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_return_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_plus_sign_return_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_one_and_two_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_return_opaque_one_and_two_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_two_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_return_opaque_two_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_own_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_return_own_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_vec_own_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_return_vec_own_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_stream_sink_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_stream_sink_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_borrow_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_arg_borrow_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_own_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_arg_own_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_one_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_return_own_one_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_two_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_return_own_two_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_two_args_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_two_args_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSseMoi_instance_method_arg_borrow_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSseMoi_instance_method_arg_borrow_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSseMoi_instance_method_arg_mut_borrow_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSseMoi_instance_method_arg_mut_borrow_twin_rust_async_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSseMoi_instance_method_arg_own_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSseMoi_instance_method_arg_own_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSseMoi_instance_method_getter_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSseMoi_instance_method_getter_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSseMoi_instance_method_return_own_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSseMoi_instance_method_return_own_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSseMoi_new_custom_name_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSseMoi_new_custom_name_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSseMoi_new_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSseMoi_new_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSseMoi_new_with_result_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSseMoi_new_with_result_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSseMoi_static_method_arg_borrow_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSseMoi_static_method_arg_borrow_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSseMoi_static_method_arg_mut_borrow_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSseMoi_static_method_arg_mut_borrow_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSseMoi_static_method_arg_own_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSseMoi_static_method_arg_own_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinRustAsyncSseMoi_static_method_return_own_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinRustAsyncSseMoi_static_method_return_own_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_borrow_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_borrow_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_mut_borrow_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_mut_borrow_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_and_return_own_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_own_and_return_own_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_own_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_vec_own_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_vec_own_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_borrow_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_borrow_and_borrow_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_arg_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_callable_arg_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_return_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_callable_return_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_dummy_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_dummy_twin_rust_async_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_arg_borrow_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_arg_borrow_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_return_own_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_return_own_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_arg_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_explicit_arg_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_return_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_explicit_return_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_struct_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_explicit_struct_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_normal_and_opaque_arg_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_normal_and_opaque_arg_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_arg_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_plus_sign_arg_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_return_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_plus_sign_return_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_one_and_two_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_return_opaque_one_and_two_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_two_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_return_opaque_two_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_own_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_return_own_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_vec_own_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_return_vec_own_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_stream_sink_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_stream_sink_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_borrow_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_arg_borrow_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_own_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_arg_own_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_one_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_return_own_one_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_two_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_return_own_two_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_two_args_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_two_args_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSse_instance_method_arg_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_instance_method_arg_borrow_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSse_instance_method_arg_mut_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_instance_method_arg_mut_borrow_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSse_instance_method_arg_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_instance_method_arg_own_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSse_instance_method_getter_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_instance_method_getter_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSse_instance_method_return_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_instance_method_return_own_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSse_new_custom_name_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_new_custom_name_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSse_new_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_new_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSse_new_with_result_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_new_with_result_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSse_static_method_arg_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_static_method_arg_borrow_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSse_static_method_arg_mut_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_static_method_arg_mut_borrow_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSse_static_method_arg_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_static_method_arg_own_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSse_static_method_return_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSse_static_method_return_own_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_borrow_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_mut_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_mut_borrow_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_and_return_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_own_and_return_own_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_own_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_vec_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_vec_own_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_borrow_and_borrow_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_mut_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_borrow_and_mut_borrow_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_arg_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_callable_arg_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_return_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_callable_return_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_dummy_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_dummy_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_arg_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_arg_borrow_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_return_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_return_own_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_arg_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_explicit_arg_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_return_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_explicit_return_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_explicit_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_normal_and_opaque_arg_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_normal_and_opaque_arg_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_arg_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_plus_sign_arg_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_return_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_plus_sign_return_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_one_and_two_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_return_opaque_one_and_two_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_two_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_return_opaque_two_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_return_own_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_vec_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_return_vec_own_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_stream_sink_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_stream_sink_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_arg_borrow_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_own_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_arg_own_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_one_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_return_own_one_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_two_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_return_own_two_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_two_args_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_two_args_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSseMoi_instance_method_arg_borrow_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSseMoi_instance_method_arg_borrow_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSseMoi_instance_method_arg_mut_borrow_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSseMoi_instance_method_arg_mut_borrow_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSseMoi_instance_method_arg_own_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSseMoi_instance_method_arg_own_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSseMoi_instance_method_getter_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSseMoi_instance_method_getter_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSseMoi_instance_method_return_own_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSseMoi_instance_method_return_own_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSseMoi_new_custom_name_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSseMoi_new_custom_name_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSseMoi_new_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSseMoi_new_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSseMoi_new_with_result_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSseMoi_new_with_result_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSseMoi_static_method_arg_borrow_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSseMoi_static_method_arg_borrow_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSseMoi_static_method_arg_mut_borrow_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSseMoi_static_method_arg_mut_borrow_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSseMoi_static_method_arg_own_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSseMoi_static_method_arg_own_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSseMoi_static_method_return_own_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_NonCloneSimpleTwinSseMoi_static_method_return_own_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_borrow_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_borrow_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_mut_borrow_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_mut_borrow_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_and_return_own_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_own_and_return_own_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_own_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_vec_own_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_arg_vec_own_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_borrow_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_borrow_and_borrow_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_mut_borrow_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_borrow_and_mut_borrow_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_arg_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_callable_arg_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_return_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_callable_return_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_dummy_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_dummy_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_arg_borrow_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_arg_borrow_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_return_own_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_return_own_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_arg_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_explicit_arg_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_return_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_explicit_return_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_struct_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_explicit_struct_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_normal_and_opaque_arg_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_normal_and_opaque_arg_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_arg_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_plus_sign_arg_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_return_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_plus_sign_return_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_one_and_two_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_return_opaque_one_and_two_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_two_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_return_opaque_two_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_own_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_return_own_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_vec_own_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_return_vec_own_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_stream_sink_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_stream_sink_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_borrow_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_arg_borrow_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_own_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_arg_own_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_one_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_return_own_one_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_two_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_trait_object_return_own_two_twin_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_two_args_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_two_args_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSync_instance_method_arg_borrow_twin_sync(
    that: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_instance_method_arg_borrow_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSync_instance_method_arg_mut_borrow_twin_sync(
    that: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_instance_method_arg_mut_borrow_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSync_instance_method_arg_own_twin_sync(
    that: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_instance_method_arg_own_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSync_instance_method_getter_twin_sync(
    that: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_instance_method_getter_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSync_instance_method_return_own_twin_sync(
    that: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_instance_method_return_own_twin_sync_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSync_new_custom_name_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_new_custom_name_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSync_new_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_new_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSync_new_with_result_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_new_with_result_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSync_static_method_arg_borrow_twin_sync(
    arg: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_static_method_arg_borrow_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSync_static_method_arg_mut_borrow_twin_sync(
    arg: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_static_method_arg_mut_borrow_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSync_static_method_arg_own_twin_sync(
    arg: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_static_method_arg_own_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSync_static_method_return_own_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSync_static_method_return_own_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_borrow_twin_sync(
    arg: usize,
    expect: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_arg_borrow_twin_sync_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_mut_borrow_twin_sync(
    arg: usize,
    expect: i32,
    adder: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_arg_mut_borrow_twin_sync_impl(arg, expect, adder)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_and_return_own_twin_sync(
    arg: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_twin_sync(
    arg: usize,
    expect: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_arg_own_twin_sync_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_vec_own_twin_sync(
    arg: *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync,
    expect: *mut wire_cst_list_prim_i_32_loose,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_arg_vec_own_twin_sync_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_borrow_twin_sync(
    a: usize,
    b: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_borrow_and_borrow_twin_sync_impl(a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_mut_borrow_twin_sync(
    borrow: usize,
    mut_borrow: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_borrow_and_mut_borrow_twin_sync_impl(borrow, mut_borrow)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_arg_twin_sync(
    arg: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_callable_arg_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_return_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_callable_return_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_dummy_twin_sync(
    a: usize,
    b: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_dummy_twin_sync_impl(a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_arg_borrow_twin_sync(
    arg: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_enum_arg_borrow_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_return_own_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_enum_return_own_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_sync(
    arg: *mut wire_cst_enum_with_good_and_opaque_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_arg_twin_sync(
    arg: usize,
    expect: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_explicit_arg_twin_sync_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_return_twin_sync(
    initial: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_explicit_return_twin_sync_impl(initial)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_struct_twin_sync(
    arg: *mut wire_cst_struct_with_explicit_auto_opaque_field_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_explicit_struct_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync(
    a: usize,
    b: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_impl(a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_arg_twin_sync(
    arg: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_plus_sign_arg_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_return_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_plus_sign_return_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_one_and_two_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_return_opaque_one_and_two_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_two_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_return_opaque_two_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_own_twin_sync(
    initial: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_return_own_twin_sync_impl(initial)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_vec_own_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_return_vec_own_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_stream_sink_twin_sync(
    port_: i64,
) {
    wire_rust_auto_opaque_stream_sink_twin_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync(
    arg: *mut wire_cst_struct_with_good_and_opaque_field_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync(
    arg: usize,
    expect: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync(
    arg: usize,
    expect: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_own_twin_sync(
    arg: usize,
    expect: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_trait_object_arg_own_twin_sync_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_one_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_two_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_two_args_twin_sync(
    a: usize,
    b: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_two_args_twin_sync_impl(a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncMoi_instance_method_arg_borrow_twin_sync_moi(
    that: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSyncMoi_instance_method_arg_borrow_twin_sync_moi_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncMoi_instance_method_arg_mut_borrow_twin_sync_moi(
    that: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSyncMoi_instance_method_arg_mut_borrow_twin_sync_moi_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncMoi_instance_method_arg_own_twin_sync_moi(
    that: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSyncMoi_instance_method_arg_own_twin_sync_moi_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncMoi_instance_method_getter_twin_sync_moi(
    that: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSyncMoi_instance_method_getter_twin_sync_moi_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncMoi_instance_method_return_own_twin_sync_moi(
    that: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSyncMoi_instance_method_return_own_twin_sync_moi_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncMoi_new_custom_name_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSyncMoi_new_custom_name_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncMoi_new_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSyncMoi_new_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncMoi_new_with_result_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSyncMoi_new_with_result_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncMoi_static_method_arg_borrow_twin_sync_moi(
    arg: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSyncMoi_static_method_arg_borrow_twin_sync_moi_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncMoi_static_method_arg_mut_borrow_twin_sync_moi(
    arg: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSyncMoi_static_method_arg_mut_borrow_twin_sync_moi_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncMoi_static_method_arg_own_twin_sync_moi(
    arg: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSyncMoi_static_method_arg_own_twin_sync_moi_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncMoi_static_method_return_own_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_NonCloneSimpleTwinSyncMoi_static_method_return_own_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_borrow_twin_sync_moi(
    arg: usize,
    expect: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_arg_borrow_twin_sync_moi_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_mut_borrow_twin_sync_moi(
    arg: usize,
    expect: i32,
    adder: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_arg_mut_borrow_twin_sync_moi_impl(arg, expect, adder)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_moi(
    arg: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_moi_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_twin_sync_moi(
    arg: usize,
    expect: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_arg_own_twin_sync_moi_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_vec_own_twin_sync_moi(
    arg: *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi,
    expect: *mut wire_cst_list_prim_i_32_loose,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_arg_vec_own_twin_sync_moi_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_borrow_twin_sync_moi(
    a: usize,
    b: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_borrow_and_borrow_twin_sync_moi_impl(a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_mut_borrow_twin_sync_moi(
    borrow: usize,
    mut_borrow: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_borrow_and_mut_borrow_twin_sync_moi_impl(borrow, mut_borrow)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_arg_twin_sync_moi(
    arg: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_callable_arg_twin_sync_moi_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_return_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_callable_return_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_dummy_twin_sync_moi(
    a: usize,
    b: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_dummy_twin_sync_moi_impl(a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_arg_borrow_twin_sync_moi(
    arg: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_enum_arg_borrow_twin_sync_moi_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_return_own_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_enum_return_own_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_sync_moi(
    arg: *mut wire_cst_enum_with_good_and_opaque_twin_sync_moi,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_sync_moi_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_arg_twin_sync_moi(
    arg: usize,
    expect: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_explicit_arg_twin_sync_moi_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_return_twin_sync_moi(
    initial: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_explicit_return_twin_sync_moi_impl(initial)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_struct_twin_sync_moi(
    arg: *mut wire_cst_struct_with_explicit_auto_opaque_field_twin_sync_moi,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_explicit_struct_twin_sync_moi_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_moi(
    a: usize,
    b: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_moi_impl(a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_arg_twin_sync_moi(
    arg: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_plus_sign_arg_twin_sync_moi_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_return_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_plus_sign_return_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_one_and_two_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_return_opaque_one_and_two_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_two_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_return_opaque_two_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_own_twin_sync_moi(
    initial: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_return_own_twin_sync_moi_impl(initial)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_vec_own_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_return_vec_own_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_stream_sink_twin_sync_moi(
    port_: i64,
) {
    wire_rust_auto_opaque_stream_sink_twin_sync_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_moi(
    arg: *mut wire_cst_struct_with_good_and_opaque_field_twin_sync_moi,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_moi_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_moi(
    arg: usize,
    expect: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_moi_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_moi(
    arg: usize,
    expect: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_moi_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_own_twin_sync_moi(
    arg: usize,
    expect: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_trait_object_arg_own_twin_sync_moi_impl(arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_two_args_twin_sync_moi(
    a: usize,
    b: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_rust_auto_opaque_two_args_twin_sync_moi_impl(a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSse_instance_method_arg_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_instance_method_arg_borrow_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSse_instance_method_arg_mut_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_instance_method_arg_mut_borrow_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSse_instance_method_arg_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_instance_method_arg_own_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSse_instance_method_getter_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_instance_method_getter_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSse_instance_method_return_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_instance_method_return_own_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSse_new_custom_name_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_new_custom_name_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSse_new_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_new_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSse_new_with_result_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_new_with_result_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSse_static_method_arg_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_static_method_arg_borrow_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSse_static_method_arg_mut_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_static_method_arg_mut_borrow_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSse_static_method_arg_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_static_method_arg_own_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSse_static_method_return_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSse_static_method_return_own_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_arg_borrow_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_mut_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_arg_mut_borrow_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_arg_own_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_vec_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_arg_vec_own_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_borrow_and_borrow_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_mut_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_borrow_and_mut_borrow_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_arg_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_callable_arg_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_return_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_callable_return_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_dummy_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_dummy_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_arg_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_enum_arg_borrow_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_return_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_enum_return_own_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_arg_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_explicit_arg_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_return_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_explicit_return_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_struct_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_explicit_struct_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_arg_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_plus_sign_arg_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_return_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_plus_sign_return_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_one_and_two_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_return_opaque_one_and_two_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_two_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_return_opaque_two_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_return_own_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_vec_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_return_vec_own_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_stream_sink_twin_sync_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_stream_sink_twin_sync_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_own_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_trait_object_arg_own_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_sse_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_two_args_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_two_args_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSseMoi_instance_method_arg_borrow_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSseMoi_instance_method_arg_borrow_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSseMoi_instance_method_arg_mut_borrow_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSseMoi_instance_method_arg_mut_borrow_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSseMoi_instance_method_arg_own_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSseMoi_instance_method_arg_own_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSseMoi_instance_method_getter_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSseMoi_instance_method_getter_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSseMoi_instance_method_return_own_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSseMoi_instance_method_return_own_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSseMoi_new_custom_name_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSseMoi_new_custom_name_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSseMoi_new_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSseMoi_new_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSseMoi_new_with_result_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSseMoi_new_with_result_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSseMoi_static_method_arg_borrow_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSseMoi_static_method_arg_borrow_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSseMoi_static_method_arg_mut_borrow_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSseMoi_static_method_arg_mut_borrow_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSseMoi_static_method_arg_own_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSseMoi_static_method_arg_own_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinSyncSseMoi_static_method_return_own_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_NonCloneSimpleTwinSyncSseMoi_static_method_return_own_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_borrow_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_arg_borrow_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_mut_borrow_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_arg_mut_borrow_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_arg_own_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_vec_own_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_arg_vec_own_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_borrow_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_borrow_and_borrow_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_mut_borrow_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_borrow_and_mut_borrow_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_arg_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_callable_arg_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_return_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_callable_return_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_dummy_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_dummy_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_arg_borrow_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_enum_arg_borrow_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_return_own_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_enum_return_own_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_arg_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_explicit_arg_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_return_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_explicit_return_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_struct_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_explicit_struct_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_arg_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_plus_sign_arg_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_return_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_plus_sign_return_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_one_and_two_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_return_opaque_one_and_two_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_two_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_return_opaque_two_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_own_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_return_own_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_vec_own_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_return_vec_own_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_stream_sink_twin_sync_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_rust_auto_opaque_stream_sink_twin_sync_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_own_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_trait_object_arg_own_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_sse_moi_impl(
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_two_args_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_rust_auto_opaque_two_args_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_frb_sync_generator_test_twin_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_frb_sync_generator_test_twin_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_create_non_clone_twin_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_create_non_clone_twin_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_create_opaque_twin_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_create_opaque_twin_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_option_rust_opaque_twin_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_option_rust_opaque_twin_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_frb_sync_generator_test_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_frb_sync_generator_test_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_create_non_clone_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_create_non_clone_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_create_opaque_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_create_opaque_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_option_rust_opaque_twin_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_option_rust_opaque_twin_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_frb_sync_generator_test_twin_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_frb_sync_generator_test_twin_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_create_non_clone_twin_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_create_non_clone_twin_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_create_opaque_twin_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_create_opaque_twin_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_option_rust_opaque_twin_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_sync_option_rust_opaque_twin_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_array_opaque_enum_twin_moi(port_: i64) {
    wire_create_array_opaque_enum_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_nested_opaque_twin_moi(port_: i64) {
    wire_create_nested_opaque_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_opaque_twin_moi(port_: i64) {
    wire_create_opaque_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_option_opaque_twin_moi(
    port_: i64,
    opaque: *mut usize,
) {
    wire_create_option_opaque_twin_moi_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_frb_generator_test_twin_moi(port_: i64) {
    wire_frb_generator_test_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_run_twin_moi(
    port_: i64,
    data: *mut wire_cst_list_RustOpaque_HideDataTwinMoi,
) {
    wire_opaque_array_run_twin_moi_impl(port_, data)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_twin_moi(port_: i64) {
    wire_opaque_array_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_run_twin_moi(
    port_: i64,
    data: *mut wire_cst_list_RustOpaque_HideDataTwinMoi,
) {
    wire_opaque_vec_run_twin_moi_impl(port_, data)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_twin_moi(port_: i64) {
    wire_opaque_vec_twin_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_enum_opaque_twin_moi(
    port_: i64,
    opaque: *mut wire_cst_enum_opaque_twin_moi,
) {
    wire_run_enum_opaque_twin_moi_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_nested_opaque_twin_moi(
    port_: i64,
    opaque: *mut wire_cst_opaque_nested_twin_moi,
) {
    wire_run_nested_opaque_twin_moi_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_non_clone_twin_moi(
    port_: i64,
    clone: usize,
) {
    wire_run_non_clone_twin_moi_impl(port_, clone)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_twin_moi(port_: i64, opaque: usize) {
    wire_run_opaque_twin_moi_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_with_delay_twin_moi(
    port_: i64,
    opaque: usize,
) {
    wire_run_opaque_with_delay_twin_moi_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_unwrap_rust_opaque_twin_moi(
    port_: i64,
    opaque: usize,
) {
    wire_unwrap_rust_opaque_twin_moi_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_array_opaque_enum_twin_rust_async(
    port_: i64,
) {
    wire_create_array_opaque_enum_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_nested_opaque_twin_rust_async(
    port_: i64,
) {
    wire_create_nested_opaque_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_opaque_twin_rust_async(port_: i64) {
    wire_create_opaque_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_option_opaque_twin_rust_async(
    port_: i64,
    opaque: *mut usize,
) {
    wire_create_option_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_frb_generator_test_twin_rust_async(port_: i64) {
    wire_frb_generator_test_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_run_twin_rust_async(
    port_: i64,
    data: *mut wire_cst_list_RustOpaque_HideDataTwinRustAsync,
) {
    wire_opaque_array_run_twin_rust_async_impl(port_, data)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_twin_rust_async(port_: i64) {
    wire_opaque_array_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_run_twin_rust_async(
    port_: i64,
    data: *mut wire_cst_list_RustOpaque_HideDataTwinRustAsync,
) {
    wire_opaque_vec_run_twin_rust_async_impl(port_, data)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_twin_rust_async(port_: i64) {
    wire_opaque_vec_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_enum_opaque_twin_rust_async(
    port_: i64,
    opaque: *mut wire_cst_enum_opaque_twin_rust_async,
) {
    wire_run_enum_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_nested_opaque_twin_rust_async(
    port_: i64,
    opaque: *mut wire_cst_opaque_nested_twin_rust_async,
) {
    wire_run_nested_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_non_clone_twin_rust_async(
    port_: i64,
    clone: usize,
) {
    wire_run_non_clone_twin_rust_async_impl(port_, clone)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_twin_rust_async(
    port_: i64,
    opaque: usize,
) {
    wire_run_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_with_delay_twin_rust_async(
    port_: i64,
    opaque: usize,
) {
    wire_run_opaque_with_delay_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_unwrap_rust_opaque_twin_rust_async(
    port_: i64,
    opaque: usize,
) {
    wire_unwrap_rust_opaque_twin_rust_async_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_array_opaque_enum_twin_rust_async_moi(
    port_: i64,
) {
    wire_create_array_opaque_enum_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_nested_opaque_twin_rust_async_moi(
    port_: i64,
) {
    wire_create_nested_opaque_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_opaque_twin_rust_async_moi(port_: i64) {
    wire_create_opaque_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_option_opaque_twin_rust_async_moi(
    port_: i64,
    opaque: *mut usize,
) {
    wire_create_option_opaque_twin_rust_async_moi_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_frb_generator_test_twin_rust_async_moi(
    port_: i64,
) {
    wire_frb_generator_test_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_run_twin_rust_async_moi(
    port_: i64,
    data: *mut wire_cst_list_RustOpaque_HideDataTwinRustAsyncMoi,
) {
    wire_opaque_array_run_twin_rust_async_moi_impl(port_, data)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_twin_rust_async_moi(port_: i64) {
    wire_opaque_array_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_run_twin_rust_async_moi(
    port_: i64,
    data: *mut wire_cst_list_RustOpaque_HideDataTwinRustAsyncMoi,
) {
    wire_opaque_vec_run_twin_rust_async_moi_impl(port_, data)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_twin_rust_async_moi(port_: i64) {
    wire_opaque_vec_twin_rust_async_moi_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_enum_opaque_twin_rust_async_moi(
    port_: i64,
    opaque: *mut wire_cst_enum_opaque_twin_rust_async_moi,
) {
    wire_run_enum_opaque_twin_rust_async_moi_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_nested_opaque_twin_rust_async_moi(
    port_: i64,
    opaque: *mut wire_cst_opaque_nested_twin_rust_async_moi,
) {
    wire_run_nested_opaque_twin_rust_async_moi_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_non_clone_twin_rust_async_moi(
    port_: i64,
    clone: usize,
) {
    wire_run_non_clone_twin_rust_async_moi_impl(port_, clone)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_twin_rust_async_moi(
    port_: i64,
    opaque: usize,
) {
    wire_run_opaque_twin_rust_async_moi_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_with_delay_twin_rust_async_moi(
    port_: i64,
    opaque: usize,
) {
    wire_run_opaque_with_delay_twin_rust_async_moi_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_unwrap_rust_opaque_twin_rust_async_moi(
    port_: i64,
    opaque: usize,
) {
    wire_unwrap_rust_opaque_twin_rust_async_moi_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_array_opaque_enum_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_array_opaque_enum_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_nested_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_nested_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_option_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_option_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_frb_generator_test_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_frb_generator_test_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_run_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_array_run_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_array_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_run_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_vec_run_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_vec_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_enum_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_enum_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_nested_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_nested_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_non_clone_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_non_clone_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_with_delay_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_opaque_with_delay_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_unwrap_rust_opaque_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_unwrap_rust_opaque_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_array_opaque_enum_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_array_opaque_enum_twin_rust_async_sse_moi_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_nested_opaque_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_nested_opaque_twin_rust_async_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_opaque_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_opaque_twin_rust_async_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_option_opaque_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_option_opaque_twin_rust_async_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_frb_generator_test_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_frb_generator_test_twin_rust_async_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_run_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_array_run_twin_rust_async_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_array_twin_rust_async_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_run_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_vec_run_twin_rust_async_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_vec_twin_rust_async_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_enum_opaque_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_enum_opaque_twin_rust_async_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_nested_opaque_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_nested_opaque_twin_rust_async_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_non_clone_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_non_clone_twin_rust_async_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_opaque_twin_rust_async_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_with_delay_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_opaque_with_delay_twin_rust_async_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_unwrap_rust_opaque_twin_rust_async_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_unwrap_rust_opaque_twin_rust_async_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_array_opaque_enum_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_array_opaque_enum_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_nested_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_nested_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_option_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_option_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_frb_generator_test_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_frb_generator_test_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_run_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_array_run_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_array_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_run_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_vec_run_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_vec_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_enum_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_enum_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_nested_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_nested_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_non_clone_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_non_clone_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_with_delay_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_opaque_with_delay_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_unwrap_rust_opaque_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_unwrap_rust_opaque_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_array_opaque_enum_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_array_opaque_enum_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_nested_opaque_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_nested_opaque_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_opaque_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_opaque_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_option_opaque_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_create_option_opaque_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_frb_generator_test_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_frb_generator_test_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_run_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_array_run_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_array_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_run_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_vec_run_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_opaque_vec_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_enum_opaque_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_enum_opaque_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_nested_opaque_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_nested_opaque_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_non_clone_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_non_clone_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_opaque_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_with_delay_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_run_opaque_with_delay_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_unwrap_rust_opaque_twin_sse_moi(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_unwrap_rust_opaque_twin_sse_moi_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_array_opaque_enum_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_create_array_opaque_enum_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_nested_opaque_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_create_nested_opaque_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_opaque_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_create_opaque_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_option_opaque_twin_sync(
    opaque: *mut usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_create_option_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_frb_generator_test_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_frb_generator_test_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_run_twin_sync(
    data: *mut wire_cst_list_RustOpaque_HideDataTwinSync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_opaque_array_run_twin_sync_impl(data)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_opaque_array_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_run_twin_sync(
    data: *mut wire_cst_list_RustOpaque_HideDataTwinSync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_opaque_vec_run_twin_sync_impl(data)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_twin_sync(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_opaque_vec_twin_sync_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_enum_opaque_twin_sync(
    opaque: *mut wire_cst_enum_opaque_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_run_enum_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_nested_opaque_twin_sync(
    opaque: *mut wire_cst_opaque_nested_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_run_nested_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_non_clone_twin_sync(
    clone: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_run_non_clone_twin_sync_impl(clone)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_twin_sync(
    opaque: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_run_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_with_delay_twin_sync(
    opaque: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_run_opaque_with_delay_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_unwrap_rust_opaque_twin_sync(
    opaque: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_unwrap_rust_opaque_twin_sync_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_array_opaque_enum_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_create_array_opaque_enum_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_nested_opaque_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_create_nested_opaque_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_opaque_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_create_opaque_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_option_opaque_twin_sync_moi(
    opaque: *mut usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_create_option_opaque_twin_sync_moi_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_frb_generator_test_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_frb_generator_test_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_run_twin_sync_moi(
    data: *mut wire_cst_list_RustOpaque_HideDataTwinSyncMoi,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_opaque_array_run_twin_sync_moi_impl(data)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_opaque_array_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_run_twin_sync_moi(
    data: *mut wire_cst_list_RustOpaque_HideDataTwinSyncMoi,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_opaque_vec_run_twin_sync_moi_impl(data)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_twin_sync_moi(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_opaque_vec_twin_sync_moi_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_enum_opaque_twin_sync_moi(
    opaque: *mut wire_cst_enum_opaque_twin_sync_moi,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_run_enum_opaque_twin_sync_moi_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_nested_opaque_twin_sync_moi(
    opaque: *mut wire_cst_opaque_nested_twin_sync_moi,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_run_nested_opaque_twin_sync_moi_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_non_clone_twin_sync_moi(
    clone: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_run_non_clone_twin_sync_moi_impl(clone)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_twin_sync_moi(
    opaque: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_run_opaque_twin_sync_moi_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_with_delay_twin_sync_moi(
    opaque: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_run_opaque_with_delay_twin_sync_moi_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_unwrap_rust_opaque_twin_sync_moi(
    opaque: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_unwrap_rust_opaque_twin_sync_moi_impl(opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_array_opaque_enum_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_create_array_opaque_enum_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_nested_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_create_nested_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_create_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_option_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_create_option_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_frb_generator_test_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_frb_generator_test_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_run_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_opaque_array_run_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_opaque_array_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_run_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_opaque_vec_run_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_opaque_vec_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_enum_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_run_enum_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_nested_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_run_nested_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_non_clone_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_run_non_clone_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_run_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_with_delay_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_run_opaque_with_delay_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_unwrap_rust_opaque_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_unwrap_rust_opaque_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_array_opaque_enum_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_create_array_opaque_enum_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_nested_opaque_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_create_nested_opaque_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_opaque_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_create_opaque_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_option_opaque_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_create_option_opaque_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_frb_generator_test_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_frb_generator_test_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_run_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_opaque_array_run_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_opaque_array_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_run_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_opaque_vec_run_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_opaque_vec_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_enum_opaque_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_run_enum_opaque_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_nested_opaque_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_run_nested_opaque_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_non_clone_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_run_non_clone_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_run_opaque_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_with_delay_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_run_opaque_with_delay_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_unwrap_rust_opaque_twin_sync_sse_moi(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_unwrap_rust_opaque_twin_sync_sse_moi_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_simple_adder_twin_rust_async(
    port_: i64,
    a: i32,
    b: i32,
) {
    wire_simple_adder_twin_rust_async_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_simple_adder_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_simple_adder_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_simple_adder_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_simple_adder_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_simple_adder_twin_sync(
    a: i32,
    b: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_simple_adder_twin_sync_impl(a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_simple_adder_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_simple_adder_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_stream_realistic_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_stream_realistic_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_stream_return_error_twin_rust_async(
    port_: i64,
) {
    wire_func_stream_return_error_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_stream_return_panic_twin_rust_async(
    port_: i64,
) {
    wire_func_stream_return_panic_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_stream_sink_arg_position_twin_rust_async(
    port_: i64,
    a: u32,
    b: u32,
) {
    wire_func_stream_sink_arg_position_twin_rust_async_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_stream_of_struct_twin_rust_async(
    port_: i64,
) {
    wire_handle_stream_of_struct_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_stream_sink_at_1_twin_rust_async(
    port_: i64,
    key: u32,
    max: u32,
) {
    wire_handle_stream_sink_at_1_twin_rust_async_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_stream_sink_at_2_twin_rust_async(
    port_: i64,
    key: u32,
    max: u32,
) {
    wire_handle_stream_sink_at_2_twin_rust_async_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_stream_sink_at_3_twin_rust_async(
    port_: i64,
    key: u32,
    max: u32,
) {
    wire_handle_stream_sink_at_3_twin_rust_async_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_stream_sink_fixed_sized_primitive_array_twin_rust_async(
    port_: i64,
) {
    wire_stream_sink_fixed_sized_primitive_array_twin_rust_async_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_stream_return_error_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_stream_return_error_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_stream_return_panic_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_stream_return_panic_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_stream_sink_arg_position_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_stream_sink_arg_position_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_stream_of_struct_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_stream_of_struct_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_stream_sink_at_1_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_stream_sink_at_1_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_stream_sink_at_2_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_stream_sink_at_2_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_stream_sink_at_3_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_stream_sink_at_3_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_stream_sink_fixed_sized_primitive_array_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_stream_sink_fixed_sized_primitive_array_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_stream_return_error_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_stream_return_error_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_stream_return_panic_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_stream_return_panic_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_stream_sink_arg_position_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_stream_sink_arg_position_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_stream_of_struct_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_stream_of_struct_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_stream_sink_at_1_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_stream_sink_at_1_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_stream_sink_at_2_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_stream_sink_at_2_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_stream_sink_at_3_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_stream_sink_at_3_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_stream_sink_fixed_sized_primitive_array_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_stream_sink_fixed_sized_primitive_array_twin_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_struct_with_one_field_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_struct_with_one_field_twin_rust_async,
) {
    wire_func_struct_with_one_field_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_struct_with_two_field_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_struct_with_two_field_twin_rust_async,
) {
    wire_func_struct_with_two_field_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_struct_with_zero_field_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_struct_with_zero_field_twin_rust_async,
) {
    wire_func_struct_with_zero_field_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_tuple_struct_with_one_field_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_tuple_struct_with_one_field_twin_rust_async,
) {
    wire_func_tuple_struct_with_one_field_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_tuple_struct_with_two_field_twin_rust_async(
    port_: i64,
    arg: *mut wire_cst_tuple_struct_with_two_field_twin_rust_async,
) {
    wire_func_tuple_struct_with_two_field_twin_rust_async_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_struct_with_one_field_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_struct_with_one_field_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_struct_with_two_field_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_struct_with_two_field_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_struct_with_zero_field_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_struct_with_zero_field_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_tuple_struct_with_one_field_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_tuple_struct_with_one_field_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_tuple_struct_with_two_field_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_tuple_struct_with_two_field_twin_rust_async_sse_impl(
        port_,
        ptr_,
        rust_vec_len_,
        data_len_,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_struct_with_one_field_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_struct_with_one_field_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_struct_with_two_field_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_struct_with_two_field_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_struct_with_zero_field_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_struct_with_zero_field_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_tuple_struct_with_one_field_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_tuple_struct_with_one_field_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_tuple_struct_with_two_field_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_func_tuple_struct_with_two_field_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_struct_with_one_field_twin_sync(
    arg: *mut wire_cst_struct_with_one_field_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_struct_with_one_field_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_struct_with_two_field_twin_sync(
    arg: *mut wire_cst_struct_with_two_field_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_struct_with_two_field_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_struct_with_zero_field_twin_sync(
    arg: *mut wire_cst_struct_with_zero_field_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_struct_with_zero_field_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_tuple_struct_with_one_field_twin_sync(
    arg: *mut wire_cst_tuple_struct_with_one_field_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_tuple_struct_with_one_field_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_tuple_struct_with_two_field_twin_sync(
    arg: *mut wire_cst_tuple_struct_with_two_field_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_func_tuple_struct_with_two_field_twin_sync_impl(arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_struct_with_one_field_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_struct_with_one_field_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_struct_with_two_field_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_struct_with_two_field_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_struct_with_zero_field_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_struct_with_zero_field_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_tuple_struct_with_one_field_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_tuple_struct_with_one_field_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_tuple_struct_with_two_field_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_func_tuple_struct_with_two_field_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_tuple_2_twin_rust_async(
    port_: i64,
    value: *mut wire_cst_list_record_string_i_32,
) {
    wire_test_tuple_2_twin_rust_async_impl(port_, value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_tuple_twin_rust_async(
    port_: i64,
    value: *mut wire_cst_record_string_i_32,
) {
    wire_test_tuple_twin_rust_async_impl(port_, value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_tuple_2_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_tuple_2_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_tuple_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_tuple_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_tuple_2_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_tuple_2_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_tuple_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_test_tuple_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_tuple_2_twin_sync(
    value: *mut wire_cst_list_record_string_i_32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_tuple_2_twin_sync_impl(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_tuple_twin_sync(
    value: *mut wire_cst_record_string_i_32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_test_tuple_twin_sync_impl(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_tuple_2_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_tuple_2_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_tuple_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_test_tuple_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_type_alias_id_twin_rust_async(
    port_: i64,
    input: u64,
) {
    wire_handle_type_alias_id_twin_rust_async_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_type_alias_model_twin_rust_async(
    port_: i64,
    input: u64,
) {
    wire_handle_type_alias_model_twin_rust_async_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_type_nest_alias_id_twin_rust_async(
    port_: i64,
    input: u64,
) {
    wire_handle_type_nest_alias_id_twin_rust_async_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_type_alias_id_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_type_alias_id_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_type_alias_model_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_type_alias_model_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_type_nest_alias_id_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_type_nest_alias_id_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_type_alias_id_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_type_alias_id_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_type_alias_model_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_type_alias_model_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_type_nest_alias_id_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_type_nest_alias_id_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_type_alias_id_twin_sync(
    input: u64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_type_alias_id_twin_sync_impl(input)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_type_alias_model_twin_sync(
    input: u64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_type_alias_model_twin_sync_impl(input)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_type_nest_alias_id_twin_sync(
    input: u64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_type_nest_alias_id_twin_sync_impl(input)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_type_alias_id_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_type_alias_id_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_type_alias_model_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_type_alias_model_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_type_nest_alias_id_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_type_nest_alias_id_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_nested_uuids_twin_rust_async(
    port_: i64,
    ids: *mut wire_cst_feature_uuid_twin_rust_async,
) {
    wire_handle_nested_uuids_twin_rust_async_impl(port_, ids)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_uuid_twin_rust_async(
    port_: i64,
    id: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_handle_uuid_twin_rust_async_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_uuids_twin_rust_async(
    port_: i64,
    ids: *mut wire_cst_list_Uuid,
) {
    wire_handle_uuids_twin_rust_async_impl(port_, ids)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_nested_uuids_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_nested_uuids_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_uuid_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_uuid_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_uuids_twin_rust_async_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_uuids_twin_rust_async_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_nested_uuids_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_nested_uuids_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_uuid_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_uuid_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_uuids_twin_sse(
    port_: i64,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    wire_handle_uuids_twin_sse_impl(port_, ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_nested_uuids_twin_sync(
    ids: *mut wire_cst_feature_uuid_twin_sync,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_nested_uuids_twin_sync_impl(ids)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_uuid_twin_sync(
    id: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_uuid_twin_sync_impl(id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_uuids_twin_sync(
    ids: *mut wire_cst_list_Uuid,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_handle_uuids_twin_sync_impl(ids)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_nested_uuids_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_nested_uuids_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_uuid_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_uuid_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_uuids_twin_sync_sse(
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    wire_handle_uuids_twin_sync_sse_impl(ptr_, rust_vec_len_, data_len_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_more_than_just_one_raw_string_struct_twin_normal(
    port_: i64,
) {
    wire_test_more_than_just_one_raw_string_struct_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_raw_string_item_struct_twin_normal(
    port_: i64,
) {
    wire_test_raw_string_item_struct_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinNormal_instance_method_arg_borrow_twin_normal(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinNormal_instance_method_arg_borrow_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinNormal_instance_method_arg_mut_borrow_twin_normal(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinNormal_instance_method_arg_mut_borrow_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinNormal_instance_method_arg_own_twin_normal(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinNormal_instance_method_arg_own_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinNormal_instance_method_getter_twin_normal(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinNormal_instance_method_getter_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinNormal_instance_method_return_own_twin_normal(
    port_: i64,
    that: usize,
) {
    wire_NonCloneSimpleTwinNormal_instance_method_return_own_twin_normal_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinNormal_new_custom_name_twin_normal(
    port_: i64,
) {
    wire_NonCloneSimpleTwinNormal_new_custom_name_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinNormal_new_twin_normal(
    port_: i64,
) {
    wire_NonCloneSimpleTwinNormal_new_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinNormal_new_with_result_twin_normal(
    port_: i64,
) {
    wire_NonCloneSimpleTwinNormal_new_with_result_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinNormal_static_method_arg_borrow_twin_normal(
    port_: i64,
    arg: usize,
) {
    wire_NonCloneSimpleTwinNormal_static_method_arg_borrow_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinNormal_static_method_arg_mut_borrow_twin_normal(
    port_: i64,
    arg: usize,
) {
    wire_NonCloneSimpleTwinNormal_static_method_arg_mut_borrow_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinNormal_static_method_arg_own_twin_normal(
    port_: i64,
    arg: usize,
) {
    wire_NonCloneSimpleTwinNormal_static_method_arg_own_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_NonCloneSimpleTwinNormal_static_method_return_own_twin_normal(
    port_: i64,
) {
    wire_NonCloneSimpleTwinNormal_static_method_return_own_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_borrow_twin_normal(
    port_: i64,
    arg: usize,
    expect: i32,
) {
    wire_rust_auto_opaque_arg_borrow_twin_normal_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_mut_borrow_twin_normal(
    port_: i64,
    arg: usize,
    expect: i32,
    adder: i32,
) {
    wire_rust_auto_opaque_arg_mut_borrow_twin_normal_impl(port_, arg, expect, adder)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_and_return_own_twin_normal(
    port_: i64,
    arg: usize,
) {
    wire_rust_auto_opaque_arg_own_and_return_own_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_own_twin_normal(
    port_: i64,
    arg: usize,
    expect: i32,
) {
    wire_rust_auto_opaque_arg_own_twin_normal_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_arg_vec_own_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal,
    expect: *mut wire_cst_list_prim_i_32_loose,
) {
    wire_rust_auto_opaque_arg_vec_own_twin_normal_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_borrow_twin_normal(
    port_: i64,
    a: usize,
    b: usize,
) {
    wire_rust_auto_opaque_borrow_and_borrow_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_borrow_and_mut_borrow_twin_normal(
    port_: i64,
    borrow: usize,
    mut_borrow: usize,
) {
    wire_rust_auto_opaque_borrow_and_mut_borrow_twin_normal_impl(port_, borrow, mut_borrow)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_arg_twin_normal(
    port_: i64,
    arg: usize,
) {
    wire_rust_auto_opaque_callable_arg_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_callable_return_twin_normal(
    port_: i64,
) {
    wire_rust_auto_opaque_callable_return_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_dummy_twin_normal(
    port_: i64,
    a: usize,
    b: usize,
) {
    wire_rust_auto_opaque_dummy_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_arg_borrow_twin_normal(
    port_: i64,
    arg: usize,
) {
    wire_rust_auto_opaque_enum_arg_borrow_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_return_own_twin_normal(
    port_: i64,
) {
    wire_rust_auto_opaque_enum_return_own_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_normal(
    port_: i64,
    arg: *mut wire_cst_enum_with_good_and_opaque_twin_normal,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_normal(
    port_: i64,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_normal(
    port_: i64,
) {
    wire_rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_arg_twin_normal(
    port_: i64,
    arg: usize,
    expect: i32,
) {
    wire_rust_auto_opaque_explicit_arg_twin_normal_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_return_twin_normal(
    port_: i64,
    initial: i32,
) {
    wire_rust_auto_opaque_explicit_return_twin_normal_impl(port_, initial)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_explicit_struct_twin_normal(
    port_: i64,
    arg: *mut wire_cst_struct_with_explicit_auto_opaque_field_twin_normal,
) {
    wire_rust_auto_opaque_explicit_struct_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_normal_and_opaque_arg_twin_normal(
    port_: i64,
    a: usize,
    b: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_rust_auto_opaque_normal_and_opaque_arg_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_arg_twin_normal(
    port_: i64,
    arg: usize,
) {
    wire_rust_auto_opaque_plus_sign_arg_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_plus_sign_return_twin_normal(
    port_: i64,
) {
    wire_rust_auto_opaque_plus_sign_return_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_one_and_two_twin_normal(
    port_: i64,
) {
    wire_rust_auto_opaque_return_opaque_one_and_two_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_opaque_two_twin_normal(
    port_: i64,
) {
    wire_rust_auto_opaque_return_opaque_two_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_own_twin_normal(
    port_: i64,
    initial: i32,
) {
    wire_rust_auto_opaque_return_own_twin_normal_impl(port_, initial)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_return_vec_own_twin_normal(
    port_: i64,
) {
    wire_rust_auto_opaque_return_vec_own_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_stream_sink_twin_normal(
    port_: i64,
) {
    wire_rust_auto_opaque_stream_sink_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal(
    port_: i64,
    arg: *mut wire_cst_struct_with_good_and_opaque_field_twin_normal,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal(
    port_: i64,
) {
    wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_borrow_twin_normal(
    port_: i64,
    arg: usize,
    expect: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_rust_auto_opaque_trait_object_arg_borrow_twin_normal_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal(
    port_: i64,
    arg: usize,
    expect: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_arg_own_twin_normal(
    port_: i64,
    arg: usize,
    expect: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_rust_auto_opaque_trait_object_arg_own_twin_normal_impl(port_, arg, expect)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_one_twin_normal(
    port_: i64,
) {
    wire_rust_auto_opaque_trait_object_return_own_one_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_trait_object_return_own_two_twin_normal(
    port_: i64,
) {
    wire_rust_auto_opaque_trait_object_return_own_two_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_rust_auto_opaque_two_args_twin_normal(
    port_: i64,
    a: usize,
    b: usize,
) {
    wire_rust_auto_opaque_two_args_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_array_opaque_enum_twin_normal(
    port_: i64,
) {
    wire_create_array_opaque_enum_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_nested_opaque_twin_normal(port_: i64) {
    wire_create_nested_opaque_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_opaque_twin_normal(port_: i64) {
    wire_create_opaque_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_create_option_opaque_twin_normal(
    port_: i64,
    opaque: *mut usize,
) {
    wire_create_option_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_frb_generator_test_twin_normal(port_: i64) {
    wire_frb_generator_test_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_run_twin_normal(
    port_: i64,
    data: *mut wire_cst_list_RustOpaque_HideDataTwinNormal,
) {
    wire_opaque_array_run_twin_normal_impl(port_, data)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_array_twin_normal(port_: i64) {
    wire_opaque_array_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_run_twin_normal(
    port_: i64,
    data: *mut wire_cst_list_RustOpaque_HideDataTwinNormal,
) {
    wire_opaque_vec_run_twin_normal_impl(port_, data)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_opaque_vec_twin_normal(port_: i64) {
    wire_opaque_vec_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_enum_opaque_twin_normal(
    port_: i64,
    opaque: *mut wire_cst_enum_opaque_twin_normal,
) {
    wire_run_enum_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_nested_opaque_twin_normal(
    port_: i64,
    opaque: *mut wire_cst_opaque_nested_twin_normal,
) {
    wire_run_nested_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_non_clone_twin_normal(
    port_: i64,
    clone: usize,
) {
    wire_run_non_clone_twin_normal_impl(port_, clone)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_twin_normal(
    port_: i64,
    opaque: usize,
) {
    wire_run_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_run_opaque_with_delay_twin_normal(
    port_: i64,
    opaque: usize,
) {
    wire_run_opaque_with_delay_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_unwrap_rust_opaque_twin_normal(
    port_: i64,
    opaque: usize,
) {
    wire_unwrap_rust_opaque_twin_normal_impl(port_, opaque)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_frb_sync_generator_test_twin_normal(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_frb_sync_generator_test_twin_normal_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_create_non_clone_twin_normal(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_create_non_clone_twin_normal_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_create_opaque_twin_normal(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_create_opaque_twin_normal_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_sync_option_rust_opaque_twin_normal(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_sync_option_rust_opaque_twin_normal_impl()
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_simple_adder_twin_normal(
    port_: i64,
    a: i32,
    b: i32,
) {
    wire_simple_adder_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_stream_return_error_twin_normal(
    port_: i64,
) {
    wire_func_stream_return_error_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_stream_return_panic_twin_normal(
    port_: i64,
) {
    wire_func_stream_return_panic_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_stream_sink_arg_position_twin_normal(
    port_: i64,
    a: u32,
    b: u32,
) {
    wire_func_stream_sink_arg_position_twin_normal_impl(port_, a, b)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_stream_of_struct_twin_normal(
    port_: i64,
) {
    wire_handle_stream_of_struct_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_stream_sink_at_1_twin_normal(
    port_: i64,
    key: u32,
    max: u32,
) {
    wire_handle_stream_sink_at_1_twin_normal_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_stream_sink_at_2_twin_normal(
    port_: i64,
    key: u32,
    max: u32,
) {
    wire_handle_stream_sink_at_2_twin_normal_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_stream_sink_at_3_twin_normal(
    port_: i64,
    key: u32,
    max: u32,
) {
    wire_handle_stream_sink_at_3_twin_normal_impl(port_, key, max)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_stream_sink_fixed_sized_primitive_array_twin_normal(
    port_: i64,
) {
    wire_stream_sink_fixed_sized_primitive_array_twin_normal_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_stream_realistic_twin_normal(
    port_: i64,
    arg: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_func_stream_realistic_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_struct_with_one_field_twin_normal(
    port_: i64,
    arg: *mut wire_cst_struct_with_one_field_twin_normal,
) {
    wire_func_struct_with_one_field_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_struct_with_two_field_twin_normal(
    port_: i64,
    arg: *mut wire_cst_struct_with_two_field_twin_normal,
) {
    wire_func_struct_with_two_field_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_struct_with_zero_field_twin_normal(
    port_: i64,
    arg: *mut wire_cst_struct_with_zero_field_twin_normal,
) {
    wire_func_struct_with_zero_field_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_tuple_struct_with_one_field_twin_normal(
    port_: i64,
    arg: *mut wire_cst_tuple_struct_with_one_field_twin_normal,
) {
    wire_func_tuple_struct_with_one_field_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_func_tuple_struct_with_two_field_twin_normal(
    port_: i64,
    arg: *mut wire_cst_tuple_struct_with_two_field_twin_normal,
) {
    wire_func_tuple_struct_with_two_field_twin_normal_impl(port_, arg)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_tuple_2_twin_normal(
    port_: i64,
    value: *mut wire_cst_list_record_string_i_32,
) {
    wire_test_tuple_2_twin_normal_impl(port_, value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_test_tuple_twin_normal(
    port_: i64,
    value: *mut wire_cst_record_string_i_32,
) {
    wire_test_tuple_twin_normal_impl(port_, value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_type_alias_id_twin_normal(
    port_: i64,
    input: u64,
) {
    wire_handle_type_alias_id_twin_normal_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_type_alias_model_twin_normal(
    port_: i64,
    input: u64,
) {
    wire_handle_type_alias_model_twin_normal_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_type_nest_alias_id_twin_normal(
    port_: i64,
    input: u64,
) {
    wire_handle_type_nest_alias_id_twin_normal_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_nested_uuids_twin_normal(
    port_: i64,
    ids: *mut wire_cst_feature_uuid_twin_normal,
) {
    wire_handle_nested_uuids_twin_normal_impl(port_, ids)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_uuid_twin_normal(
    port_: i64,
    id: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_handle_uuid_twin_normal_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_wire_handle_uuids_twin_normal(
    port_: i64,
    ids: *mut wire_cst_list_Uuid,
) {
    wire_handle_uuids_twin_normal_impl(port_, ids)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_BoxdynDartDebugTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Box<dyn DartDebugTwinMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_BoxdynDartDebugTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Box<dyn DartDebugTwinMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_BoxdynDartDebugTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Box<dyn DartDebugTwinNormal>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_BoxdynDartDebugTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Box<dyn DartDebugTwinNormal>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_BoxdynDartDebugTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Box<dyn DartDebugTwinRustAsync>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_BoxdynDartDebugTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Box<dyn DartDebugTwinRustAsync>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_BoxdynDartDebugTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Box<dyn DartDebugTwinRustAsyncMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_BoxdynDartDebugTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Box<dyn DartDebugTwinRustAsyncMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_BoxdynDartDebugTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Box<dyn DartDebugTwinRustAsyncSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_BoxdynDartDebugTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Box<dyn DartDebugTwinRustAsyncSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_BoxdynDartDebugTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Box<dyn DartDebugTwinRustAsyncSseMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_BoxdynDartDebugTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Box<dyn DartDebugTwinRustAsyncSseMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_BoxdynDartDebugTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Box<dyn DartDebugTwinSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_BoxdynDartDebugTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Box<dyn DartDebugTwinSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_BoxdynDartDebugTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Box<dyn DartDebugTwinSseMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_BoxdynDartDebugTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Box<dyn DartDebugTwinSseMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_BoxdynDartDebugTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Box<dyn DartDebugTwinSync>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_BoxdynDartDebugTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Box<dyn DartDebugTwinSync>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_BoxdynDartDebugTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Box<dyn DartDebugTwinSyncMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_BoxdynDartDebugTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Box<dyn DartDebugTwinSyncMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_BoxdynDartDebugTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Box<dyn DartDebugTwinSyncSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_BoxdynDartDebugTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Box<dyn DartDebugTwinSyncSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_BoxdynDartDebugTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Box<dyn DartDebugTwinSyncSseMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_BoxdynDartDebugTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Box<dyn DartDebugTwinSyncSseMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_FrbOpaqueReturnTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<FrbOpaqueReturnTwinMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueReturnTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<FrbOpaqueReturnTwinMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_FrbOpaqueReturnTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<FrbOpaqueReturnTwinNormal>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueReturnTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<FrbOpaqueReturnTwinNormal>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_FrbOpaqueReturnTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<FrbOpaqueReturnTwinRustAsync>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueReturnTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<FrbOpaqueReturnTwinRustAsync>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_FrbOpaqueReturnTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<FrbOpaqueReturnTwinRustAsyncMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueReturnTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<FrbOpaqueReturnTwinRustAsyncMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_FrbOpaqueReturnTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<FrbOpaqueReturnTwinRustAsyncSse>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueReturnTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<FrbOpaqueReturnTwinRustAsyncSse>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_FrbOpaqueReturnTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<FrbOpaqueReturnTwinRustAsyncSseMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueReturnTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<FrbOpaqueReturnTwinRustAsyncSseMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_FrbOpaqueReturnTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<FrbOpaqueReturnTwinSse>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueReturnTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<FrbOpaqueReturnTwinSse>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_FrbOpaqueReturnTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<FrbOpaqueReturnTwinSseMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueReturnTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<FrbOpaqueReturnTwinSseMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_FrbOpaqueReturnTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<FrbOpaqueReturnTwinSync>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueReturnTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<FrbOpaqueReturnTwinSync>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_FrbOpaqueReturnTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<FrbOpaqueReturnTwinSyncMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueReturnTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<FrbOpaqueReturnTwinSyncMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_FrbOpaqueReturnTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<FrbOpaqueReturnTwinSyncSse>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueReturnTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<FrbOpaqueReturnTwinSyncSse>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_FrbOpaqueReturnTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<FrbOpaqueReturnTwinSyncSseMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueReturnTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<FrbOpaqueReturnTwinSyncSseMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_FrbOpaqueSyncReturnTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<FrbOpaqueSyncReturnTwinMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueSyncReturnTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<FrbOpaqueSyncReturnTwinMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_FrbOpaqueSyncReturnTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<FrbOpaqueSyncReturnTwinNormal>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueSyncReturnTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<FrbOpaqueSyncReturnTwinNormal>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_FrbOpaqueSyncReturnTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<FrbOpaqueSyncReturnTwinSse>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueSyncReturnTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<FrbOpaqueSyncReturnTwinSse>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_FrbOpaqueSyncReturnTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<FrbOpaqueSyncReturnTwinSseMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueSyncReturnTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<FrbOpaqueSyncReturnTwinSseMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_HideDataAnotherTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<HideDataAnotherTwinMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_HideDataAnotherTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<HideDataAnotherTwinMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_HideDataAnotherTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<HideDataAnotherTwinNormal>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_HideDataAnotherTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<HideDataAnotherTwinNormal>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_HideDataAnotherTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<HideDataAnotherTwinSse>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_HideDataAnotherTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<HideDataAnotherTwinSse>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_HideDataAnotherTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<HideDataAnotherTwinSseMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_HideDataAnotherTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<HideDataAnotherTwinSseMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_HideDataTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<HideDataTwinMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_HideDataTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<HideDataTwinMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_HideDataTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<HideDataTwinNormal>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_HideDataTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<HideDataTwinNormal>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_HideDataTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<HideDataTwinRustAsync>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_HideDataTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<HideDataTwinRustAsync>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_HideDataTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<HideDataTwinRustAsyncMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_HideDataTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<HideDataTwinRustAsyncMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_HideDataTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<HideDataTwinRustAsyncSse>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_HideDataTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<HideDataTwinRustAsyncSse>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_HideDataTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<HideDataTwinRustAsyncSseMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_HideDataTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<HideDataTwinRustAsyncSseMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_HideDataTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<HideDataTwinSse>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_HideDataTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<HideDataTwinSse>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_HideDataTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<HideDataTwinSseMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_HideDataTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<HideDataTwinSseMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_HideDataTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<HideDataTwinSync>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_HideDataTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<HideDataTwinSync>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_HideDataTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<HideDataTwinSyncMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_HideDataTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<HideDataTwinSyncMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_HideDataTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<HideDataTwinSyncSse>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_HideDataTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<HideDataTwinSyncSse>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_HideDataTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<HideDataTwinSyncSseMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_HideDataTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<HideDataTwinSyncSseMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Mutex<HideDataTwinMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Mutex<HideDataTwinMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Mutex<HideDataTwinNormal>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Mutex<HideDataTwinNormal>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Mutex<HideDataTwinRustAsync>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Mutex<HideDataTwinRustAsync>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Mutex<HideDataTwinRustAsyncMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Mutex<HideDataTwinRustAsyncMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Mutex<HideDataTwinRustAsyncSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Mutex<HideDataTwinRustAsyncSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Mutex<HideDataTwinRustAsyncSseMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Mutex<HideDataTwinRustAsyncSseMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Mutex<HideDataTwinSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Mutex<HideDataTwinSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Mutex<HideDataTwinSseMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Mutex<HideDataTwinSseMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Mutex<HideDataTwinSync>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Mutex<HideDataTwinSync>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Mutex<HideDataTwinSyncMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Mutex<HideDataTwinSyncMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Mutex<HideDataTwinSyncSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Mutex<HideDataTwinSyncSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Mutex<HideDataTwinSyncSseMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<Mutex<HideDataTwinSyncSseMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_NonCloneDataTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<NonCloneDataTwinMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_NonCloneDataTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<NonCloneDataTwinMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_NonCloneDataTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<NonCloneDataTwinNormal>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_NonCloneDataTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<NonCloneDataTwinNormal>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_NonCloneDataTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<NonCloneDataTwinRustAsync>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_NonCloneDataTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<NonCloneDataTwinRustAsync>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_NonCloneDataTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<NonCloneDataTwinRustAsyncMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_NonCloneDataTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<NonCloneDataTwinRustAsyncMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_NonCloneDataTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<NonCloneDataTwinRustAsyncSse>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_NonCloneDataTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<NonCloneDataTwinRustAsyncSse>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_NonCloneDataTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<NonCloneDataTwinRustAsyncSseMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_NonCloneDataTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<NonCloneDataTwinRustAsyncSseMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_NonCloneDataTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<NonCloneDataTwinSse>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_NonCloneDataTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<NonCloneDataTwinSse>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_NonCloneDataTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<NonCloneDataTwinSseMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_NonCloneDataTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<NonCloneDataTwinSseMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_NonCloneDataTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<NonCloneDataTwinSync>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_NonCloneDataTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<NonCloneDataTwinSync>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_NonCloneDataTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<NonCloneDataTwinSyncMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_NonCloneDataTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<NonCloneDataTwinSyncMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_NonCloneDataTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<NonCloneDataTwinSyncSse>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_NonCloneDataTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<NonCloneDataTwinSyncSse>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_NonCloneDataTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<NonCloneDataTwinSyncSseMoi>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_NonCloneDataTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<NonCloneDataTwinSyncSseMoi>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<RwLock<HideDataTwinMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<RwLock<HideDataTwinMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<RwLock<HideDataTwinNormal>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<RwLock<HideDataTwinNormal>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<RwLock<HideDataTwinRustAsync>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<RwLock<HideDataTwinRustAsync>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<RwLock<HideDataTwinRustAsyncMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<RwLock<HideDataTwinRustAsyncMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<RwLock<HideDataTwinRustAsyncSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<RwLock<HideDataTwinRustAsyncSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<RwLock<HideDataTwinRustAsyncSseMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<RwLock<HideDataTwinRustAsyncSseMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<RwLock<HideDataTwinSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<RwLock<HideDataTwinSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<RwLock<HideDataTwinSseMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<RwLock<HideDataTwinSseMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<RwLock<HideDataTwinSync>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<RwLock<HideDataTwinSync>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<RwLock<HideDataTwinSyncMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<RwLock<HideDataTwinSyncMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<RwLock<HideDataTwinSyncSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<RwLock<HideDataTwinSyncSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<RwLock<HideDataTwinSyncSseMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<RwLock<HideDataTwinSyncSseMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn Fn(String) -> String + Send + Sync>,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn Fn(String) -> String + Send + Sync>,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinMoi >>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinMoi >>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinNormal>>,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinNormal>>,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsync>,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsync>,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinRustAsyncMoi>>,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinRustAsyncMoi>>,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsyncSse>,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsyncSse>,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn HelloTraitTwinRustAsyncSseMoi>,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn HelloTraitTwinRustAsyncSseMoi>,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinSse >>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinSse >>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinSseMoi >>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinSseMoi >>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinSync >>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinSync >>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinSyncMoi >>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinSyncMoi >>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncSse>>,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncSse>>,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncSseMoi>>,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncSseMoi>>,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinMoiSendSync(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinMoi + Send + Sync>,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinMoiSendSync(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinMoi + Send + Sync>,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinNormalSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinNormal + Send + Sync>,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinNormalSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinNormal + Send + Sync>,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncMoiSendSync(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync>,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncMoiSendSync(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync>,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinRustAsync + Send + Sync>,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinRustAsync + Send + Sync>,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncSseMoiSendSync(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinRustAsyncSseMoi + Send + Sync>,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncSseMoiSendSync(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinRustAsyncSseMoi + Send + Sync>,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncSseSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinRustAsyncSse + Send + Sync>,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncSseSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinRustAsyncSse + Send + Sync>,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSseMoiSendSync(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSseMoi + Send + Sync>,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSseMoiSendSync(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSseMoi + Send + Sync>,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSseSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSse + Send + Sync>,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSseSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSse + Send + Sync>,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncMoiSendSync(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSyncMoi + Send + Sync>,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncMoiSendSync(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSyncMoi + Send + Sync>,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSync + Send + Sync>,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSync + Send + Sync>,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncSseMoiSendSync(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSyncSseMoi + Send + Sync>,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncSseMoiSendSync(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSyncSseMoi + Send + Sync>,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSyncSse + Send + Sync>,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncSseSendSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSyncSse + Send + Sync>,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockConstructorOpaqueStructTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                ConstructorOpaqueStructTwinNormal,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockConstructorOpaqueStructTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                ConstructorOpaqueStructTwinNormal,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockConstructorOpaqueSyncStructTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                ConstructorOpaqueSyncStructTwinNormal,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockConstructorOpaqueSyncStructTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                ConstructorOpaqueSyncStructTwinNormal,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockDroppableTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinNormal>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockDroppableTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinNormal>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockDroppableTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinRustAsync>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockDroppableTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinRustAsync>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockDroppableTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinRustAsyncSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockDroppableTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinRustAsyncSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockDroppableTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockDroppableTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockDroppableTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinSync>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockDroppableTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinSync>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockDroppableTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinSyncSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockDroppableTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<DroppableTwinSyncSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            EnumWithGoodAndOpaqueWithoutOptionTwinMoi,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            EnumWithGoodAndOpaqueWithoutOptionTwinMoi,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                EnumWithGoodAndOpaqueWithoutOptionTwinNormal,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                EnumWithGoodAndOpaqueWithoutOptionTwinNormal,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncMoi,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncMoi,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSse,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSse,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoi,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoi,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                EnumWithGoodAndOpaqueWithoutOptionTwinSse,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                EnumWithGoodAndOpaqueWithoutOptionTwinSse,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            EnumWithGoodAndOpaqueWithoutOptionTwinSseMoi,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            EnumWithGoodAndOpaqueWithoutOptionTwinSseMoi,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                EnumWithGoodAndOpaqueWithoutOptionTwinSync,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                EnumWithGoodAndOpaqueWithoutOptionTwinSync,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            EnumWithGoodAndOpaqueWithoutOptionTwinSyncMoi,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            EnumWithGoodAndOpaqueWithoutOptionTwinSyncMoi,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                EnumWithGoodAndOpaqueWithoutOptionTwinSyncSse,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                EnumWithGoodAndOpaqueWithoutOptionTwinSyncSse,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            EnumWithGoodAndOpaqueWithoutOptionTwinSyncSseMoi,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEnumWithGoodAndOpaqueWithoutOptionTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            EnumWithGoodAndOpaqueWithoutOptionTwinSyncSseMoi,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinNormal>,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinNormal>,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinRustAsync>,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinRustAsync>,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinRustAsyncMoi>,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinRustAsyncMoi>,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                NonCloneSimpleEnumTwinRustAsyncSse,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                NonCloneSimpleEnumTwinRustAsyncSse,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            NonCloneSimpleEnumTwinRustAsyncSseMoi,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            NonCloneSimpleEnumTwinRustAsyncSseMoi,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinSseMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinSseMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinSync>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinSync>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinSyncMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinSyncMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinSyncSse>,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinSyncSse>,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinSyncSseMoi>,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleEnumTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinSyncSseMoi>,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinNormal>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinNormal>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsync>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsync>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncSseMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncSseMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSseMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSseMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSync>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSync>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncSseMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueOneTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncSseMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinNormal>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinNormal>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsync>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsync>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncSseMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncSseMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSseMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSseMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSync>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSync>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncSse>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncSse>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncSseMoi>>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueTwoTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncSseMoi>>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleA(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleA>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleA(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleA>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleB(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleB>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleB(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleB>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldWithoutOptionTwinMoi,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldWithoutOptionTwinMoi,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncMoi,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncMoi,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSse,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSse,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoi,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoi,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldWithoutOptionTwinSse,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldWithoutOptionTwinSse,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldWithoutOptionTwinSseMoi,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldWithoutOptionTwinSseMoi,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldWithoutOptionTwinSync,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldWithoutOptionTwinSync,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncMoi,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinSyncMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncMoi,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncSse,
            >,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinSyncSse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncSse,
            >,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncSseMoi,
        >,
    >::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldWithoutOptionTwinSyncSseMoi(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncSseMoi,
        >,
    >::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithImplBlockInMultiFile(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithImplBlockInMultiFile>,
        >::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithImplBlockInMultiFile(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithImplBlockInMultiFile>,
        >::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_i16(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<i16>::increment_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_i16(
    ptr: *const std::ffi::c_void,
) {
    MoiArc::<i16>::decrement_strong_count(ptr as _);
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_increment_strong_count_RustOpaque_i32(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<i32>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_rust_arc_decrement_strong_count_RustOpaque_i32(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<i32>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_application_env(
) -> *mut wire_cst_application_env {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_application_env::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
    value: usize,
) -> *mut usize {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
    value: usize,
) -> *mut usize {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
    value: usize,
) -> *mut usize {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
    value: usize,
) -> *mut usize {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
    value: usize,
) -> *mut usize {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
    value: usize,
) -> *mut usize {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_Chrono_Duration(
    value: i64,
) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_Chrono_Naive(
    value: i64,
) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_Chrono_Utc(
    value: i64,
) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_DartOpaque(
    value: *const std::ffi::c_void,
) -> *mut *const std::ffi::c_void {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_RustOpaque_HideDataAnotherTwinMoi(
    value: usize,
) -> *mut usize {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(
    value: usize,
) -> *mut usize {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_RustOpaque_HideDataTwinMoi(
    value: usize,
) -> *mut usize {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_RustOpaque_HideDataTwinNormal(
    value: usize,
) -> *mut usize {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_RustOpaque_HideDataTwinRustAsync(
    value: usize,
) -> *mut usize {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_RustOpaque_HideDataTwinRustAsyncMoi(
    value: usize,
) -> *mut usize {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_RustOpaque_HideDataTwinSync(
    value: usize,
) -> *mut usize {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_RustOpaque_HideDataTwinSyncMoi(
    value: usize,
) -> *mut usize {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_a_twin_normal(
) -> *mut wire_cst_a_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_a_twin_normal::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_a_twin_rust_async(
) -> *mut wire_cst_a_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_a_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_a_twin_sync(
) -> *mut wire_cst_a_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_a_twin_sync::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_abc_twin_normal(
) -> *mut wire_cst_abc_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_abc_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_abc_twin_rust_async(
) -> *mut wire_cst_abc_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_abc_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_abc_twin_sync(
) -> *mut wire_cst_abc_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_abc_twin_sync::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_application_env(
) -> *mut wire_cst_application_env {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_application_env::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_application_mode(
    value: i32,
) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_application_settings(
) -> *mut wire_cst_application_settings {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_application_settings::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_attribute_twin_normal(
) -> *mut wire_cst_attribute_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_attribute_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_attribute_twin_rust_async(
) -> *mut wire_cst_attribute_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_attribute_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_attribute_twin_sync(
) -> *mut wire_cst_attribute_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_attribute_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_b_twin_normal(
) -> *mut wire_cst_b_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_b_twin_normal::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_b_twin_rust_async(
) -> *mut wire_cst_b_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_b_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_b_twin_sync(
) -> *mut wire_cst_b_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_b_twin_sync::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_basic_general_enum_twin_normal(
) -> *mut wire_cst_basic_general_enum_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_basic_general_enum_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_basic_general_enum_twin_rust_async(
) -> *mut wire_cst_basic_general_enum_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_basic_general_enum_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_basic_general_enum_twin_sync(
) -> *mut wire_cst_basic_general_enum_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_basic_general_enum_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_basic_primitive_enum_twin_normal(
    value: i32,
) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_basic_primitive_enum_twin_rust_async(
    value: i32,
) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_basic_primitive_enum_twin_sync(
    value: i32,
) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_basic_struct_twin_normal(
) -> *mut wire_cst_basic_struct_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_basic_struct_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_basic_struct_twin_rust_async(
) -> *mut wire_cst_basic_struct_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_basic_struct_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_basic_struct_twin_sync(
) -> *mut wire_cst_basic_struct_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_basic_struct_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_benchmark_binary_tree_twin_normal(
) -> *mut wire_cst_benchmark_binary_tree_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_benchmark_binary_tree_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_benchmark_binary_tree_twin_rust_async(
) -> *mut wire_cst_benchmark_binary_tree_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_benchmark_binary_tree_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_benchmark_binary_tree_twin_sync(
) -> *mut wire_cst_benchmark_binary_tree_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_benchmark_binary_tree_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_benchmark_blob_twin_normal(
) -> *mut wire_cst_benchmark_blob_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_benchmark_blob_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_benchmark_blob_twin_rust_async(
) -> *mut wire_cst_benchmark_blob_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_benchmark_blob_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_benchmark_blob_twin_sync(
) -> *mut wire_cst_benchmark_blob_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_benchmark_blob_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_bool(value: bool) -> *mut bool {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_c_twin_normal(
) -> *mut wire_cst_c_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_c_twin_normal::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_c_twin_rust_async(
) -> *mut wire_cst_c_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_c_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_c_twin_sync(
) -> *mut wire_cst_c_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_c_twin_sync::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_concatenate_with_twin_normal(
) -> *mut wire_cst_concatenate_with_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_concatenate_with_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_concatenate_with_twin_rust_async(
) -> *mut wire_cst_concatenate_with_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_concatenate_with_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_concatenate_with_twin_sync(
) -> *mut wire_cst_concatenate_with_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_concatenate_with_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_custom_nested_error_2_twin_normal(
) -> *mut wire_cst_custom_nested_error_2_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_2_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_custom_nested_error_2_twin_rust_async(
) -> *mut wire_cst_custom_nested_error_2_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_2_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_custom_nested_error_2_twin_sync(
) -> *mut wire_cst_custom_nested_error_2_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_2_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_custom_nested_error_inner_twin_normal(
) -> *mut wire_cst_custom_nested_error_inner_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_inner_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_custom_nested_error_inner_twin_rust_async(
) -> *mut wire_cst_custom_nested_error_inner_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_inner_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_custom_nested_error_inner_twin_sync(
) -> *mut wire_cst_custom_nested_error_inner_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_inner_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_custom_nested_error_outer_twin_normal(
) -> *mut wire_cst_custom_nested_error_outer_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_outer_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_custom_nested_error_outer_twin_rust_async(
) -> *mut wire_cst_custom_nested_error_outer_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_outer_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_custom_nested_error_outer_twin_sync(
) -> *mut wire_cst_custom_nested_error_outer_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_nested_error_outer_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_custom_struct_error_twin_normal(
) -> *mut wire_cst_custom_struct_error_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_error_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_custom_struct_error_twin_rust_async(
) -> *mut wire_cst_custom_struct_error_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_error_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_custom_struct_error_twin_sync(
) -> *mut wire_cst_custom_struct_error_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_error_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_custom_struct_twin_normal(
) -> *mut wire_cst_custom_struct_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_custom_struct_twin_rust_async(
) -> *mut wire_cst_custom_struct_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_custom_struct_twin_sync(
) -> *mut wire_cst_custom_struct_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_custom_struct_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_customized_twin_normal(
) -> *mut wire_cst_customized_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_customized_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_customized_twin_rust_async(
) -> *mut wire_cst_customized_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_customized_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_customized_twin_sync(
) -> *mut wire_cst_customized_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_customized_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_dart_opaque_nested_twin_normal(
) -> *mut wire_cst_dart_opaque_nested_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_dart_opaque_nested_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_dart_opaque_nested_twin_rust_async(
) -> *mut wire_cst_dart_opaque_nested_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_dart_opaque_nested_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_dart_opaque_nested_twin_sync(
) -> *mut wire_cst_dart_opaque_nested_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_dart_opaque_nested_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_element_twin_normal(
) -> *mut wire_cst_element_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_element_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_element_twin_rust_async(
) -> *mut wire_cst_element_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_element_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_element_twin_sync(
) -> *mut wire_cst_element_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_element_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_empty_twin_normal(
) -> *mut wire_cst_empty_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_empty_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_empty_twin_rust_async(
) -> *mut wire_cst_empty_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_empty_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_empty_twin_sync(
) -> *mut wire_cst_empty_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_empty_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_dart_opaque_twin_normal(
) -> *mut wire_cst_enum_dart_opaque_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_dart_opaque_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_dart_opaque_twin_rust_async(
) -> *mut wire_cst_enum_dart_opaque_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_dart_opaque_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_dart_opaque_twin_sync(
) -> *mut wire_cst_enum_dart_opaque_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_dart_opaque_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_opaque_twin_moi(
) -> *mut wire_cst_enum_opaque_twin_moi {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_opaque_twin_moi::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_opaque_twin_normal(
) -> *mut wire_cst_enum_opaque_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_opaque_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_opaque_twin_rust_async(
) -> *mut wire_cst_enum_opaque_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_opaque_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_opaque_twin_rust_async_moi(
) -> *mut wire_cst_enum_opaque_twin_rust_async_moi {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_opaque_twin_rust_async_moi::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_opaque_twin_sync(
) -> *mut wire_cst_enum_opaque_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_opaque_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_opaque_twin_sync_moi(
) -> *mut wire_cst_enum_opaque_twin_sync_moi {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_opaque_twin_sync_moi::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_with_good_and_opaque_twin_moi(
) -> *mut wire_cst_enum_with_good_and_opaque_twin_moi {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_good_and_opaque_twin_moi::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_with_good_and_opaque_twin_normal(
) -> *mut wire_cst_enum_with_good_and_opaque_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_good_and_opaque_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_with_good_and_opaque_twin_rust_async(
) -> *mut wire_cst_enum_with_good_and_opaque_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_good_and_opaque_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_with_good_and_opaque_twin_rust_async_moi(
) -> *mut wire_cst_enum_with_good_and_opaque_twin_rust_async_moi {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_good_and_opaque_twin_rust_async_moi::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_with_good_and_opaque_twin_sync(
) -> *mut wire_cst_enum_with_good_and_opaque_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_good_and_opaque_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_with_good_and_opaque_twin_sync_moi(
) -> *mut wire_cst_enum_with_good_and_opaque_twin_sync_moi {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_good_and_opaque_twin_sync_moi::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_with_item_mixed_twin_normal(
) -> *mut wire_cst_enum_with_item_mixed_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_mixed_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_with_item_mixed_twin_rust_async(
) -> *mut wire_cst_enum_with_item_mixed_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_mixed_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_with_item_mixed_twin_sync(
) -> *mut wire_cst_enum_with_item_mixed_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_mixed_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_with_item_struct_twin_normal(
) -> *mut wire_cst_enum_with_item_struct_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_struct_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_with_item_struct_twin_rust_async(
) -> *mut wire_cst_enum_with_item_struct_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_struct_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_with_item_struct_twin_sync(
) -> *mut wire_cst_enum_with_item_struct_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_struct_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_with_item_tuple_twin_normal(
) -> *mut wire_cst_enum_with_item_tuple_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_tuple_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_with_item_tuple_twin_rust_async(
) -> *mut wire_cst_enum_with_item_tuple_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_tuple_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_enum_with_item_tuple_twin_sync(
) -> *mut wire_cst_enum_with_item_tuple_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_enum_with_item_tuple_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_event_twin_normal(
) -> *mut wire_cst_event_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_event_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_event_twin_rust_async(
) -> *mut wire_cst_event_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_event_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_exotic_optionals_twin_normal(
) -> *mut wire_cst_exotic_optionals_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_exotic_optionals_twin_rust_async(
) -> *mut wire_cst_exotic_optionals_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_exotic_optionals_twin_sync(
) -> *mut wire_cst_exotic_optionals_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_f_32(value: f32) -> *mut f32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_f_64(value: f64) -> *mut f64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_feature_chrono_twin_normal(
) -> *mut wire_cst_feature_chrono_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feature_chrono_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_feature_chrono_twin_rust_async(
) -> *mut wire_cst_feature_chrono_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feature_chrono_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_feature_chrono_twin_sync(
) -> *mut wire_cst_feature_chrono_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feature_chrono_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_feature_uuid_twin_normal(
) -> *mut wire_cst_feature_uuid_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feature_uuid_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_feature_uuid_twin_rust_async(
) -> *mut wire_cst_feature_uuid_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feature_uuid_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_feature_uuid_twin_sync(
) -> *mut wire_cst_feature_uuid_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feature_uuid_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_feed_id_twin_normal(
) -> *mut wire_cst_feed_id_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_feed_id_twin_rust_async(
) -> *mut wire_cst_feed_id_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_feed_id_twin_sync(
) -> *mut wire_cst_feed_id_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_i_16(value: i16) -> *mut i16 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_i_32(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_i_64(value: i64) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_i_8(value: i8) -> *mut i8 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_isize(
    value: isize,
) -> *mut isize {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_kitchen_sink_twin_normal(
) -> *mut wire_cst_kitchen_sink_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_kitchen_sink_twin_rust_async(
) -> *mut wire_cst_kitchen_sink_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_kitchen_sink_twin_sync(
) -> *mut wire_cst_kitchen_sink_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_list_of_nested_raw_string_mirrored(
) -> *mut wire_cst_list_of_nested_raw_string_mirrored {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_list_of_nested_raw_string_mirrored::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_macro_struct(
) -> *mut wire_cst_macro_struct {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_macro_struct::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_measure_twin_normal(
) -> *mut wire_cst_measure_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_measure_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_measure_twin_rust_async(
) -> *mut wire_cst_measure_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_measure_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_measure_twin_sync(
) -> *mut wire_cst_measure_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_measure_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_message_id_twin_normal(
) -> *mut wire_cst_message_id_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_message_id_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_message_id_twin_rust_async(
) -> *mut wire_cst_message_id_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_message_id_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_message_id_twin_sync(
) -> *mut wire_cst_message_id_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_message_id_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_my_callable_twin_normal(
) -> *mut wire_cst_my_callable_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_callable_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_my_callable_twin_rust_async(
) -> *mut wire_cst_my_callable_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_callable_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_my_callable_twin_sync(
) -> *mut wire_cst_my_callable_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_callable_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_my_nested_struct_twin_normal(
) -> *mut wire_cst_my_nested_struct_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_nested_struct_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_my_nested_struct_twin_rust_async(
) -> *mut wire_cst_my_nested_struct_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_nested_struct_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_my_nested_struct_twin_sync(
) -> *mut wire_cst_my_nested_struct_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_nested_struct_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_my_size() -> *mut wire_cst_my_size
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_my_size::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_my_struct(
) -> *mut wire_cst_my_struct {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_my_struct::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_my_tree_node_twin_normal(
) -> *mut wire_cst_my_tree_node_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_tree_node_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_my_tree_node_twin_rust_async(
) -> *mut wire_cst_my_tree_node_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_tree_node_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_my_tree_node_twin_sync(
) -> *mut wire_cst_my_tree_node_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_my_tree_node_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_nested_raw_string_mirrored(
) -> *mut wire_cst_nested_raw_string_mirrored {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_nested_raw_string_mirrored::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_new_type_int_twin_normal(
) -> *mut wire_cst_new_type_int_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_new_type_int_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_new_type_int_twin_rust_async(
) -> *mut wire_cst_new_type_int_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_new_type_int_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_new_type_int_twin_sync(
) -> *mut wire_cst_new_type_int_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_new_type_int_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_note_twin_normal(
) -> *mut wire_cst_note_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_note_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_note_twin_rust_async(
) -> *mut wire_cst_note_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_note_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_note_twin_sync(
) -> *mut wire_cst_note_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_note_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_numbers() -> *mut wire_cst_numbers
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_numbers::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_opaque_nested_twin_moi(
) -> *mut wire_cst_opaque_nested_twin_moi {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opaque_nested_twin_moi::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_opaque_nested_twin_normal(
) -> *mut wire_cst_opaque_nested_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opaque_nested_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_opaque_nested_twin_rust_async(
) -> *mut wire_cst_opaque_nested_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opaque_nested_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_opaque_nested_twin_rust_async_moi(
) -> *mut wire_cst_opaque_nested_twin_rust_async_moi {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opaque_nested_twin_rust_async_moi::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_opaque_nested_twin_sync(
) -> *mut wire_cst_opaque_nested_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opaque_nested_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_opaque_nested_twin_sync_moi(
) -> *mut wire_cst_opaque_nested_twin_sync_moi {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opaque_nested_twin_sync_moi::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_opt_vecs_twin_normal(
) -> *mut wire_cst_opt_vecs_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opt_vecs_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_opt_vecs_twin_rust_async(
) -> *mut wire_cst_opt_vecs_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opt_vecs_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_opt_vecs_twin_sync(
) -> *mut wire_cst_opt_vecs_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opt_vecs_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_raw_string_mirrored(
) -> *mut wire_cst_raw_string_mirrored {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_raw_string_mirrored::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_record_string_i_32(
) -> *mut wire_cst_record_string_i_32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_record_string_i_32::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_sequences(
) -> *mut wire_cst_sequences {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_sequences::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_simple_struct_twin_normal(
) -> *mut wire_cst_simple_struct_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_simple_struct_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_simple_struct_twin_rust_async(
) -> *mut wire_cst_simple_struct_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_simple_struct_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_simple_struct_twin_sync(
) -> *mut wire_cst_simple_struct_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_simple_struct_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_some_struct_twin_normal(
) -> *mut wire_cst_some_struct_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_some_struct_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_some_struct_twin_rust_async(
) -> *mut wire_cst_some_struct_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_some_struct_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_some_struct_twin_sync(
) -> *mut wire_cst_some_struct_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_some_struct_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_in_lower_level(
) -> *mut wire_cst_struct_in_lower_level {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_in_lower_level::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_comments_twin_normal(
) -> *mut wire_cst_struct_with_comments_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_comments_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_comments_twin_rust_async(
) -> *mut wire_cst_struct_with_comments_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_comments_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_comments_twin_sync(
) -> *mut wire_cst_struct_with_comments_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_comments_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_enum_twin_normal(
) -> *mut wire_cst_struct_with_enum_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_enum_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_enum_twin_rust_async(
) -> *mut wire_cst_struct_with_enum_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_enum_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_enum_twin_sync(
) -> *mut wire_cst_struct_with_enum_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_enum_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_explicit_auto_opaque_field_twin_moi(
) -> *mut wire_cst_struct_with_explicit_auto_opaque_field_twin_moi {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_explicit_auto_opaque_field_twin_moi::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_explicit_auto_opaque_field_twin_normal(
) -> *mut wire_cst_struct_with_explicit_auto_opaque_field_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_explicit_auto_opaque_field_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_explicit_auto_opaque_field_twin_rust_async(
) -> *mut wire_cst_struct_with_explicit_auto_opaque_field_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_explicit_auto_opaque_field_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_explicit_auto_opaque_field_twin_rust_async_moi(
) -> *mut wire_cst_struct_with_explicit_auto_opaque_field_twin_rust_async_moi {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_explicit_auto_opaque_field_twin_rust_async_moi::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_explicit_auto_opaque_field_twin_sync(
) -> *mut wire_cst_struct_with_explicit_auto_opaque_field_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_explicit_auto_opaque_field_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_explicit_auto_opaque_field_twin_sync_moi(
) -> *mut wire_cst_struct_with_explicit_auto_opaque_field_twin_sync_moi {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_explicit_auto_opaque_field_twin_sync_moi::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_good_and_opaque_field_twin_moi(
) -> *mut wire_cst_struct_with_good_and_opaque_field_twin_moi {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_good_and_opaque_field_twin_moi::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_good_and_opaque_field_twin_normal(
) -> *mut wire_cst_struct_with_good_and_opaque_field_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_good_and_opaque_field_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_good_and_opaque_field_twin_rust_async(
) -> *mut wire_cst_struct_with_good_and_opaque_field_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_good_and_opaque_field_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_good_and_opaque_field_twin_rust_async_moi(
) -> *mut wire_cst_struct_with_good_and_opaque_field_twin_rust_async_moi {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_good_and_opaque_field_twin_rust_async_moi::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_good_and_opaque_field_twin_sync(
) -> *mut wire_cst_struct_with_good_and_opaque_field_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_good_and_opaque_field_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_good_and_opaque_field_twin_sync_moi(
) -> *mut wire_cst_struct_with_good_and_opaque_field_twin_sync_moi {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_good_and_opaque_field_twin_sync_moi::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_one_field_twin_normal(
) -> *mut wire_cst_struct_with_one_field_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_one_field_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_one_field_twin_rust_async(
) -> *mut wire_cst_struct_with_one_field_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_one_field_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_one_field_twin_sync(
) -> *mut wire_cst_struct_with_one_field_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_one_field_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_two_field_twin_normal(
) -> *mut wire_cst_struct_with_two_field_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_two_field_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_two_field_twin_rust_async(
) -> *mut wire_cst_struct_with_two_field_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_two_field_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_two_field_twin_sync(
) -> *mut wire_cst_struct_with_two_field_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_two_field_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_zero_field_twin_normal(
) -> *mut wire_cst_struct_with_zero_field_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_zero_field_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_zero_field_twin_rust_async(
) -> *mut wire_cst_struct_with_zero_field_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_zero_field_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_struct_with_zero_field_twin_sync(
) -> *mut wire_cst_struct_with_zero_field_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_struct_with_zero_field_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_sum_with_twin_normal(
) -> *mut wire_cst_sum_with_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_sum_with_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_sum_with_twin_rust_async(
) -> *mut wire_cst_sum_with_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_sum_with_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_sum_with_twin_sync(
) -> *mut wire_cst_sum_with_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_sum_with_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_test_id_twin_normal(
) -> *mut wire_cst_test_id_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_test_id_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_test_id_twin_rust_async(
) -> *mut wire_cst_test_id_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_test_id_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_test_id_twin_sync(
) -> *mut wire_cst_test_id_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_test_id_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_tuple_struct_with_one_field_twin_normal(
) -> *mut wire_cst_tuple_struct_with_one_field_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_one_field_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_tuple_struct_with_one_field_twin_rust_async(
) -> *mut wire_cst_tuple_struct_with_one_field_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_one_field_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_tuple_struct_with_one_field_twin_sync(
) -> *mut wire_cst_tuple_struct_with_one_field_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_one_field_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_tuple_struct_with_two_field_twin_normal(
) -> *mut wire_cst_tuple_struct_with_two_field_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_two_field_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_tuple_struct_with_two_field_twin_rust_async(
) -> *mut wire_cst_tuple_struct_with_two_field_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_two_field_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_tuple_struct_with_two_field_twin_sync(
) -> *mut wire_cst_tuple_struct_with_two_field_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_tuple_struct_with_two_field_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_u_16(value: u16) -> *mut u16 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_u_32(value: u32) -> *mut u32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_u_64(value: u64) -> *mut u64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_u_8(value: u8) -> *mut u8 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_user_id_twin_normal(
) -> *mut wire_cst_user_id_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_user_id_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_user_id_twin_rust_async(
) -> *mut wire_cst_user_id_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_user_id_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_user_id_twin_sync(
) -> *mut wire_cst_user_id_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_user_id_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_usize(
    value: usize,
) -> *mut usize {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_weekdays_twin_normal(
    value: i32,
) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_weekdays_twin_rust_async(
    value: i32,
) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_autoadd_weekdays_twin_sync(
    value: i32,
) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_benchmark_binary_tree_twin_normal(
) -> *mut wire_cst_benchmark_binary_tree_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_benchmark_binary_tree_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_benchmark_binary_tree_twin_rust_async(
) -> *mut wire_cst_benchmark_binary_tree_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_benchmark_binary_tree_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_benchmark_binary_tree_twin_sync(
) -> *mut wire_cst_benchmark_binary_tree_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_benchmark_binary_tree_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_blob_twin_normal(
) -> *mut wire_cst_blob_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_blob_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_blob_twin_rust_async(
) -> *mut wire_cst_blob_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_blob_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_blob_twin_sync(
) -> *mut wire_cst_blob_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_blob_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_bool(value: bool) -> *mut bool {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_distance_twin_normal(
) -> *mut wire_cst_distance_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_distance_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_distance_twin_rust_async(
) -> *mut wire_cst_distance_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_distance_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_distance_twin_sync(
) -> *mut wire_cst_distance_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_distance_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_exotic_optionals_twin_normal(
) -> *mut wire_cst_exotic_optionals_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_exotic_optionals_twin_rust_async(
) -> *mut wire_cst_exotic_optionals_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_exotic_optionals_twin_sync(
) -> *mut wire_cst_exotic_optionals_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_exotic_optionals_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_f_64(value: f64) -> *mut f64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_feed_id_twin_normal(
) -> *mut wire_cst_feed_id_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_feed_id_twin_rust_async(
) -> *mut wire_cst_feed_id_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_feed_id_twin_sync(
) -> *mut wire_cst_feed_id_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_feed_id_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_i_32(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_i_64(value: i64) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_i_8(value: i8) -> *mut i8 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_kitchen_sink_twin_normal(
) -> *mut wire_cst_kitchen_sink_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_kitchen_sink_twin_rust_async(
) -> *mut wire_cst_kitchen_sink_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_kitchen_sink_twin_sync(
) -> *mut wire_cst_kitchen_sink_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_kitchen_sink_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_my_size() -> *mut wire_cst_my_size {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_my_size::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_speed_twin_normal(
) -> *mut wire_cst_speed_twin_normal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_speed_twin_normal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_speed_twin_rust_async(
) -> *mut wire_cst_speed_twin_rust_async {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_speed_twin_rust_async::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_speed_twin_sync(
) -> *mut wire_cst_speed_twin_sync {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_speed_twin_sync::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_u_8(value: u8) -> *mut u8 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_weekdays_twin_normal(
    value: i32,
) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_weekdays_twin_rust_async(
    value: i32,
) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_box_weekdays_twin_sync(
    value: i32,
) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(len: i32) -> *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi{
    let wrap = wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi { ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len), len };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(len: i32) -> *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal{
    let wrap = wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal { ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len), len };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(len: i32) -> *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync{
    let wrap = wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync { ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len), len };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(len: i32) -> *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi{
    let wrap = wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi { ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len), len };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(len: i32) -> *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync{
    let wrap = wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync { ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len), len };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(len: i32) -> *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi{
    let wrap = wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi { ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len), len };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_Chrono_Duration(
    len: i32,
) -> *mut wire_cst_list_Chrono_Duration {
    let wrap = wire_cst_list_Chrono_Duration {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_Chrono_Local(
    len: i32,
) -> *mut wire_cst_list_Chrono_Local {
    let wrap = wire_cst_list_Chrono_Local {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_Chrono_Naive(
    len: i32,
) -> *mut wire_cst_list_Chrono_Naive {
    let wrap = wire_cst_list_Chrono_Naive {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_DartOpaque(
    len: i32,
) -> *mut wire_cst_list_DartOpaque {
    let wrap = wire_cst_list_DartOpaque {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_RustOpaque_HideDataTwinMoi(
    len: i32,
) -> *mut wire_cst_list_RustOpaque_HideDataTwinMoi {
    let wrap = wire_cst_list_RustOpaque_HideDataTwinMoi {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_RustOpaque_HideDataTwinNormal(
    len: i32,
) -> *mut wire_cst_list_RustOpaque_HideDataTwinNormal {
    let wrap = wire_cst_list_RustOpaque_HideDataTwinNormal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_RustOpaque_HideDataTwinRustAsync(
    len: i32,
) -> *mut wire_cst_list_RustOpaque_HideDataTwinRustAsync {
    let wrap = wire_cst_list_RustOpaque_HideDataTwinRustAsync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_RustOpaque_HideDataTwinRustAsyncMoi(
    len: i32,
) -> *mut wire_cst_list_RustOpaque_HideDataTwinRustAsyncMoi {
    let wrap = wire_cst_list_RustOpaque_HideDataTwinRustAsyncMoi {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_RustOpaque_HideDataTwinSync(
    len: i32,
) -> *mut wire_cst_list_RustOpaque_HideDataTwinSync {
    let wrap = wire_cst_list_RustOpaque_HideDataTwinSync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_RustOpaque_HideDataTwinSyncMoi(
    len: i32,
) -> *mut wire_cst_list_RustOpaque_HideDataTwinSyncMoi {
    let wrap = wire_cst_list_RustOpaque_HideDataTwinSyncMoi {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_String(
    len: i32,
) -> *mut wire_cst_list_String {
    let wrap = wire_cst_list_String {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <*mut wire_cst_list_prim_u_8_strict>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_Uuid(
    len: i32,
) -> *mut wire_cst_list_Uuid {
    let wrap = wire_cst_list_Uuid {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <*mut wire_cst_list_prim_u_8_strict>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_application_env_var(
    len: i32,
) -> *mut wire_cst_list_application_env_var {
    let wrap = wire_cst_list_application_env_var {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_application_env_var>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_application_mode(
    len: i32,
) -> *mut wire_cst_list_application_mode {
    let wrap = wire_cst_list_application_mode {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_application_settings(
    len: i32,
) -> *mut wire_cst_list_application_settings {
    let wrap = wire_cst_list_application_settings {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_application_settings>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_attribute_twin_normal(
    len: i32,
) -> *mut wire_cst_list_attribute_twin_normal {
    let wrap = wire_cst_list_attribute_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_attribute_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_attribute_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_attribute_twin_rust_async {
    let wrap = wire_cst_list_attribute_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_attribute_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_attribute_twin_sync(
    len: i32,
) -> *mut wire_cst_list_attribute_twin_sync {
    let wrap = wire_cst_list_attribute_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_attribute_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_basic_general_enum_twin_normal(
    len: i32,
) -> *mut wire_cst_list_basic_general_enum_twin_normal {
    let wrap = wire_cst_list_basic_general_enum_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_basic_general_enum_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_basic_general_enum_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_basic_general_enum_twin_rust_async {
    let wrap = wire_cst_list_basic_general_enum_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_basic_general_enum_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_basic_general_enum_twin_sync(
    len: i32,
) -> *mut wire_cst_list_basic_general_enum_twin_sync {
    let wrap = wire_cst_list_basic_general_enum_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_basic_general_enum_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_basic_primitive_enum_twin_normal(
    len: i32,
) -> *mut wire_cst_list_basic_primitive_enum_twin_normal {
    let wrap = wire_cst_list_basic_primitive_enum_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_basic_primitive_enum_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_basic_primitive_enum_twin_rust_async {
    let wrap = wire_cst_list_basic_primitive_enum_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_basic_primitive_enum_twin_sync(
    len: i32,
) -> *mut wire_cst_list_basic_primitive_enum_twin_sync {
    let wrap = wire_cst_list_basic_primitive_enum_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_basic_struct_twin_normal(
    len: i32,
) -> *mut wire_cst_list_basic_struct_twin_normal {
    let wrap = wire_cst_list_basic_struct_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_basic_struct_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_basic_struct_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_basic_struct_twin_rust_async {
    let wrap = wire_cst_list_basic_struct_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_basic_struct_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_basic_struct_twin_sync(
    len: i32,
) -> *mut wire_cst_list_basic_struct_twin_sync {
    let wrap = wire_cst_list_basic_struct_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_basic_struct_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_bool(
    len: i32,
) -> *mut wire_cst_list_bool {
    let wrap = wire_cst_list_bool {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_element_twin_normal(
    len: i32,
) -> *mut wire_cst_list_element_twin_normal {
    let wrap = wire_cst_list_element_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_element_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_element_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_element_twin_rust_async {
    let wrap = wire_cst_list_element_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_element_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_element_twin_sync(
    len: i32,
) -> *mut wire_cst_list_element_twin_sync {
    let wrap = wire_cst_list_element_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_element_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_enum_opaque_twin_moi(
    len: i32,
) -> *mut wire_cst_list_enum_opaque_twin_moi {
    let wrap = wire_cst_list_enum_opaque_twin_moi {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_enum_opaque_twin_moi>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_enum_opaque_twin_normal(
    len: i32,
) -> *mut wire_cst_list_enum_opaque_twin_normal {
    let wrap = wire_cst_list_enum_opaque_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_enum_opaque_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_enum_opaque_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_enum_opaque_twin_rust_async {
    let wrap = wire_cst_list_enum_opaque_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_enum_opaque_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_enum_opaque_twin_rust_async_moi(
    len: i32,
) -> *mut wire_cst_list_enum_opaque_twin_rust_async_moi {
    let wrap = wire_cst_list_enum_opaque_twin_rust_async_moi {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_enum_opaque_twin_rust_async_moi>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_enum_opaque_twin_sync(
    len: i32,
) -> *mut wire_cst_list_enum_opaque_twin_sync {
    let wrap = wire_cst_list_enum_opaque_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_enum_opaque_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_enum_opaque_twin_sync_moi(
    len: i32,
) -> *mut wire_cst_list_enum_opaque_twin_sync_moi {
    let wrap = wire_cst_list_enum_opaque_twin_sync_moi {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_enum_opaque_twin_sync_moi>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_list_prim_u_8_strict(
    len: i32,
) -> *mut wire_cst_list_list_prim_u_8_strict {
    let wrap = wire_cst_list_list_prim_u_8_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <*mut wire_cst_list_prim_u_8_strict>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_my_enum(
    len: i32,
) -> *mut wire_cst_list_my_enum {
    let wrap = wire_cst_list_my_enum {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_my_size(
    len: i32,
) -> *mut wire_cst_list_my_size {
    let wrap = wire_cst_list_my_size {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_my_size>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_my_tree_node_twin_normal(
    len: i32,
) -> *mut wire_cst_list_my_tree_node_twin_normal {
    let wrap = wire_cst_list_my_tree_node_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_my_tree_node_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_my_tree_node_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_my_tree_node_twin_rust_async {
    let wrap = wire_cst_list_my_tree_node_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_my_tree_node_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_my_tree_node_twin_sync(
    len: i32,
) -> *mut wire_cst_list_my_tree_node_twin_sync {
    let wrap = wire_cst_list_my_tree_node_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_my_tree_node_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_nested_raw_string_mirrored(
    len: i32,
) -> *mut wire_cst_list_nested_raw_string_mirrored {
    let wrap = wire_cst_list_nested_raw_string_mirrored {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_nested_raw_string_mirrored>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_opt_String(
    len: i32,
) -> *mut wire_cst_list_opt_String {
    let wrap = wire_cst_list_opt_String {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_opt_box_autoadd_attribute_twin_normal(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_attribute_twin_normal {
    let wrap = wire_cst_list_opt_box_autoadd_attribute_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_opt_box_autoadd_attribute_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_attribute_twin_rust_async {
    let wrap = wire_cst_list_opt_box_autoadd_attribute_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_opt_box_autoadd_attribute_twin_sync(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_attribute_twin_sync {
    let wrap = wire_cst_list_opt_box_autoadd_attribute_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_opt_box_autoadd_i_32(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_i_32 {
    let wrap = wire_cst_list_opt_box_autoadd_i_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_opt_box_autoadd_weekdays_twin_normal(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_weekdays_twin_normal {
    let wrap = wire_cst_list_opt_box_autoadd_weekdays_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_opt_box_autoadd_weekdays_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async {
    let wrap = wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_opt_box_autoadd_weekdays_twin_sync(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_weekdays_twin_sync {
    let wrap = wire_cst_list_opt_box_autoadd_weekdays_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_opt_list_prim_i_32_strict(
    len: i32,
) -> *mut wire_cst_list_opt_list_prim_i_32_strict {
    let wrap = wire_cst_list_opt_list_prim_i_32_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_point_twin_normal(
    len: i32,
) -> *mut wire_cst_list_point_twin_normal {
    let wrap = wire_cst_list_point_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_point_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_point_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_point_twin_rust_async {
    let wrap = wire_cst_list_point_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_point_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_point_twin_sync(
    len: i32,
) -> *mut wire_cst_list_point_twin_sync {
    let wrap = wire_cst_list_point_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_point_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_prim_f_32_loose(
    len: i32,
) -> *mut wire_cst_list_prim_f_32_loose {
    let ans = wire_cst_list_prim_f_32_loose {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_prim_f_32_strict(
    len: i32,
) -> *mut wire_cst_list_prim_f_32_strict {
    let ans = wire_cst_list_prim_f_32_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_prim_f_64_loose(
    len: i32,
) -> *mut wire_cst_list_prim_f_64_loose {
    let ans = wire_cst_list_prim_f_64_loose {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_prim_f_64_strict(
    len: i32,
) -> *mut wire_cst_list_prim_f_64_strict {
    let ans = wire_cst_list_prim_f_64_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_prim_i_16_loose(
    len: i32,
) -> *mut wire_cst_list_prim_i_16_loose {
    let ans = wire_cst_list_prim_i_16_loose {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_prim_i_16_strict(
    len: i32,
) -> *mut wire_cst_list_prim_i_16_strict {
    let ans = wire_cst_list_prim_i_16_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_prim_i_32_loose(
    len: i32,
) -> *mut wire_cst_list_prim_i_32_loose {
    let ans = wire_cst_list_prim_i_32_loose {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_prim_i_32_strict(
    len: i32,
) -> *mut wire_cst_list_prim_i_32_strict {
    let ans = wire_cst_list_prim_i_32_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_prim_i_64_strict(
    len: i32,
) -> *mut wire_cst_list_prim_i_64_strict {
    let ans = wire_cst_list_prim_i_64_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_prim_i_8_loose(
    len: i32,
) -> *mut wire_cst_list_prim_i_8_loose {
    let ans = wire_cst_list_prim_i_8_loose {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_prim_i_8_strict(
    len: i32,
) -> *mut wire_cst_list_prim_i_8_strict {
    let ans = wire_cst_list_prim_i_8_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_prim_u_16_loose(
    len: i32,
) -> *mut wire_cst_list_prim_u_16_loose {
    let ans = wire_cst_list_prim_u_16_loose {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_prim_u_16_strict(
    len: i32,
) -> *mut wire_cst_list_prim_u_16_strict {
    let ans = wire_cst_list_prim_u_16_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_prim_u_32_loose(
    len: i32,
) -> *mut wire_cst_list_prim_u_32_loose {
    let ans = wire_cst_list_prim_u_32_loose {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_prim_u_32_strict(
    len: i32,
) -> *mut wire_cst_list_prim_u_32_strict {
    let ans = wire_cst_list_prim_u_32_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_prim_u_64_strict(
    len: i32,
) -> *mut wire_cst_list_prim_u_64_strict {
    let ans = wire_cst_list_prim_u_64_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_prim_u_8_loose(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_loose {
    let ans = wire_cst_list_prim_u_8_loose {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_prim_u_8_strict(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_strict {
    let ans = wire_cst_list_prim_u_8_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_raw_string_enum_mirrored(
    len: i32,
) -> *mut wire_cst_list_raw_string_enum_mirrored {
    let wrap = wire_cst_list_raw_string_enum_mirrored {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_raw_string_enum_mirrored>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_raw_string_mirrored(
    len: i32,
) -> *mut wire_cst_list_raw_string_mirrored {
    let wrap = wire_cst_list_raw_string_mirrored {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_raw_string_mirrored>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_basic_general_enum_twin_normal(
    len: i32,
) -> *mut wire_cst_list_record_i_32_basic_general_enum_twin_normal {
    let wrap = wire_cst_list_record_i_32_basic_general_enum_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_basic_general_enum_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_basic_general_enum_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_record_i_32_basic_general_enum_twin_rust_async {
    let wrap = wire_cst_list_record_i_32_basic_general_enum_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_basic_general_enum_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_basic_general_enum_twin_sync(
    len: i32,
) -> *mut wire_cst_list_record_i_32_basic_general_enum_twin_sync {
    let wrap = wire_cst_list_record_i_32_basic_general_enum_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_basic_general_enum_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_basic_primitive_enum_twin_normal(
    len: i32,
) -> *mut wire_cst_list_record_i_32_basic_primitive_enum_twin_normal {
    let wrap = wire_cst_list_record_i_32_basic_primitive_enum_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_basic_primitive_enum_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_basic_primitive_enum_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_record_i_32_basic_primitive_enum_twin_rust_async {
    let wrap = wire_cst_list_record_i_32_basic_primitive_enum_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_basic_primitive_enum_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_basic_primitive_enum_twin_sync(
    len: i32,
) -> *mut wire_cst_list_record_i_32_basic_primitive_enum_twin_sync {
    let wrap = wire_cst_list_record_i_32_basic_primitive_enum_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_basic_primitive_enum_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_basic_struct_twin_normal(
    len: i32,
) -> *mut wire_cst_list_record_i_32_basic_struct_twin_normal {
    let wrap = wire_cst_list_record_i_32_basic_struct_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_basic_struct_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_basic_struct_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_record_i_32_basic_struct_twin_rust_async {
    let wrap = wire_cst_list_record_i_32_basic_struct_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_basic_struct_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_basic_struct_twin_sync(
    len: i32,
) -> *mut wire_cst_list_record_i_32_basic_struct_twin_sync {
    let wrap = wire_cst_list_record_i_32_basic_struct_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_basic_struct_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_bool(
    len: i32,
) -> *mut wire_cst_list_record_i_32_bool {
    let wrap = wire_cst_list_record_i_32_bool {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_bool>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_f_32(
    len: i32,
) -> *mut wire_cst_list_record_i_32_f_32 {
    let wrap = wire_cst_list_record_i_32_f_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_f_32>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_f_64(
    len: i32,
) -> *mut wire_cst_list_record_i_32_f_64 {
    let wrap = wire_cst_list_record_i_32_f_64 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_f_64>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_i_16(
    len: i32,
) -> *mut wire_cst_list_record_i_32_i_16 {
    let wrap = wire_cst_list_record_i_32_i_16 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_i_16>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_i_32(
    len: i32,
) -> *mut wire_cst_list_record_i_32_i_32 {
    let wrap = wire_cst_list_record_i_32_i_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_i_32>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_i_64(
    len: i32,
) -> *mut wire_cst_list_record_i_32_i_64 {
    let wrap = wire_cst_list_record_i_32_i_64 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_i_64>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_i_8(
    len: i32,
) -> *mut wire_cst_list_record_i_32_i_8 {
    let wrap = wire_cst_list_record_i_32_i_8 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_i_8>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_isize(
    len: i32,
) -> *mut wire_cst_list_record_i_32_isize {
    let wrap = wire_cst_list_record_i_32_isize {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_isize>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_list_prim_u_8_strict(
    len: i32,
) -> *mut wire_cst_list_record_i_32_list_prim_u_8_strict {
    let wrap = wire_cst_list_record_i_32_list_prim_u_8_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_list_prim_u_8_strict>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_string(
    len: i32,
) -> *mut wire_cst_list_record_i_32_string {
    let wrap = wire_cst_list_record_i_32_string {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_string>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_u_16(
    len: i32,
) -> *mut wire_cst_list_record_i_32_u_16 {
    let wrap = wire_cst_list_record_i_32_u_16 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_u_16>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_u_32(
    len: i32,
) -> *mut wire_cst_list_record_i_32_u_32 {
    let wrap = wire_cst_list_record_i_32_u_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_u_32>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_u_64(
    len: i32,
) -> *mut wire_cst_list_record_i_32_u_64 {
    let wrap = wire_cst_list_record_i_32_u_64 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_u_64>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_u_8(
    len: i32,
) -> *mut wire_cst_list_record_i_32_u_8 {
    let wrap = wire_cst_list_record_i_32_u_8 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_u_8>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_i_32_usize(
    len: i32,
) -> *mut wire_cst_list_record_i_32_usize {
    let wrap = wire_cst_list_record_i_32_usize {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_i_32_usize>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_string_enum_simple_twin_normal(
    len: i32,
) -> *mut wire_cst_list_record_string_enum_simple_twin_normal {
    let wrap = wire_cst_list_record_string_enum_simple_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_string_enum_simple_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_string_enum_simple_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_record_string_enum_simple_twin_rust_async {
    let wrap = wire_cst_list_record_string_enum_simple_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_string_enum_simple_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_string_enum_simple_twin_sync(
    len: i32,
) -> *mut wire_cst_list_record_string_enum_simple_twin_sync {
    let wrap = wire_cst_list_record_string_enum_simple_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_string_enum_simple_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_string_hash_map_value(
    len: i32,
) -> *mut wire_cst_list_record_string_hash_map_value {
    let wrap = wire_cst_list_record_string_hash_map_value {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_string_hash_map_value>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_string_i_32(
    len: i32,
) -> *mut wire_cst_list_record_string_i_32 {
    let wrap = wire_cst_list_record_string_i_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_string_i_32>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_string_kitchen_sink_twin_normal(
    len: i32,
) -> *mut wire_cst_list_record_string_kitchen_sink_twin_normal {
    let wrap = wire_cst_list_record_string_kitchen_sink_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_string_kitchen_sink_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_string_kitchen_sink_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_record_string_kitchen_sink_twin_rust_async {
    let wrap = wire_cst_list_record_string_kitchen_sink_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_string_kitchen_sink_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_string_kitchen_sink_twin_sync(
    len: i32,
) -> *mut wire_cst_list_record_string_kitchen_sink_twin_sync {
    let wrap = wire_cst_list_record_string_kitchen_sink_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_string_kitchen_sink_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_string_list_prim_u_8_strict(
    len: i32,
) -> *mut wire_cst_list_record_string_list_prim_u_8_strict {
    let wrap = wire_cst_list_record_string_list_prim_u_8_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_string_list_prim_u_8_strict>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_string_my_size(
    len: i32,
) -> *mut wire_cst_list_record_string_my_size {
    let wrap = wire_cst_list_record_string_my_size {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_string_my_size>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_string_string(
    len: i32,
) -> *mut wire_cst_list_record_string_string {
    let wrap = wire_cst_list_record_string_string {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_string_string>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_record_u_8_application_mode(
    len: i32,
) -> *mut wire_cst_list_record_u_8_application_mode {
    let wrap = wire_cst_list_record_u_8_application_mode {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_u_8_application_mode>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_simple_struct_twin_normal(
    len: i32,
) -> *mut wire_cst_list_simple_struct_twin_normal {
    let wrap = wire_cst_list_simple_struct_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_simple_struct_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_simple_struct_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_simple_struct_twin_rust_async {
    let wrap = wire_cst_list_simple_struct_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_simple_struct_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_simple_struct_twin_sync(
    len: i32,
) -> *mut wire_cst_list_simple_struct_twin_sync {
    let wrap = wire_cst_list_simple_struct_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_simple_struct_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_sum_with_twin_normal(
    len: i32,
) -> *mut wire_cst_list_sum_with_twin_normal {
    let wrap = wire_cst_list_sum_with_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_sum_with_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_sum_with_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_sum_with_twin_rust_async {
    let wrap = wire_cst_list_sum_with_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_sum_with_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_sum_with_twin_sync(
    len: i32,
) -> *mut wire_cst_list_sum_with_twin_sync {
    let wrap = wire_cst_list_sum_with_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_sum_with_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_test_id_twin_normal(
    len: i32,
) -> *mut wire_cst_list_test_id_twin_normal {
    let wrap = wire_cst_list_test_id_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_test_id_twin_normal>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_test_id_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_test_id_twin_rust_async {
    let wrap = wire_cst_list_test_id_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_test_id_twin_rust_async>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_test_id_twin_sync(
    len: i32,
) -> *mut wire_cst_list_test_id_twin_sync {
    let wrap = wire_cst_list_test_id_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_test_id_twin_sync>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_weekdays_twin_normal(
    len: i32,
) -> *mut wire_cst_list_weekdays_twin_normal {
    let wrap = wire_cst_list_weekdays_twin_normal {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_weekdays_twin_rust_async(
    len: i32,
) -> *mut wire_cst_list_weekdays_twin_rust_async {
    let wrap = wire_cst_list_weekdays_twin_rust_async {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_frb_example_pure_dart_cst_new_list_weekdays_twin_sync(
    len: i32,
) -> *mut wire_cst_list_weekdays_twin_sync {
    let wrap = wire_cst_list_weekdays_twin_sync {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_a_twin_normal {
    a: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_a_twin_rust_async {
    a: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_a_twin_sync {
    a: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_abc_twin_normal {
    tag: i32,
    kind: AbcTwinNormalKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union AbcTwinNormalKind {
    A: wire_cst_AbcTwinNormal_A,
    B: wire_cst_AbcTwinNormal_B,
    C: wire_cst_AbcTwinNormal_C,
    JustInt: wire_cst_AbcTwinNormal_JustInt,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AbcTwinNormal_A {
    field0: *mut wire_cst_a_twin_normal,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AbcTwinNormal_B {
    field0: *mut wire_cst_b_twin_normal,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AbcTwinNormal_C {
    field0: *mut wire_cst_c_twin_normal,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AbcTwinNormal_JustInt {
    field0: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_abc_twin_rust_async {
    tag: i32,
    kind: AbcTwinRustAsyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union AbcTwinRustAsyncKind {
    A: wire_cst_AbcTwinRustAsync_A,
    B: wire_cst_AbcTwinRustAsync_B,
    C: wire_cst_AbcTwinRustAsync_C,
    JustInt: wire_cst_AbcTwinRustAsync_JustInt,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AbcTwinRustAsync_A {
    field0: *mut wire_cst_a_twin_rust_async,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AbcTwinRustAsync_B {
    field0: *mut wire_cst_b_twin_rust_async,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AbcTwinRustAsync_C {
    field0: *mut wire_cst_c_twin_rust_async,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AbcTwinRustAsync_JustInt {
    field0: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_abc_twin_sync {
    tag: i32,
    kind: AbcTwinSyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union AbcTwinSyncKind {
    A: wire_cst_AbcTwinSync_A,
    B: wire_cst_AbcTwinSync_B,
    C: wire_cst_AbcTwinSync_C,
    JustInt: wire_cst_AbcTwinSync_JustInt,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AbcTwinSync_A {
    field0: *mut wire_cst_a_twin_sync,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AbcTwinSync_B {
    field0: *mut wire_cst_b_twin_sync,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AbcTwinSync_C {
    field0: *mut wire_cst_c_twin_sync,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AbcTwinSync_JustInt {
    field0: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_another_macro_struct_twin_normal {
    data: i32,
    non_final_data: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_another_twin_normal {
    a: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_another_twin_rust_async {
    a: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_another_twin_sync {
    a: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_application_env {
    vars: *mut wire_cst_list_application_env_var,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_application_env_var {
    field0: *mut wire_cst_list_prim_u_8_strict,
    field1: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_application_message {
    tag: i32,
    kind: ApplicationMessageKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union ApplicationMessageKind {
    DisplayMessage: wire_cst_ApplicationMessage_DisplayMessage,
    RenderPixel: wire_cst_ApplicationMessage_RenderPixel,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ApplicationMessage_DisplayMessage {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ApplicationMessage_RenderPixel {
    x: i32,
    y: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_application_settings {
    name: *mut wire_cst_list_prim_u_8_strict,
    version: *mut wire_cst_list_prim_u_8_strict,
    mode: i32,
    env: *mut wire_cst_application_env,
    env_optional: *mut wire_cst_application_env,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_attribute_twin_normal {
    key: *mut wire_cst_list_prim_u_8_strict,
    value: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_attribute_twin_rust_async {
    key: *mut wire_cst_list_prim_u_8_strict,
    value: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_attribute_twin_sync {
    key: *mut wire_cst_list_prim_u_8_strict,
    value: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_b_twin_normal {
    b: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_b_twin_rust_async {
    b: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_b_twin_sync {
    b: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_basic_general_enum_twin_normal {
    tag: i32,
    kind: BasicGeneralEnumTwinNormalKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union BasicGeneralEnumTwinNormalKind {
    Apple: wire_cst_BasicGeneralEnumTwinNormal_Apple,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_BasicGeneralEnumTwinNormal_Apple {
    field: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_basic_general_enum_twin_rust_async {
    tag: i32,
    kind: BasicGeneralEnumTwinRustAsyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union BasicGeneralEnumTwinRustAsyncKind {
    Apple: wire_cst_BasicGeneralEnumTwinRustAsync_Apple,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_BasicGeneralEnumTwinRustAsync_Apple {
    field: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_basic_general_enum_twin_sync {
    tag: i32,
    kind: BasicGeneralEnumTwinSyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union BasicGeneralEnumTwinSyncKind {
    Apple: wire_cst_BasicGeneralEnumTwinSync_Apple,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_BasicGeneralEnumTwinSync_Apple {
    field: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_basic_struct_twin_normal {
    apple: *mut wire_cst_list_prim_u_8_strict,
    orange: *mut i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_basic_struct_twin_rust_async {
    apple: *mut wire_cst_list_prim_u_8_strict,
    orange: *mut i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_basic_struct_twin_sync {
    apple: *mut wire_cst_list_prim_u_8_strict,
    orange: *mut i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_benchmark_binary_tree_twin_normal {
    name: *mut wire_cst_list_prim_u_8_strict,
    left: *mut wire_cst_benchmark_binary_tree_twin_normal,
    right: *mut wire_cst_benchmark_binary_tree_twin_normal,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_benchmark_binary_tree_twin_rust_async {
    name: *mut wire_cst_list_prim_u_8_strict,
    left: *mut wire_cst_benchmark_binary_tree_twin_rust_async,
    right: *mut wire_cst_benchmark_binary_tree_twin_rust_async,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_benchmark_binary_tree_twin_sync {
    name: *mut wire_cst_list_prim_u_8_strict,
    left: *mut wire_cst_benchmark_binary_tree_twin_sync,
    right: *mut wire_cst_benchmark_binary_tree_twin_sync,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_benchmark_blob_twin_normal {
    first: *mut wire_cst_list_prim_u_8_strict,
    second: *mut wire_cst_list_prim_u_8_strict,
    third: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_benchmark_blob_twin_rust_async {
    first: *mut wire_cst_list_prim_u_8_strict,
    second: *mut wire_cst_list_prim_u_8_strict,
    third: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_benchmark_blob_twin_sync {
    first: *mut wire_cst_list_prim_u_8_strict,
    second: *mut wire_cst_list_prim_u_8_strict,
    third: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_big_buffers_twin_normal {
    int64: *mut wire_cst_list_prim_i_64_strict,
    uint64: *mut wire_cst_list_prim_u_64_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_big_buffers_twin_rust_async {
    int64: *mut wire_cst_list_prim_i_64_strict,
    uint64: *mut wire_cst_list_prim_u_64_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_big_buffers_twin_sync {
    int64: *mut wire_cst_list_prim_i_64_strict,
    uint64: *mut wire_cst_list_prim_u_64_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_blob_twin_normal {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_blob_twin_rust_async {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_blob_twin_sync {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_c_twin_normal {
    c: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_c_twin_rust_async {
    c: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_c_twin_sync {
    c: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_concatenate_with_twin_normal {
    a: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_concatenate_with_twin_rust_async {
    a: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_concatenate_with_twin_sync {
    a: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_constructor_translatable_struct_twin_normal {
    one: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_constructor_translatable_sync_struct_twin_normal {
    one: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_contains_mirrored_sub_struct_twin_normal {
    test: wire_cst_raw_string_mirrored,
    test2: wire_cst_another_twin_normal,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_contains_mirrored_sub_struct_twin_rust_async {
    test: wire_cst_raw_string_mirrored,
    test2: wire_cst_another_twin_rust_async,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_contains_mirrored_sub_struct_twin_sync {
    test: wire_cst_raw_string_mirrored,
    test2: wire_cst_another_twin_sync,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_enum_error_twin_normal {
    tag: i32,
    kind: CustomEnumErrorTwinNormalKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union CustomEnumErrorTwinNormalKind {
    One: wire_cst_CustomEnumErrorTwinNormal_One,
    Two: wire_cst_CustomEnumErrorTwinNormal_Two,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomEnumErrorTwinNormal_One {
    message: *mut wire_cst_list_prim_u_8_strict,
    backtrace: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomEnumErrorTwinNormal_Two {
    message: u32,
    backtrace: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_enum_error_twin_rust_async {
    tag: i32,
    kind: CustomEnumErrorTwinRustAsyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union CustomEnumErrorTwinRustAsyncKind {
    One: wire_cst_CustomEnumErrorTwinRustAsync_One,
    Two: wire_cst_CustomEnumErrorTwinRustAsync_Two,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomEnumErrorTwinRustAsync_One {
    message: *mut wire_cst_list_prim_u_8_strict,
    backtrace: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomEnumErrorTwinRustAsync_Two {
    message: u32,
    backtrace: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_enum_error_twin_sync {
    tag: i32,
    kind: CustomEnumErrorTwinSyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union CustomEnumErrorTwinSyncKind {
    One: wire_cst_CustomEnumErrorTwinSync_One,
    Two: wire_cst_CustomEnumErrorTwinSync_Two,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomEnumErrorTwinSync_One {
    message: *mut wire_cst_list_prim_u_8_strict,
    backtrace: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomEnumErrorTwinSync_Two {
    message: u32,
    backtrace: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_error_twin_normal {
    tag: i32,
    kind: CustomErrorTwinNormalKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union CustomErrorTwinNormalKind {
    Error0: wire_cst_CustomErrorTwinNormal_Error0,
    Error1: wire_cst_CustomErrorTwinNormal_Error1,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomErrorTwinNormal_Error0 {
    e: *mut wire_cst_list_prim_u_8_strict,
    backtrace: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomErrorTwinNormal_Error1 {
    e: u32,
    backtrace: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_error_twin_rust_async {
    tag: i32,
    kind: CustomErrorTwinRustAsyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union CustomErrorTwinRustAsyncKind {
    Error0: wire_cst_CustomErrorTwinRustAsync_Error0,
    Error1: wire_cst_CustomErrorTwinRustAsync_Error1,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomErrorTwinRustAsync_Error0 {
    e: *mut wire_cst_list_prim_u_8_strict,
    backtrace: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomErrorTwinRustAsync_Error1 {
    e: u32,
    backtrace: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_error_twin_sync {
    tag: i32,
    kind: CustomErrorTwinSyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union CustomErrorTwinSyncKind {
    Error0: wire_cst_CustomErrorTwinSync_Error0,
    Error1: wire_cst_CustomErrorTwinSync_Error1,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomErrorTwinSync_Error0 {
    e: *mut wire_cst_list_prim_u_8_strict,
    backtrace: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomErrorTwinSync_Error1 {
    e: u32,
    backtrace: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_nested_error_1_twin_normal {
    tag: i32,
    kind: CustomNestedError1TwinNormalKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union CustomNestedError1TwinNormalKind {
    CustomNested1: wire_cst_CustomNestedError1TwinNormal_CustomNested1,
    ErrorNested: wire_cst_CustomNestedError1TwinNormal_ErrorNested,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedError1TwinNormal_CustomNested1 {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedError1TwinNormal_ErrorNested {
    field0: *mut wire_cst_custom_nested_error_2_twin_normal,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_nested_error_1_twin_rust_async {
    tag: i32,
    kind: CustomNestedError1TwinRustAsyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union CustomNestedError1TwinRustAsyncKind {
    CustomNested1: wire_cst_CustomNestedError1TwinRustAsync_CustomNested1,
    ErrorNested: wire_cst_CustomNestedError1TwinRustAsync_ErrorNested,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedError1TwinRustAsync_CustomNested1 {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedError1TwinRustAsync_ErrorNested {
    field0: *mut wire_cst_custom_nested_error_2_twin_rust_async,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_nested_error_1_twin_sync {
    tag: i32,
    kind: CustomNestedError1TwinSyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union CustomNestedError1TwinSyncKind {
    CustomNested1: wire_cst_CustomNestedError1TwinSync_CustomNested1,
    ErrorNested: wire_cst_CustomNestedError1TwinSync_ErrorNested,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedError1TwinSync_CustomNested1 {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedError1TwinSync_ErrorNested {
    field0: *mut wire_cst_custom_nested_error_2_twin_sync,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_nested_error_2_twin_normal {
    tag: i32,
    kind: CustomNestedError2TwinNormalKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union CustomNestedError2TwinNormalKind {
    CustomNested2: wire_cst_CustomNestedError2TwinNormal_CustomNested2,
    CustomNested2Number: wire_cst_CustomNestedError2TwinNormal_CustomNested2Number,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedError2TwinNormal_CustomNested2 {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedError2TwinNormal_CustomNested2Number {
    field0: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_nested_error_2_twin_rust_async {
    tag: i32,
    kind: CustomNestedError2TwinRustAsyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union CustomNestedError2TwinRustAsyncKind {
    CustomNested2: wire_cst_CustomNestedError2TwinRustAsync_CustomNested2,
    CustomNested2Number: wire_cst_CustomNestedError2TwinRustAsync_CustomNested2Number,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedError2TwinRustAsync_CustomNested2 {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedError2TwinRustAsync_CustomNested2Number {
    field0: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_nested_error_2_twin_sync {
    tag: i32,
    kind: CustomNestedError2TwinSyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union CustomNestedError2TwinSyncKind {
    CustomNested2: wire_cst_CustomNestedError2TwinSync_CustomNested2,
    CustomNested2Number: wire_cst_CustomNestedError2TwinSync_CustomNested2Number,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedError2TwinSync_CustomNested2 {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedError2TwinSync_CustomNested2Number {
    field0: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_nested_error_inner_twin_normal {
    tag: i32,
    kind: CustomNestedErrorInnerTwinNormalKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union CustomNestedErrorInnerTwinNormalKind {
    Three: wire_cst_CustomNestedErrorInnerTwinNormal_Three,
    Four: wire_cst_CustomNestedErrorInnerTwinNormal_Four,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedErrorInnerTwinNormal_Three {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedErrorInnerTwinNormal_Four {
    field0: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_nested_error_inner_twin_rust_async {
    tag: i32,
    kind: CustomNestedErrorInnerTwinRustAsyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union CustomNestedErrorInnerTwinRustAsyncKind {
    Three: wire_cst_CustomNestedErrorInnerTwinRustAsync_Three,
    Four: wire_cst_CustomNestedErrorInnerTwinRustAsync_Four,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedErrorInnerTwinRustAsync_Three {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedErrorInnerTwinRustAsync_Four {
    field0: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_nested_error_inner_twin_sync {
    tag: i32,
    kind: CustomNestedErrorInnerTwinSyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union CustomNestedErrorInnerTwinSyncKind {
    Three: wire_cst_CustomNestedErrorInnerTwinSync_Three,
    Four: wire_cst_CustomNestedErrorInnerTwinSync_Four,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedErrorInnerTwinSync_Three {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedErrorInnerTwinSync_Four {
    field0: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_nested_error_outer_twin_normal {
    tag: i32,
    kind: CustomNestedErrorOuterTwinNormalKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union CustomNestedErrorOuterTwinNormalKind {
    One: wire_cst_CustomNestedErrorOuterTwinNormal_One,
    Two: wire_cst_CustomNestedErrorOuterTwinNormal_Two,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedErrorOuterTwinNormal_One {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedErrorOuterTwinNormal_Two {
    field0: *mut wire_cst_custom_nested_error_inner_twin_normal,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_nested_error_outer_twin_rust_async {
    tag: i32,
    kind: CustomNestedErrorOuterTwinRustAsyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union CustomNestedErrorOuterTwinRustAsyncKind {
    One: wire_cst_CustomNestedErrorOuterTwinRustAsync_One,
    Two: wire_cst_CustomNestedErrorOuterTwinRustAsync_Two,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedErrorOuterTwinRustAsync_One {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedErrorOuterTwinRustAsync_Two {
    field0: *mut wire_cst_custom_nested_error_inner_twin_rust_async,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_nested_error_outer_twin_sync {
    tag: i32,
    kind: CustomNestedErrorOuterTwinSyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union CustomNestedErrorOuterTwinSyncKind {
    One: wire_cst_CustomNestedErrorOuterTwinSync_One,
    Two: wire_cst_CustomNestedErrorOuterTwinSync_Two,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedErrorOuterTwinSync_One {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_CustomNestedErrorOuterTwinSync_Two {
    field0: *mut wire_cst_custom_nested_error_inner_twin_sync,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_struct_error_another_twin_normal {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_struct_error_another_twin_rust_async {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_struct_error_another_twin_sync {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_struct_error_twin_normal {
    a: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_struct_error_twin_rust_async {
    a: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_struct_error_twin_sync {
    a: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_struct_twin_normal {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_struct_twin_rust_async {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_custom_struct_twin_sync {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_customized_twin_normal {
    final_field: *mut wire_cst_list_prim_u_8_strict,
    non_final_field: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_customized_twin_rust_async {
    final_field: *mut wire_cst_list_prim_u_8_strict,
    non_final_field: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_customized_twin_sync {
    final_field: *mut wire_cst_list_prim_u_8_strict,
    non_final_field: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_dart_opaque_nested_twin_normal {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_dart_opaque_nested_twin_rust_async {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_dart_opaque_nested_twin_sync {
    first: *const std::ffi::c_void,
    second: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_demo_struct_for_rust_call_dart_twin_normal {
    name: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_demo_struct_for_rust_call_dart_twin_rust_async {
    name: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_distance_twin_normal {
    tag: i32,
    kind: DistanceTwinNormalKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union DistanceTwinNormalKind {
    Map: wire_cst_DistanceTwinNormal_Map,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_DistanceTwinNormal_Map {
    field0: f64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_distance_twin_rust_async {
    tag: i32,
    kind: DistanceTwinRustAsyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union DistanceTwinRustAsyncKind {
    Map: wire_cst_DistanceTwinRustAsync_Map,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_DistanceTwinRustAsync_Map {
    field0: f64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_distance_twin_sync {
    tag: i32,
    kind: DistanceTwinSyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union DistanceTwinSyncKind {
    Map: wire_cst_DistanceTwinSync_Map,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_DistanceTwinSync_Map {
    field0: f64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_element_twin_normal {
    tag: *mut wire_cst_list_prim_u_8_strict,
    text: *mut wire_cst_list_prim_u_8_strict,
    attributes: *mut wire_cst_list_attribute_twin_normal,
    children: *mut wire_cst_list_element_twin_normal,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_element_twin_rust_async {
    tag: *mut wire_cst_list_prim_u_8_strict,
    text: *mut wire_cst_list_prim_u_8_strict,
    attributes: *mut wire_cst_list_attribute_twin_rust_async,
    children: *mut wire_cst_list_element_twin_rust_async,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_element_twin_sync {
    tag: *mut wire_cst_list_prim_u_8_strict,
    text: *mut wire_cst_list_prim_u_8_strict,
    attributes: *mut wire_cst_list_attribute_twin_sync,
    children: *mut wire_cst_list_element_twin_sync,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_empty_twin_normal {}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_empty_twin_rust_async {}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_empty_twin_sync {}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_dart_opaque_twin_normal {
    tag: i32,
    kind: EnumDartOpaqueTwinNormalKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumDartOpaqueTwinNormalKind {
    Primitive: wire_cst_EnumDartOpaqueTwinNormal_Primitive,
    Opaque: wire_cst_EnumDartOpaqueTwinNormal_Opaque,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumDartOpaqueTwinNormal_Primitive {
    field0: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumDartOpaqueTwinNormal_Opaque {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_dart_opaque_twin_rust_async {
    tag: i32,
    kind: EnumDartOpaqueTwinRustAsyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumDartOpaqueTwinRustAsyncKind {
    Primitive: wire_cst_EnumDartOpaqueTwinRustAsync_Primitive,
    Opaque: wire_cst_EnumDartOpaqueTwinRustAsync_Opaque,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumDartOpaqueTwinRustAsync_Primitive {
    field0: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumDartOpaqueTwinRustAsync_Opaque {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_dart_opaque_twin_sync {
    tag: i32,
    kind: EnumDartOpaqueTwinSyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumDartOpaqueTwinSyncKind {
    Primitive: wire_cst_EnumDartOpaqueTwinSync_Primitive,
    Opaque: wire_cst_EnumDartOpaqueTwinSync_Opaque,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumDartOpaqueTwinSync_Primitive {
    field0: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumDartOpaqueTwinSync_Opaque {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_opaque_twin_moi {
    tag: i32,
    kind: EnumOpaqueTwinMoiKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumOpaqueTwinMoiKind {
    Struct: wire_cst_EnumOpaqueTwinMoi_Struct,
    Primitive: wire_cst_EnumOpaqueTwinMoi_Primitive,
    TraitObj: wire_cst_EnumOpaqueTwinMoi_TraitObj,
    Mutex: wire_cst_EnumOpaqueTwinMoi_Mutex,
    RwLock: wire_cst_EnumOpaqueTwinMoi_RwLock,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinMoi_Struct {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinMoi_Primitive {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinMoi_TraitObj {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinMoi_Mutex {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinMoi_RwLock {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_opaque_twin_normal {
    tag: i32,
    kind: EnumOpaqueTwinNormalKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumOpaqueTwinNormalKind {
    Struct: wire_cst_EnumOpaqueTwinNormal_Struct,
    Primitive: wire_cst_EnumOpaqueTwinNormal_Primitive,
    TraitObj: wire_cst_EnumOpaqueTwinNormal_TraitObj,
    Mutex: wire_cst_EnumOpaqueTwinNormal_Mutex,
    RwLock: wire_cst_EnumOpaqueTwinNormal_RwLock,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinNormal_Struct {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinNormal_Primitive {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinNormal_TraitObj {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinNormal_Mutex {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinNormal_RwLock {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_opaque_twin_rust_async {
    tag: i32,
    kind: EnumOpaqueTwinRustAsyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumOpaqueTwinRustAsyncKind {
    Struct: wire_cst_EnumOpaqueTwinRustAsync_Struct,
    Primitive: wire_cst_EnumOpaqueTwinRustAsync_Primitive,
    TraitObj: wire_cst_EnumOpaqueTwinRustAsync_TraitObj,
    Mutex: wire_cst_EnumOpaqueTwinRustAsync_Mutex,
    RwLock: wire_cst_EnumOpaqueTwinRustAsync_RwLock,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinRustAsync_Struct {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinRustAsync_Primitive {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinRustAsync_TraitObj {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinRustAsync_Mutex {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinRustAsync_RwLock {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_opaque_twin_rust_async_moi {
    tag: i32,
    kind: EnumOpaqueTwinRustAsyncMoiKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumOpaqueTwinRustAsyncMoiKind {
    Struct: wire_cst_EnumOpaqueTwinRustAsyncMoi_Struct,
    Primitive: wire_cst_EnumOpaqueTwinRustAsyncMoi_Primitive,
    TraitObj: wire_cst_EnumOpaqueTwinRustAsyncMoi_TraitObj,
    Mutex: wire_cst_EnumOpaqueTwinRustAsyncMoi_Mutex,
    RwLock: wire_cst_EnumOpaqueTwinRustAsyncMoi_RwLock,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinRustAsyncMoi_Struct {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinRustAsyncMoi_Primitive {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinRustAsyncMoi_TraitObj {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinRustAsyncMoi_Mutex {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinRustAsyncMoi_RwLock {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_opaque_twin_sync {
    tag: i32,
    kind: EnumOpaqueTwinSyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumOpaqueTwinSyncKind {
    Struct: wire_cst_EnumOpaqueTwinSync_Struct,
    Primitive: wire_cst_EnumOpaqueTwinSync_Primitive,
    TraitObj: wire_cst_EnumOpaqueTwinSync_TraitObj,
    Mutex: wire_cst_EnumOpaqueTwinSync_Mutex,
    RwLock: wire_cst_EnumOpaqueTwinSync_RwLock,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinSync_Struct {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinSync_Primitive {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinSync_TraitObj {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinSync_Mutex {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinSync_RwLock {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_opaque_twin_sync_moi {
    tag: i32,
    kind: EnumOpaqueTwinSyncMoiKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumOpaqueTwinSyncMoiKind {
    Struct: wire_cst_EnumOpaqueTwinSyncMoi_Struct,
    Primitive: wire_cst_EnumOpaqueTwinSyncMoi_Primitive,
    TraitObj: wire_cst_EnumOpaqueTwinSyncMoi_TraitObj,
    Mutex: wire_cst_EnumOpaqueTwinSyncMoi_Mutex,
    RwLock: wire_cst_EnumOpaqueTwinSyncMoi_RwLock,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinSyncMoi_Struct {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinSyncMoi_Primitive {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinSyncMoi_TraitObj {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinSyncMoi_Mutex {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumOpaqueTwinSyncMoi_RwLock {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_with_good_and_opaque_twin_moi {
    tag: i32,
    kind: EnumWithGoodAndOpaqueTwinMoiKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumWithGoodAndOpaqueTwinMoiKind {
    Good: wire_cst_EnumWithGoodAndOpaqueTwinMoi_Good,
    Opaque: wire_cst_EnumWithGoodAndOpaqueTwinMoi_Opaque,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithGoodAndOpaqueTwinMoi_Good {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithGoodAndOpaqueTwinMoi_Opaque {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_with_good_and_opaque_twin_normal {
    tag: i32,
    kind: EnumWithGoodAndOpaqueTwinNormalKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumWithGoodAndOpaqueTwinNormalKind {
    Good: wire_cst_EnumWithGoodAndOpaqueTwinNormal_Good,
    Opaque: wire_cst_EnumWithGoodAndOpaqueTwinNormal_Opaque,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithGoodAndOpaqueTwinNormal_Good {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithGoodAndOpaqueTwinNormal_Opaque {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_with_good_and_opaque_twin_rust_async {
    tag: i32,
    kind: EnumWithGoodAndOpaqueTwinRustAsyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumWithGoodAndOpaqueTwinRustAsyncKind {
    Good: wire_cst_EnumWithGoodAndOpaqueTwinRustAsync_Good,
    Opaque: wire_cst_EnumWithGoodAndOpaqueTwinRustAsync_Opaque,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithGoodAndOpaqueTwinRustAsync_Good {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithGoodAndOpaqueTwinRustAsync_Opaque {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_with_good_and_opaque_twin_rust_async_moi {
    tag: i32,
    kind: EnumWithGoodAndOpaqueTwinRustAsyncMoiKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumWithGoodAndOpaqueTwinRustAsyncMoiKind {
    Good: wire_cst_EnumWithGoodAndOpaqueTwinRustAsyncMoi_Good,
    Opaque: wire_cst_EnumWithGoodAndOpaqueTwinRustAsyncMoi_Opaque,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithGoodAndOpaqueTwinRustAsyncMoi_Good {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithGoodAndOpaqueTwinRustAsyncMoi_Opaque {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_with_good_and_opaque_twin_sync {
    tag: i32,
    kind: EnumWithGoodAndOpaqueTwinSyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumWithGoodAndOpaqueTwinSyncKind {
    Good: wire_cst_EnumWithGoodAndOpaqueTwinSync_Good,
    Opaque: wire_cst_EnumWithGoodAndOpaqueTwinSync_Opaque,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithGoodAndOpaqueTwinSync_Good {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithGoodAndOpaqueTwinSync_Opaque {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_with_good_and_opaque_twin_sync_moi {
    tag: i32,
    kind: EnumWithGoodAndOpaqueTwinSyncMoiKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumWithGoodAndOpaqueTwinSyncMoiKind {
    Good: wire_cst_EnumWithGoodAndOpaqueTwinSyncMoi_Good,
    Opaque: wire_cst_EnumWithGoodAndOpaqueTwinSyncMoi_Opaque,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithGoodAndOpaqueTwinSyncMoi_Good {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithGoodAndOpaqueTwinSyncMoi_Opaque {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_with_item_mixed_twin_normal {
    tag: i32,
    kind: EnumWithItemMixedTwinNormalKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumWithItemMixedTwinNormalKind {
    B: wire_cst_EnumWithItemMixedTwinNormal_B,
    C: wire_cst_EnumWithItemMixedTwinNormal_C,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithItemMixedTwinNormal_B {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithItemMixedTwinNormal_C {
    c_field: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_with_item_mixed_twin_rust_async {
    tag: i32,
    kind: EnumWithItemMixedTwinRustAsyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumWithItemMixedTwinRustAsyncKind {
    B: wire_cst_EnumWithItemMixedTwinRustAsync_B,
    C: wire_cst_EnumWithItemMixedTwinRustAsync_C,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithItemMixedTwinRustAsync_B {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithItemMixedTwinRustAsync_C {
    c_field: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_with_item_mixed_twin_sync {
    tag: i32,
    kind: EnumWithItemMixedTwinSyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumWithItemMixedTwinSyncKind {
    B: wire_cst_EnumWithItemMixedTwinSync_B,
    C: wire_cst_EnumWithItemMixedTwinSync_C,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithItemMixedTwinSync_B {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithItemMixedTwinSync_C {
    c_field: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_with_item_struct_twin_normal {
    tag: i32,
    kind: EnumWithItemStructTwinNormalKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumWithItemStructTwinNormalKind {
    A: wire_cst_EnumWithItemStructTwinNormal_A,
    B: wire_cst_EnumWithItemStructTwinNormal_B,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithItemStructTwinNormal_A {
    a_field: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithItemStructTwinNormal_B {
    b_field: *mut wire_cst_list_prim_i_32_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_with_item_struct_twin_rust_async {
    tag: i32,
    kind: EnumWithItemStructTwinRustAsyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumWithItemStructTwinRustAsyncKind {
    A: wire_cst_EnumWithItemStructTwinRustAsync_A,
    B: wire_cst_EnumWithItemStructTwinRustAsync_B,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithItemStructTwinRustAsync_A {
    a_field: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithItemStructTwinRustAsync_B {
    b_field: *mut wire_cst_list_prim_i_32_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_with_item_struct_twin_sync {
    tag: i32,
    kind: EnumWithItemStructTwinSyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumWithItemStructTwinSyncKind {
    A: wire_cst_EnumWithItemStructTwinSync_A,
    B: wire_cst_EnumWithItemStructTwinSync_B,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithItemStructTwinSync_A {
    a_field: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithItemStructTwinSync_B {
    b_field: *mut wire_cst_list_prim_i_32_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_with_item_tuple_twin_normal {
    tag: i32,
    kind: EnumWithItemTupleTwinNormalKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumWithItemTupleTwinNormalKind {
    A: wire_cst_EnumWithItemTupleTwinNormal_A,
    B: wire_cst_EnumWithItemTupleTwinNormal_B,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithItemTupleTwinNormal_A {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithItemTupleTwinNormal_B {
    field0: *mut wire_cst_list_prim_i_32_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_with_item_tuple_twin_rust_async {
    tag: i32,
    kind: EnumWithItemTupleTwinRustAsyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumWithItemTupleTwinRustAsyncKind {
    A: wire_cst_EnumWithItemTupleTwinRustAsync_A,
    B: wire_cst_EnumWithItemTupleTwinRustAsync_B,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithItemTupleTwinRustAsync_A {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithItemTupleTwinRustAsync_B {
    field0: *mut wire_cst_list_prim_i_32_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_enum_with_item_tuple_twin_sync {
    tag: i32,
    kind: EnumWithItemTupleTwinSyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EnumWithItemTupleTwinSyncKind {
    A: wire_cst_EnumWithItemTupleTwinSync_A,
    B: wire_cst_EnumWithItemTupleTwinSync_B,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithItemTupleTwinSync_A {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EnumWithItemTupleTwinSync_B {
    field0: *mut wire_cst_list_prim_i_32_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_event_twin_normal {
    address: *mut wire_cst_list_prim_u_8_strict,
    payload: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_event_twin_rust_async {
    address: *mut wire_cst_list_prim_u_8_strict,
    payload: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_exotic_optionals_twin_normal {
    int32: *mut i32,
    int64: *mut i64,
    float64: *mut f64,
    boolean: *mut bool,
    zerocopy: *mut wire_cst_list_prim_u_8_strict,
    int8list: *mut wire_cst_list_prim_i_8_strict,
    uint8list: *mut wire_cst_list_prim_u_8_strict,
    int32list: *mut wire_cst_list_prim_i_32_strict,
    float32list: *mut wire_cst_list_prim_f_32_strict,
    float64list: *mut wire_cst_list_prim_f_64_strict,
    attributes: *mut wire_cst_list_attribute_twin_normal,
    attributes_nullable: *mut wire_cst_list_opt_box_autoadd_attribute_twin_normal,
    nullable_attributes: *mut wire_cst_list_opt_box_autoadd_attribute_twin_normal,
    newtypeint: *mut wire_cst_new_type_int_twin_normal,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_exotic_optionals_twin_rust_async {
    int32: *mut i32,
    int64: *mut i64,
    float64: *mut f64,
    boolean: *mut bool,
    zerocopy: *mut wire_cst_list_prim_u_8_strict,
    int8list: *mut wire_cst_list_prim_i_8_strict,
    uint8list: *mut wire_cst_list_prim_u_8_strict,
    int32list: *mut wire_cst_list_prim_i_32_strict,
    float32list: *mut wire_cst_list_prim_f_32_strict,
    float64list: *mut wire_cst_list_prim_f_64_strict,
    attributes: *mut wire_cst_list_attribute_twin_rust_async,
    attributes_nullable: *mut wire_cst_list_opt_box_autoadd_attribute_twin_rust_async,
    nullable_attributes: *mut wire_cst_list_opt_box_autoadd_attribute_twin_rust_async,
    newtypeint: *mut wire_cst_new_type_int_twin_rust_async,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_exotic_optionals_twin_sync {
    int32: *mut i32,
    int64: *mut i64,
    float64: *mut f64,
    boolean: *mut bool,
    zerocopy: *mut wire_cst_list_prim_u_8_strict,
    int8list: *mut wire_cst_list_prim_i_8_strict,
    uint8list: *mut wire_cst_list_prim_u_8_strict,
    int32list: *mut wire_cst_list_prim_i_32_strict,
    float32list: *mut wire_cst_list_prim_f_32_strict,
    float64list: *mut wire_cst_list_prim_f_64_strict,
    attributes: *mut wire_cst_list_attribute_twin_sync,
    attributes_nullable: *mut wire_cst_list_opt_box_autoadd_attribute_twin_sync,
    nullable_attributes: *mut wire_cst_list_opt_box_autoadd_attribute_twin_sync,
    newtypeint: *mut wire_cst_new_type_int_twin_sync,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_feature_chrono_twin_normal {
    utc: i64,
    local: i64,
    duration: i64,
    naive: i64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_feature_chrono_twin_rust_async {
    utc: i64,
    local: i64,
    duration: i64,
    naive: i64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_feature_chrono_twin_sync {
    utc: i64,
    local: i64,
    duration: i64,
    naive: i64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_feature_uuid_twin_normal {
    one: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_feature_uuid_twin_rust_async {
    one: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_feature_uuid_twin_sync {
    one: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_feed_id_twin_normal {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_feed_id_twin_rust_async {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_feed_id_twin_sync {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_hash_map_value {
    inner: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_kitchen_sink_twin_normal {
    tag: i32,
    kind: KitchenSinkTwinNormalKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union KitchenSinkTwinNormalKind {
    Primitives: wire_cst_KitchenSinkTwinNormal_Primitives,
    Nested: wire_cst_KitchenSinkTwinNormal_Nested,
    Optional: wire_cst_KitchenSinkTwinNormal_Optional,
    Buffer: wire_cst_KitchenSinkTwinNormal_Buffer,
    Enums: wire_cst_KitchenSinkTwinNormal_Enums,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_KitchenSinkTwinNormal_Primitives {
    int32: i32,
    float64: f64,
    boolean: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_KitchenSinkTwinNormal_Nested {
    field0: i32,
    field1: *mut wire_cst_kitchen_sink_twin_normal,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_KitchenSinkTwinNormal_Optional {
    field0: *mut i32,
    field1: *mut i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_KitchenSinkTwinNormal_Buffer {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_KitchenSinkTwinNormal_Enums {
    field0: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_kitchen_sink_twin_rust_async {
    tag: i32,
    kind: KitchenSinkTwinRustAsyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union KitchenSinkTwinRustAsyncKind {
    Primitives: wire_cst_KitchenSinkTwinRustAsync_Primitives,
    Nested: wire_cst_KitchenSinkTwinRustAsync_Nested,
    Optional: wire_cst_KitchenSinkTwinRustAsync_Optional,
    Buffer: wire_cst_KitchenSinkTwinRustAsync_Buffer,
    Enums: wire_cst_KitchenSinkTwinRustAsync_Enums,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_KitchenSinkTwinRustAsync_Primitives {
    int32: i32,
    float64: f64,
    boolean: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_KitchenSinkTwinRustAsync_Nested {
    field0: i32,
    field1: *mut wire_cst_kitchen_sink_twin_rust_async,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_KitchenSinkTwinRustAsync_Optional {
    field0: *mut i32,
    field1: *mut i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_KitchenSinkTwinRustAsync_Buffer {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_KitchenSinkTwinRustAsync_Enums {
    field0: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_kitchen_sink_twin_sync {
    tag: i32,
    kind: KitchenSinkTwinSyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union KitchenSinkTwinSyncKind {
    Primitives: wire_cst_KitchenSinkTwinSync_Primitives,
    Nested: wire_cst_KitchenSinkTwinSync_Nested,
    Optional: wire_cst_KitchenSinkTwinSync_Optional,
    Buffer: wire_cst_KitchenSinkTwinSync_Buffer,
    Enums: wire_cst_KitchenSinkTwinSync_Enums,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_KitchenSinkTwinSync_Primitives {
    int32: i32,
    float64: f64,
    boolean: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_KitchenSinkTwinSync_Nested {
    field0: i32,
    field1: *mut wire_cst_kitchen_sink_twin_sync,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_KitchenSinkTwinSync_Optional {
    field0: *mut i32,
    field1: *mut i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_KitchenSinkTwinSync_Buffer {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_KitchenSinkTwinSync_Enums {
    field0: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi
{
    ptr: *mut usize,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal
{
    ptr: *mut usize,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync
{
    ptr: *mut usize,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi
{
    ptr: *mut usize,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync
{
    ptr: *mut usize,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi
{
    ptr: *mut usize,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_Chrono_Duration {
    ptr: *mut i64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_Chrono_Local {
    ptr: *mut i64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_Chrono_Naive {
    ptr: *mut i64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_DartOpaque {
    ptr: *mut *const std::ffi::c_void,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_RustOpaque_HideDataTwinMoi {
    ptr: *mut usize,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_RustOpaque_HideDataTwinNormal {
    ptr: *mut usize,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_RustOpaque_HideDataTwinRustAsync {
    ptr: *mut usize,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_RustOpaque_HideDataTwinRustAsyncMoi {
    ptr: *mut usize,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_RustOpaque_HideDataTwinSync {
    ptr: *mut usize,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_RustOpaque_HideDataTwinSyncMoi {
    ptr: *mut usize,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_String {
    ptr: *mut *mut wire_cst_list_prim_u_8_strict,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_Uuid {
    ptr: *mut *mut wire_cst_list_prim_u_8_strict,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_application_env_var {
    ptr: *mut wire_cst_application_env_var,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_application_mode {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_application_settings {
    ptr: *mut wire_cst_application_settings,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_attribute_twin_normal {
    ptr: *mut wire_cst_attribute_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_attribute_twin_rust_async {
    ptr: *mut wire_cst_attribute_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_attribute_twin_sync {
    ptr: *mut wire_cst_attribute_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_basic_general_enum_twin_normal {
    ptr: *mut wire_cst_basic_general_enum_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_basic_general_enum_twin_rust_async {
    ptr: *mut wire_cst_basic_general_enum_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_basic_general_enum_twin_sync {
    ptr: *mut wire_cst_basic_general_enum_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_basic_primitive_enum_twin_normal {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_basic_primitive_enum_twin_rust_async {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_basic_primitive_enum_twin_sync {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_basic_struct_twin_normal {
    ptr: *mut wire_cst_basic_struct_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_basic_struct_twin_rust_async {
    ptr: *mut wire_cst_basic_struct_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_basic_struct_twin_sync {
    ptr: *mut wire_cst_basic_struct_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_bool {
    ptr: *mut bool,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_element_twin_normal {
    ptr: *mut wire_cst_element_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_element_twin_rust_async {
    ptr: *mut wire_cst_element_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_element_twin_sync {
    ptr: *mut wire_cst_element_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_enum_opaque_twin_moi {
    ptr: *mut wire_cst_enum_opaque_twin_moi,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_enum_opaque_twin_normal {
    ptr: *mut wire_cst_enum_opaque_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_enum_opaque_twin_rust_async {
    ptr: *mut wire_cst_enum_opaque_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_enum_opaque_twin_rust_async_moi {
    ptr: *mut wire_cst_enum_opaque_twin_rust_async_moi,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_enum_opaque_twin_sync {
    ptr: *mut wire_cst_enum_opaque_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_enum_opaque_twin_sync_moi {
    ptr: *mut wire_cst_enum_opaque_twin_sync_moi,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_list_prim_u_8_strict {
    ptr: *mut *mut wire_cst_list_prim_u_8_strict,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_my_enum {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_my_size {
    ptr: *mut wire_cst_my_size,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_my_tree_node_twin_normal {
    ptr: *mut wire_cst_my_tree_node_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_my_tree_node_twin_rust_async {
    ptr: *mut wire_cst_my_tree_node_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_my_tree_node_twin_sync {
    ptr: *mut wire_cst_my_tree_node_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_nested_raw_string_mirrored {
    ptr: *mut wire_cst_nested_raw_string_mirrored,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_of_nested_raw_string_mirrored {
    raw: *mut wire_cst_list_nested_raw_string_mirrored,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_opt_String {
    ptr: *mut *mut wire_cst_list_prim_u_8_strict,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_opt_box_autoadd_attribute_twin_normal {
    ptr: *mut *mut wire_cst_attribute_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_opt_box_autoadd_attribute_twin_rust_async {
    ptr: *mut *mut wire_cst_attribute_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_opt_box_autoadd_attribute_twin_sync {
    ptr: *mut *mut wire_cst_attribute_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_opt_box_autoadd_i_32 {
    ptr: *mut *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_opt_box_autoadd_weekdays_twin_normal {
    ptr: *mut *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async {
    ptr: *mut *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_opt_box_autoadd_weekdays_twin_sync {
    ptr: *mut *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_opt_list_prim_i_32_strict {
    ptr: *mut *mut wire_cst_list_prim_i_32_strict,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_point_twin_normal {
    ptr: *mut wire_cst_point_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_point_twin_rust_async {
    ptr: *mut wire_cst_point_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_point_twin_sync {
    ptr: *mut wire_cst_point_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_f_32_loose {
    ptr: *mut f32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_f_32_strict {
    ptr: *mut f32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_f_64_loose {
    ptr: *mut f64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_f_64_strict {
    ptr: *mut f64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_i_16_loose {
    ptr: *mut i16,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_i_16_strict {
    ptr: *mut i16,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_i_32_loose {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_i_32_strict {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_i_64_strict {
    ptr: *mut i64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_i_8_loose {
    ptr: *mut i8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_i_8_strict {
    ptr: *mut i8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_16_loose {
    ptr: *mut u16,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_16_strict {
    ptr: *mut u16,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_32_loose {
    ptr: *mut u32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_32_strict {
    ptr: *mut u32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_64_strict {
    ptr: *mut u64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_loose {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_strict {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_raw_string_enum_mirrored {
    ptr: *mut wire_cst_raw_string_enum_mirrored,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_raw_string_mirrored {
    ptr: *mut wire_cst_raw_string_mirrored,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_basic_general_enum_twin_normal {
    ptr: *mut wire_cst_record_i_32_basic_general_enum_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_basic_general_enum_twin_rust_async {
    ptr: *mut wire_cst_record_i_32_basic_general_enum_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_basic_general_enum_twin_sync {
    ptr: *mut wire_cst_record_i_32_basic_general_enum_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_basic_primitive_enum_twin_normal {
    ptr: *mut wire_cst_record_i_32_basic_primitive_enum_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_basic_primitive_enum_twin_rust_async {
    ptr: *mut wire_cst_record_i_32_basic_primitive_enum_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_basic_primitive_enum_twin_sync {
    ptr: *mut wire_cst_record_i_32_basic_primitive_enum_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_basic_struct_twin_normal {
    ptr: *mut wire_cst_record_i_32_basic_struct_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_basic_struct_twin_rust_async {
    ptr: *mut wire_cst_record_i_32_basic_struct_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_basic_struct_twin_sync {
    ptr: *mut wire_cst_record_i_32_basic_struct_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_bool {
    ptr: *mut wire_cst_record_i_32_bool,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_f_32 {
    ptr: *mut wire_cst_record_i_32_f_32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_f_64 {
    ptr: *mut wire_cst_record_i_32_f_64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_i_16 {
    ptr: *mut wire_cst_record_i_32_i_16,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_i_32 {
    ptr: *mut wire_cst_record_i_32_i_32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_i_64 {
    ptr: *mut wire_cst_record_i_32_i_64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_i_8 {
    ptr: *mut wire_cst_record_i_32_i_8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_isize {
    ptr: *mut wire_cst_record_i_32_isize,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_list_prim_u_8_strict {
    ptr: *mut wire_cst_record_i_32_list_prim_u_8_strict,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_string {
    ptr: *mut wire_cst_record_i_32_string,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_u_16 {
    ptr: *mut wire_cst_record_i_32_u_16,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_u_32 {
    ptr: *mut wire_cst_record_i_32_u_32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_u_64 {
    ptr: *mut wire_cst_record_i_32_u_64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_u_8 {
    ptr: *mut wire_cst_record_i_32_u_8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_i_32_usize {
    ptr: *mut wire_cst_record_i_32_usize,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_string_enum_simple_twin_normal {
    ptr: *mut wire_cst_record_string_enum_simple_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_string_enum_simple_twin_rust_async {
    ptr: *mut wire_cst_record_string_enum_simple_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_string_enum_simple_twin_sync {
    ptr: *mut wire_cst_record_string_enum_simple_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_string_hash_map_value {
    ptr: *mut wire_cst_record_string_hash_map_value,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_string_i_32 {
    ptr: *mut wire_cst_record_string_i_32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_string_kitchen_sink_twin_normal {
    ptr: *mut wire_cst_record_string_kitchen_sink_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_string_kitchen_sink_twin_rust_async {
    ptr: *mut wire_cst_record_string_kitchen_sink_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_string_kitchen_sink_twin_sync {
    ptr: *mut wire_cst_record_string_kitchen_sink_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_string_list_prim_u_8_strict {
    ptr: *mut wire_cst_record_string_list_prim_u_8_strict,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_string_my_size {
    ptr: *mut wire_cst_record_string_my_size,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_string_string {
    ptr: *mut wire_cst_record_string_string,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_u_8_application_mode {
    ptr: *mut wire_cst_record_u_8_application_mode,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_simple_struct_twin_normal {
    ptr: *mut wire_cst_simple_struct_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_simple_struct_twin_rust_async {
    ptr: *mut wire_cst_simple_struct_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_simple_struct_twin_sync {
    ptr: *mut wire_cst_simple_struct_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_sum_with_twin_normal {
    ptr: *mut wire_cst_sum_with_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_sum_with_twin_rust_async {
    ptr: *mut wire_cst_sum_with_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_sum_with_twin_sync {
    ptr: *mut wire_cst_sum_with_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_test_id_twin_normal {
    ptr: *mut wire_cst_test_id_twin_normal,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_test_id_twin_rust_async {
    ptr: *mut wire_cst_test_id_twin_rust_async,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_test_id_twin_sync {
    ptr: *mut wire_cst_test_id_twin_sync,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_weekdays_twin_normal {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_weekdays_twin_rust_async {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_weekdays_twin_sync {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_log_2_twin_normal {
    key: u32,
    value: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_log_2_twin_rust_async {
    key: u32,
    value: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_log_2_twin_sync {
    key: u32,
    value: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_log_twin_normal {
    key: u32,
    value: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_log_twin_rust_async {
    key: u32,
    value: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_macro_struct {
    data: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_measure_twin_normal {
    tag: i32,
    kind: MeasureTwinNormalKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union MeasureTwinNormalKind {
    Speed: wire_cst_MeasureTwinNormal_Speed,
    Distance: wire_cst_MeasureTwinNormal_Distance,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_MeasureTwinNormal_Speed {
    field0: *mut wire_cst_speed_twin_normal,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_MeasureTwinNormal_Distance {
    field0: *mut wire_cst_distance_twin_normal,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_measure_twin_rust_async {
    tag: i32,
    kind: MeasureTwinRustAsyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union MeasureTwinRustAsyncKind {
    Speed: wire_cst_MeasureTwinRustAsync_Speed,
    Distance: wire_cst_MeasureTwinRustAsync_Distance,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_MeasureTwinRustAsync_Speed {
    field0: *mut wire_cst_speed_twin_rust_async,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_MeasureTwinRustAsync_Distance {
    field0: *mut wire_cst_distance_twin_rust_async,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_measure_twin_sync {
    tag: i32,
    kind: MeasureTwinSyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union MeasureTwinSyncKind {
    Speed: wire_cst_MeasureTwinSync_Speed,
    Distance: wire_cst_MeasureTwinSync_Distance,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_MeasureTwinSync_Speed {
    field0: *mut wire_cst_speed_twin_sync,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_MeasureTwinSync_Distance {
    field0: *mut wire_cst_distance_twin_sync,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_message_id_twin_normal {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_message_id_twin_rust_async {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_message_id_twin_sync {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_mirror_struct_twin_normal {
    a: wire_cst_application_settings,
    b: wire_cst_my_struct,
    c: *mut wire_cst_list_my_enum,
    d: *mut wire_cst_list_application_settings,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_mirror_struct_twin_rust_async {
    a: wire_cst_application_settings,
    b: wire_cst_my_struct,
    c: *mut wire_cst_list_my_enum,
    d: *mut wire_cst_list_application_settings,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_mirror_struct_twin_sync {
    a: wire_cst_application_settings,
    b: wire_cst_my_struct,
    c: *mut wire_cst_list_my_enum,
    d: *mut wire_cst_list_application_settings,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_more_than_just_one_raw_string_struct_twin_normal {
    regular: *mut wire_cst_list_prim_u_8_strict,
    r#type: *mut wire_cst_list_prim_u_8_strict,
    r#async: bool,
    another: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_more_than_just_one_raw_string_struct_twin_rust_async {
    regular: *mut wire_cst_list_prim_u_8_strict,
    r#type: *mut wire_cst_list_prim_u_8_strict,
    r#async: bool,
    another: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_more_than_just_one_raw_string_struct_twin_sync {
    regular: *mut wire_cst_list_prim_u_8_strict,
    r#type: *mut wire_cst_list_prim_u_8_strict,
    r#async: bool,
    another: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_my_callable_twin_normal {
    one: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_my_callable_twin_rust_async {
    one: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_my_callable_twin_sync {
    one: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_my_nested_struct_twin_normal {
    tree_node: wire_cst_my_tree_node_twin_normal,
    weekday: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_my_nested_struct_twin_rust_async {
    tree_node: wire_cst_my_tree_node_twin_rust_async,
    weekday: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_my_nested_struct_twin_sync {
    tree_node: wire_cst_my_tree_node_twin_sync,
    weekday: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_my_size {
    width: i32,
    height: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_my_stream_entry_twin_normal {
    hello: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_my_stream_entry_twin_rust_async {
    hello: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_my_struct {
    content: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_my_tree_node_twin_normal {
    value_i32: i32,
    value_vec_u8: *mut wire_cst_list_prim_u_8_strict,
    value_boolean: bool,
    children: *mut wire_cst_list_my_tree_node_twin_normal,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_my_tree_node_twin_rust_async {
    value_i32: i32,
    value_vec_u8: *mut wire_cst_list_prim_u_8_strict,
    value_boolean: bool,
    children: *mut wire_cst_list_my_tree_node_twin_rust_async,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_my_tree_node_twin_sync {
    value_i32: i32,
    value_vec_u8: *mut wire_cst_list_prim_u_8_strict,
    value_boolean: bool,
    children: *mut wire_cst_list_my_tree_node_twin_sync,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_nested_raw_string_mirrored {
    raw: wire_cst_raw_string_mirrored,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_new_simple_struct {
    field: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_new_type_int_twin_normal {
    field0: i64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_new_type_int_twin_rust_async {
    field0: i64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_new_type_int_twin_sync {
    field0: i64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_note_twin_normal {
    day: *mut i32,
    body: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_note_twin_rust_async {
    day: *mut i32,
    body: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_note_twin_sync {
    day: *mut i32,
    body: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_numbers {
    field0: *mut wire_cst_list_prim_i_32_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_old_simple_struct {
    field: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_opaque_nested_twin_moi {
    first: usize,
    second: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_opaque_nested_twin_normal {
    first: usize,
    second: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_opaque_nested_twin_rust_async {
    first: usize,
    second: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_opaque_nested_twin_rust_async_moi {
    first: usize,
    second: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_opaque_nested_twin_sync {
    first: usize,
    second: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_opaque_nested_twin_sync_moi {
    first: usize,
    second: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_opt_vecs_twin_normal {
    i32: *mut wire_cst_list_opt_box_autoadd_i_32,
    enums: *mut wire_cst_list_opt_box_autoadd_weekdays_twin_normal,
    strings: *mut wire_cst_list_opt_String,
    buffers: *mut wire_cst_list_opt_list_prim_i_32_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_opt_vecs_twin_rust_async {
    i32: *mut wire_cst_list_opt_box_autoadd_i_32,
    enums: *mut wire_cst_list_opt_box_autoadd_weekdays_twin_rust_async,
    strings: *mut wire_cst_list_opt_String,
    buffers: *mut wire_cst_list_opt_list_prim_i_32_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_opt_vecs_twin_sync {
    i32: *mut wire_cst_list_opt_box_autoadd_i_32,
    enums: *mut wire_cst_list_opt_box_autoadd_weekdays_twin_sync,
    strings: *mut wire_cst_list_opt_String,
    buffers: *mut wire_cst_list_opt_list_prim_i_32_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_point_twin_normal {
    x: f32,
    y: f32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_point_twin_rust_async {
    x: f32,
    y: f32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_point_twin_sync {
    x: f32,
    y: f32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_raw_string_enum_mirrored {
    tag: i32,
    kind: RawStringEnumMirroredKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union RawStringEnumMirroredKind {
    Raw: wire_cst_RawStringEnumMirrored_Raw,
    Nested: wire_cst_RawStringEnumMirrored_Nested,
    ListOfNested: wire_cst_RawStringEnumMirrored_ListOfNested,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_RawStringEnumMirrored_Raw {
    field0: *mut wire_cst_raw_string_mirrored,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_RawStringEnumMirrored_Nested {
    field0: *mut wire_cst_nested_raw_string_mirrored,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_RawStringEnumMirrored_ListOfNested {
    field0: *mut wire_cst_list_of_nested_raw_string_mirrored,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_raw_string_item_struct_twin_normal {
    r#type: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_raw_string_item_struct_twin_rust_async {
    r#type: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_raw_string_item_struct_twin_sync {
    r#type: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_raw_string_mirrored {
    value: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_application_settings_raw_string_enum_mirrored {
    field0: wire_cst_application_settings,
    field1: wire_cst_raw_string_enum_mirrored,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_moi_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_moi
{
    field0: usize,
    field1: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_normal_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_normal
{
    field0: usize,
    field1: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_rust_async_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_rust_async
{
    field0: usize,
    field1: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_rust_async_moi_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_rust_async_moi
{
    field0: usize,
    field1: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_sync_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_sync
{
    field0: usize,
    field1: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_one_twin_sync_moi_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_opaque_two_twin_sync_moi
{
    field0: usize,
    field1: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_basic_general_enum_twin_normal {
    field0: i32,
    field1: wire_cst_basic_general_enum_twin_normal,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_basic_general_enum_twin_rust_async {
    field0: i32,
    field1: wire_cst_basic_general_enum_twin_rust_async,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_basic_general_enum_twin_sync {
    field0: i32,
    field1: wire_cst_basic_general_enum_twin_sync,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_basic_primitive_enum_twin_normal {
    field0: i32,
    field1: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_basic_primitive_enum_twin_rust_async {
    field0: i32,
    field1: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_basic_primitive_enum_twin_sync {
    field0: i32,
    field1: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_basic_struct_twin_normal {
    field0: i32,
    field1: wire_cst_basic_struct_twin_normal,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_basic_struct_twin_rust_async {
    field0: i32,
    field1: wire_cst_basic_struct_twin_rust_async,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_basic_struct_twin_sync {
    field0: i32,
    field1: wire_cst_basic_struct_twin_sync,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_bool {
    field0: i32,
    field1: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_f_32 {
    field0: i32,
    field1: f32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_f_64 {
    field0: i32,
    field1: f64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_i_16 {
    field0: i32,
    field1: i16,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_i_32 {
    field0: i32,
    field1: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_i_64 {
    field0: i32,
    field1: i64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_i_8 {
    field0: i32,
    field1: i8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_isize {
    field0: i32,
    field1: isize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_list_prim_u_8_strict {
    field0: i32,
    field1: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_string {
    field0: i32,
    field1: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_u_16 {
    field0: i32,
    field1: u16,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_u_32 {
    field0: i32,
    field1: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_u_64 {
    field0: i32,
    field1: u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_u_8 {
    field0: i32,
    field1: u8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_i_32_usize {
    field0: i32,
    field1: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_string_enum_simple_twin_normal {
    field0: *mut wire_cst_list_prim_u_8_strict,
    field1: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_string_enum_simple_twin_rust_async {
    field0: *mut wire_cst_list_prim_u_8_strict,
    field1: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_string_enum_simple_twin_sync {
    field0: *mut wire_cst_list_prim_u_8_strict,
    field1: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_string_hash_map_value {
    field0: *mut wire_cst_list_prim_u_8_strict,
    field1: wire_cst_hash_map_value,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_string_i_32 {
    field0: *mut wire_cst_list_prim_u_8_strict,
    field1: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_string_kitchen_sink_twin_normal {
    field0: *mut wire_cst_list_prim_u_8_strict,
    field1: wire_cst_kitchen_sink_twin_normal,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_string_kitchen_sink_twin_rust_async {
    field0: *mut wire_cst_list_prim_u_8_strict,
    field1: wire_cst_kitchen_sink_twin_rust_async,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_string_kitchen_sink_twin_sync {
    field0: *mut wire_cst_list_prim_u_8_strict,
    field1: wire_cst_kitchen_sink_twin_sync,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_string_list_prim_u_8_strict {
    field0: *mut wire_cst_list_prim_u_8_strict,
    field1: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_string_my_size {
    field0: *mut wire_cst_list_prim_u_8_strict,
    field1: wire_cst_my_size,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_string_string {
    field0: *mut wire_cst_list_prim_u_8_strict,
    field1: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_u_8_application_mode {
    field0: u8,
    field1: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_sequences {
    field0: *mut wire_cst_list_prim_i_32_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_simple_struct_twin_normal {
    one: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_simple_struct_twin_rust_async {
    one: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_simple_struct_twin_sync {
    one: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_some_struct_twin_normal {
    value: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_some_struct_twin_rust_async {
    value: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_some_struct_twin_sync {
    value: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_speed_twin_normal {
    tag: i32,
    kind: SpeedTwinNormalKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union SpeedTwinNormalKind {
    GPS: wire_cst_SpeedTwinNormal_GPS,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_SpeedTwinNormal_GPS {
    field0: f64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_speed_twin_rust_async {
    tag: i32,
    kind: SpeedTwinRustAsyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union SpeedTwinRustAsyncKind {
    GPS: wire_cst_SpeedTwinRustAsync_GPS,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_SpeedTwinRustAsync_GPS {
    field0: f64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_speed_twin_sync {
    tag: i32,
    kind: SpeedTwinSyncKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union SpeedTwinSyncKind {
    GPS: wire_cst_SpeedTwinSync_GPS,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_SpeedTwinSync_GPS {
    field0: f64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_in_lower_level {
    inner: wire_cst_struct_in_upper_level,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_in_upper_level {
    upper: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_comments_twin_normal {
    field_with_comments: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_comments_twin_rust_async {
    field_with_comments: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_comments_twin_sync {
    field_with_comments: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_enum_twin_normal {
    abc1: wire_cst_abc_twin_normal,
    abc2: wire_cst_abc_twin_normal,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_enum_twin_rust_async {
    abc1: wire_cst_abc_twin_rust_async,
    abc2: wire_cst_abc_twin_rust_async,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_enum_twin_sync {
    abc1: wire_cst_abc_twin_sync,
    abc2: wire_cst_abc_twin_sync,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_explicit_auto_opaque_field_twin_moi {
    auto_opaque: usize,
    normal: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_explicit_auto_opaque_field_twin_normal {
    auto_opaque: usize,
    normal: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_explicit_auto_opaque_field_twin_rust_async {
    auto_opaque: usize,
    normal: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_explicit_auto_opaque_field_twin_rust_async_moi {
    auto_opaque: usize,
    normal: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_explicit_auto_opaque_field_twin_sync {
    auto_opaque: usize,
    normal: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_explicit_auto_opaque_field_twin_sync_moi {
    auto_opaque: usize,
    normal: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_good_and_opaque_field_twin_moi {
    good: *mut wire_cst_list_prim_u_8_strict,
    opaque: usize,
    option_opaque: *mut usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_good_and_opaque_field_twin_normal {
    good: *mut wire_cst_list_prim_u_8_strict,
    opaque: usize,
    option_opaque: *mut usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_good_and_opaque_field_twin_rust_async {
    good: *mut wire_cst_list_prim_u_8_strict,
    opaque: usize,
    option_opaque: *mut usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_good_and_opaque_field_twin_rust_async_moi {
    good: *mut wire_cst_list_prim_u_8_strict,
    opaque: usize,
    option_opaque: *mut usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_good_and_opaque_field_twin_sync {
    good: *mut wire_cst_list_prim_u_8_strict,
    opaque: usize,
    option_opaque: *mut usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_good_and_opaque_field_twin_sync_moi {
    good: *mut wire_cst_list_prim_u_8_strict,
    opaque: usize,
    option_opaque: *mut usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_hash_map {
    map: *mut wire_cst_list_record_string_hash_map_value,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_one_field_twin_normal {
    a: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_one_field_twin_rust_async {
    a: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_one_field_twin_sync {
    a: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_two_field_twin_normal {
    a: i32,
    b: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_two_field_twin_rust_async {
    a: i32,
    b: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_two_field_twin_sync {
    a: i32,
    b: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_zero_field_twin_normal {}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_zero_field_twin_rust_async {}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_struct_with_zero_field_twin_sync {}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_sum_with_twin_normal {
    x: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_sum_with_twin_rust_async {
    x: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_sum_with_twin_sync {
    x: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_test_chrono_twin_normal {
    dt: *mut i64,
    dt2: *mut i64,
    du: *mut i64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_test_chrono_twin_rust_async {
    dt: *mut i64,
    dt2: *mut i64,
    du: *mut i64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_test_chrono_twin_sync {
    dt: *mut i64,
    dt2: *mut i64,
    du: *mut i64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_test_id_twin_normal {
    field0: *mut wire_cst_list_prim_i_32_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_test_id_twin_rust_async {
    field0: *mut wire_cst_list_prim_i_32_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_test_id_twin_sync {
    field0: *mut wire_cst_list_prim_i_32_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_test_model_twin_normal {
    id: u64,
    name: *mut wire_cst_list_prim_u_8_strict,
    alias_enum: i32,
    alias_struct: wire_cst_my_struct,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_test_model_twin_rust_async {
    id: u64,
    name: *mut wire_cst_list_prim_u_8_strict,
    alias_enum: i32,
    alias_struct: wire_cst_my_struct,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_test_model_twin_sync {
    id: u64,
    name: *mut wire_cst_list_prim_u_8_strict,
    alias_enum: i32,
    alias_struct: wire_cst_my_struct,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_tuple_struct_with_one_field_twin_normal {
    field0: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_tuple_struct_with_one_field_twin_rust_async {
    field0: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_tuple_struct_with_one_field_twin_sync {
    field0: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_tuple_struct_with_two_field_twin_normal {
    field0: i32,
    field1: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_tuple_struct_with_two_field_twin_rust_async {
    field0: i32,
    field1: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_tuple_struct_with_two_field_twin_sync {
    field0: i32,
    field1: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_user_id_twin_normal {
    value: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_user_id_twin_rust_async {
    value: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_user_id_twin_sync {
    value: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_vec_of_primitive_pack_twin_normal {
    int8list: *mut wire_cst_list_prim_i_8_strict,
    uint8list: *mut wire_cst_list_prim_u_8_strict,
    int16list: *mut wire_cst_list_prim_i_16_strict,
    uint16list: *mut wire_cst_list_prim_u_16_strict,
    uint32list: *mut wire_cst_list_prim_u_32_strict,
    int32list: *mut wire_cst_list_prim_i_32_strict,
    uint64list: *mut wire_cst_list_prim_u_64_strict,
    int64list: *mut wire_cst_list_prim_i_64_strict,
    float32list: *mut wire_cst_list_prim_f_32_strict,
    float64list: *mut wire_cst_list_prim_f_64_strict,
    bool_list: *mut wire_cst_list_bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_vec_of_primitive_pack_twin_rust_async {
    int8list: *mut wire_cst_list_prim_i_8_strict,
    uint8list: *mut wire_cst_list_prim_u_8_strict,
    int16list: *mut wire_cst_list_prim_i_16_strict,
    uint16list: *mut wire_cst_list_prim_u_16_strict,
    uint32list: *mut wire_cst_list_prim_u_32_strict,
    int32list: *mut wire_cst_list_prim_i_32_strict,
    uint64list: *mut wire_cst_list_prim_u_64_strict,
    int64list: *mut wire_cst_list_prim_i_64_strict,
    float32list: *mut wire_cst_list_prim_f_32_strict,
    float64list: *mut wire_cst_list_prim_f_64_strict,
    bool_list: *mut wire_cst_list_bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_vec_of_primitive_pack_twin_sync {
    int8list: *mut wire_cst_list_prim_i_8_strict,
    uint8list: *mut wire_cst_list_prim_u_8_strict,
    int16list: *mut wire_cst_list_prim_i_16_strict,
    uint16list: *mut wire_cst_list_prim_u_16_strict,
    uint32list: *mut wire_cst_list_prim_u_32_strict,
    int32list: *mut wire_cst_list_prim_i_32_strict,
    uint64list: *mut wire_cst_list_prim_u_64_strict,
    int64list: *mut wire_cst_list_prim_i_64_strict,
    float32list: *mut wire_cst_list_prim_f_32_strict,
    float64list: *mut wire_cst_list_prim_f_64_strict,
    bool_list: *mut wire_cst_list_bool,
}
