#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::api::*;
use flutter_rust_bridge::*;

// Section: imports

// Section: wire functions

#[no_mangle]
pub extern "C" fn wire_take_and_unpack_array(port_: i64, a: *mut wire_MyArray) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "take_and_unpack_array",
            port: Some(port_),
            mode: FfiCallMode::EagerParEval,
        },
        move || {
            let api_a = a.wire2api();
            move |task_callback| Ok(take_and_unpack_array(api_a))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_scale_array(port_: i64, points: *mut wire_list_point, scale: f32) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "scale_array",
            port: Some(port_),
            mode: FfiCallMode::EagerParEval,
        },
        move || {
            let api_points = points.wire2api();
            let api_scale = scale.wire2api();
            move |task_callback| Ok(scale_array(api_points, api_scale))
        },
    )
}

// Section: wire structs

#[repr(C)]
#[derive(Clone)]
pub struct wire_list_point {
    ptr: *mut wire_Point,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_MyArray {
    a: *mut wire_uint_32_list,
    b: *mut wire_uint_16_list,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_Point {
    x: f32,
    y: f32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_uint_16_list {
    ptr: *mut u16,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_uint_32_list {
    ptr: *mut u32,
    len: i32,
}

// Section: wrapper structs

// Section: static checks

// Section: allocate functions

#[no_mangle]
pub extern "C" fn new_box_autoadd_my_array() -> *mut wire_MyArray {
    support::new_leak_box_ptr(wire_MyArray::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_list_point(len: i32) -> *mut wire_list_point {
    let wrap = wire_list_point {
        ptr: support::new_leak_vec_ptr(<wire_Point>::new_with_null_ptr(), len),
        len,
    };
    support::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn new_uint_16_list(len: i32) -> *mut wire_uint_16_list {
    let ans = wire_uint_16_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn new_uint_32_list(len: i32) -> *mut wire_uint_32_list {
    let ans = wire_uint_32_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<[Point; 2]> for *mut wire_list_point {
    fn wire2api(self) -> [Point; 2] {
        use std::convert::TryInto;

        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        let vec = vec
            .iter()
            .cloned()
            .map(Wire2Api::wire2api)
            .collect::<Vec<Point>>();
        if vec.len() == 2 {
            vec.try_into().unwrap()
        } else {
            [Point::default(); 2]
        }
    }
}

impl Wire2Api<[u32; 3]> for *mut wire_uint_32_list {
    fn wire2api(self) -> [u32; 3] {
        use std::convert::TryInto;

        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        if vec.len() == 3 {
            vec.try_into().unwrap()
        } else {
            [u32::default(); 3]
        }
    }
}

impl Wire2Api<MyArray> for *mut wire_MyArray {
    fn wire2api(self) -> MyArray {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}

impl Wire2Api<Vec<Point>> for *mut wire_list_point {
    fn wire2api(self) -> Vec<Point> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(Wire2Api::wire2api).collect()
    }
}

impl Wire2Api<MyArray> for wire_MyArray {
    fn wire2api(self) -> MyArray {
        MyArray {
            a: self.a.wire2api(),
            b: self.b.wire2api(),
        }
    }
}

impl Wire2Api<Point> for wire_Point {
    fn wire2api(self) -> Point {
        Point {
            x: self.x.wire2api(),
            y: self.y.wire2api(),
        }
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}

impl Wire2Api<Vec<u16>> for *mut wire_uint_16_list {
    fn wire2api(self) -> Vec<u16> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

impl Wire2Api<Vec<u32>> for *mut wire_uint_32_list {
    fn wire2api(self) -> Vec<u32> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

// Section: impl NewWithNullPtr

pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}

impl NewWithNullPtr for wire_MyArray {
    fn new_with_null_ptr() -> Self {
        Self {
            a: core::ptr::null_mut(),
            b: core::ptr::null_mut(),
        }
    }
}

impl NewWithNullPtr for wire_Point {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
            y: Default::default(),
        }
    }
}

// Section: impl IntoDart

impl support::IntoDart for Point {
    fn into_dart(self) -> support::DartCObject {
        vec![self.x.into_dart(), self.y.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Point {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: sync execution mode utility

#[no_mangle]
pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct) {
    unsafe {
        let _ = support::vec_from_leak_ptr(val.ptr, val.len);
    }
}
