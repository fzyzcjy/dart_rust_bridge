// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.29.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'rust_auto_opaque_twin_moi.dart';
part 'rust_auto_opaque_twin_rust_async_sse.freezed.dart';

// The type `HelloOneStructTwinRustAsyncSse` is not used by any `pub` functions, thus it is ignored.
// The type `HelloTwoEnumTwinRustAsyncSse` is not used by any `pub` functions, thus it is ignored.

Future<void> rustAutoOpaqueArgOwnTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse arg,
        required int expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueArgOwnTwinRustAsyncSse(
        arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueArgBorrowTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse arg,
        required int expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueArgBorrowTwinRustAsyncSse(
        arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueArgMutBorrowTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse arg,
        required int expect,
        required int adder,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueArgMutBorrowTwinRustAsyncSse(
        arg: arg, expect: expect, adder: adder, hint: hint);

Future<NonCloneSimpleTwinRustAsyncSse> rustAutoOpaqueReturnOwnTwinRustAsyncSse(
        {required int initial, dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueReturnOwnTwinRustAsyncSse(initial: initial, hint: hint);

Future<NonCloneSimpleTwinRustAsyncSse>
    rustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncSse(
            {required NonCloneSimpleTwinRustAsyncSse arg, dynamic hint}) =>
        RustLib.instance.api.rustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncSse(
            arg: arg, hint: hint);

Future<void> rustAutoOpaqueTwoArgsTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse a,
        required NonCloneSimpleTwinRustAsyncSse b,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueTwoArgsTwinRustAsyncSse(a: a, b: b, hint: hint);

Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse a,
        required String b,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncSse(
        a: a, b: b, hint: hint);

/// "+" inside the type signature
Future<void> rustAutoOpaquePlusSignArgTwinRustAsyncSse(
        {required BoxMyTraitTwinRustAsyncSse arg, dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaquePlusSignArgTwinRustAsyncSse(arg: arg, hint: hint);

Future<BoxMyTraitTwinRustAsyncSse> rustAutoOpaquePlusSignReturnTwinRustAsyncSse(
        {dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaquePlusSignReturnTwinRustAsyncSse(hint: hint);

Future<void> rustAutoOpaqueCallableArgTwinRustAsyncSse(
        {required BoxFnStringString arg, dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueCallableArgTwinRustAsyncSse(arg: arg, hint: hint);

Future<BoxFnStringString> rustAutoOpaqueCallableReturnTwinRustAsyncSse(
        {dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueCallableReturnTwinRustAsyncSse(hint: hint);

Future<void> rustAutoOpaqueTraitObjectArgOwnTwinRustAsyncSse(
        {required BoxHelloTraitTwinRustAsyncSse arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueTraitObjectArgOwnTwinRustAsyncSse(
        arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinRustAsyncSse(
        {required BoxHelloTraitTwinRustAsyncSse arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueTraitObjectArgBorrowTwinRustAsyncSse(
        arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsyncSse(
        {required BoxHelloTraitTwinRustAsyncSse arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsyncSse(
        arg: arg, expect: expect, hint: hint);

Future<BoxHelloTraitTwinRustAsyncSse>
    rustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsyncSse({dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsyncSse(hint: hint);

Future<BoxHelloTraitTwinRustAsyncSse>
    rustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsyncSse({dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsyncSse(hint: hint);

Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncSse(
        {required StructWithGoodAndOpaqueFieldTwinRustAsyncSse arg,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncSse(
            arg: arg, hint: hint);

Future<StructWithGoodAndOpaqueFieldTwinRustAsyncSse>
    rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncSse(
            {dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncSse(
                hint: hint);

Future<void> rustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinRustAsyncSse(
        {required EnumWithGoodAndOpaqueTwinRustAsyncSse arg, dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinRustAsyncSse(
            arg: arg, hint: hint);

Future<EnumWithGoodAndOpaqueTwinRustAsyncSse>
    rustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinRustAsyncSse(
            {dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinRustAsyncSse(
                hint: hint);

Future<EnumWithGoodAndOpaqueTwinRustAsyncSse>
    rustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinRustAsyncSse(
            {dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinRustAsyncSse(
                hint: hint);

Future<void> rustAutoOpaqueDummyTwinRustAsyncSse(
        {required StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSse a,
        required EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSse b,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueDummyTwinRustAsyncSse(a: a, b: b, hint: hint);

Future<void> rustAutoOpaqueEnumArgBorrowTwinRustAsyncSse(
        {required NonCloneSimpleEnumTwinRustAsyncSse arg, dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueEnumArgBorrowTwinRustAsyncSse(arg: arg, hint: hint);

Future<NonCloneSimpleEnumTwinRustAsyncSse>
    rustAutoOpaqueEnumReturnOwnTwinRustAsyncSse({dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueEnumReturnOwnTwinRustAsyncSse(hint: hint);

Stream<NonCloneSimpleTwinRustAsyncSse> rustAutoOpaqueStreamSinkTwinRustAsyncSse(
        {dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueStreamSinkTwinRustAsyncSse(hint: hint);

Future<void> rustAutoOpaqueArgVecOwnTwinRustAsyncSse(
        {required List<NonCloneSimpleTwinRustAsyncSse> arg,
        required List<int> expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueArgVecOwnTwinRustAsyncSse(
        arg: arg, expect: expect, hint: hint);

Future<List<NonCloneSimpleTwinRustAsyncSse>>
    rustAutoOpaqueReturnVecOwnTwinRustAsyncSse({dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueReturnVecOwnTwinRustAsyncSse(hint: hint);

Future<void> rustAutoOpaqueExplicitArgTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse arg,
        required int expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueExplicitArgTwinRustAsyncSse(
        arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueExplicitStructTwinRustAsyncSse(
        {required StructWithExplicitAutoOpaqueFieldTwinRustAsyncSse arg,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueExplicitStructTwinRustAsyncSse(arg: arg, hint: hint);

Future<NonCloneSimpleTwinRustAsyncSse>
    rustAutoOpaqueExplicitReturnTwinRustAsyncSse(
            {required int initial, dynamic hint}) =>
        RustLib.instance.api.rustAutoOpaqueExplicitReturnTwinRustAsyncSse(
            initial: initial, hint: hint);

Future<(OpaqueOneTwinRustAsyncSse, OpaqueTwoTwinRustAsyncSse)>
    rustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncSse({dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncSse(hint: hint);

Future<OpaqueTwoTwinRustAsyncSse> rustAutoOpaqueReturnOpaqueTwoTwinRustAsyncSse(
        {dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueReturnOpaqueTwoTwinRustAsyncSse(hint: hint);

Future<int> rustAutoOpaqueBorrowAndMutBorrowTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse borrow,
        required NonCloneSimpleTwinRustAsyncSse mutBorrow,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueBorrowAndMutBorrowTwinRustAsyncSse(
        borrow: borrow, mutBorrow: mutBorrow, hint: hint);

Future<int> rustAutoOpaqueBorrowAndBorrowTwinRustAsyncSse(
        {required NonCloneSimpleTwinRustAsyncSse a,
        required NonCloneSimpleTwinRustAsyncSse b,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueBorrowAndBorrowTwinRustAsyncSse(a: a, b: b, hint: hint);

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinRustAsyncSse >>>
@sealed
class BoxHelloTraitTwinRustAsyncSse extends RustOpaque {
  BoxHelloTraitTwinRustAsyncSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  BoxHelloTraitTwinRustAsyncSse.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_BoxHelloTraitTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsyncSsePtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn MyTraitTwinRustAsyncSse + Send + Sync >>>
@sealed
class BoxMyTraitTwinRustAsyncSse extends RustOpaque {
  BoxMyTraitTwinRustAsyncSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  BoxMyTraitTwinRustAsyncSse.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_BoxMyTraitTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsyncSsePtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSse>>
@sealed
class EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSse extends RustOpaque {
  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSse.dcoDecode(
      List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSse.sseDecode(
      int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSsePtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinRustAsyncSse>>
@sealed
class NonCloneSimpleEnumTwinRustAsyncSse extends RustOpaque {
  NonCloneSimpleEnumTwinRustAsyncSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  NonCloneSimpleEnumTwinRustAsyncSse.sseDecode(
      int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_NonCloneSimpleEnumTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinRustAsyncSsePtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>>
@sealed
class NonCloneSimpleTwinRustAsyncSse extends RustOpaque {
  NonCloneSimpleTwinRustAsyncSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  NonCloneSimpleTwinRustAsyncSse.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_NonCloneSimpleTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsyncSsePtr,
  );

  Future<void> instanceMethodArgBorrowTwinRustAsyncSse({dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseInstanceMethodArgBorrowTwinRustAsyncSse(
        that: this,
      );

  Future<void> instanceMethodArgMutBorrowTwinRustAsyncSse({dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseInstanceMethodArgMutBorrowTwinRustAsyncSse(
        that: this,
      );

  Future<void> instanceMethodArgOwnTwinRustAsyncSse({dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseInstanceMethodArgOwnTwinRustAsyncSse(
        that: this,
      );

  Future<int> get instanceMethodGetterTwinRustAsyncSse => RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseInstanceMethodGetterTwinRustAsyncSse(
        that: this,
      );

  Future<
      NonCloneSimpleTwinRustAsyncSse> instanceMethodReturnOwnTwinRustAsyncSse(
          {dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseInstanceMethodReturnOwnTwinRustAsyncSse(
        that: this,
      );

  /// named constructor
  static Future<NonCloneSimpleTwinRustAsyncSse> newCustomNameTwinRustAsyncSse(
          {dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseNewCustomNameTwinRustAsyncSse(
              hint: hint);

  /// unnamed constructor
  static Future<NonCloneSimpleTwinRustAsyncSse> newTwinRustAsyncSse(
          {dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseNewTwinRustAsyncSse(hint: hint);

  /// constructor with Result
  static Future<NonCloneSimpleTwinRustAsyncSse> newWithResultTwinRustAsyncSse(
          {dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseNewWithResultTwinRustAsyncSse(
              hint: hint);

  static Future<void> staticMethodArgBorrowTwinRustAsyncSse(
          {required NonCloneSimpleTwinRustAsyncSse arg, dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseStaticMethodArgBorrowTwinRustAsyncSse(
              arg: arg, hint: hint);

  static Future<void> staticMethodArgMutBorrowTwinRustAsyncSse(
          {required NonCloneSimpleTwinRustAsyncSse arg, dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseStaticMethodArgMutBorrowTwinRustAsyncSse(
              arg: arg, hint: hint);

  static Future<void> staticMethodArgOwnTwinRustAsyncSse(
          {required NonCloneSimpleTwinRustAsyncSse arg, dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseStaticMethodArgOwnTwinRustAsyncSse(
              arg: arg, hint: hint);

  static Future<NonCloneSimpleTwinRustAsyncSse>
      staticMethodReturnOwnTwinRustAsyncSse({dynamic hint}) => RustLib
          .instance.api
          .nonCloneSimpleTwinRustAsyncSseStaticMethodReturnOwnTwinRustAsyncSse(
              hint: hint);
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncSse>>
@sealed
class OpaqueOneTwinRustAsyncSse extends RustOpaque {
  OpaqueOneTwinRustAsyncSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  OpaqueOneTwinRustAsyncSse.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_OpaqueOneTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncSsePtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncSse>>
@sealed
class OpaqueTwoTwinRustAsyncSse extends RustOpaque {
  OpaqueTwoTwinRustAsyncSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  OpaqueTwoTwinRustAsyncSse.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_OpaqueTwoTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsyncSsePtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSse>>
@sealed
class StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSse
    extends RustOpaque {
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSse.dcoDecode(
      List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSse.sseDecode(
      int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSsePtr,
  );
}

@freezed
sealed class EnumWithGoodAndOpaqueTwinRustAsyncSse
    with _$EnumWithGoodAndOpaqueTwinRustAsyncSse {
  const factory EnumWithGoodAndOpaqueTwinRustAsyncSse.good(
    String field0,
  ) = EnumWithGoodAndOpaqueTwinRustAsyncSse_Good;
  const factory EnumWithGoodAndOpaqueTwinRustAsyncSse.opaque(
    NonCloneSimpleTwinRustAsyncSse field0,
  ) = EnumWithGoodAndOpaqueTwinRustAsyncSse_Opaque;
}

class StructWithExplicitAutoOpaqueFieldTwinRustAsyncSse {
  final NonCloneSimpleTwinRustAsyncSse autoOpaque;
  final int normal;

  const StructWithExplicitAutoOpaqueFieldTwinRustAsyncSse({
    required this.autoOpaque,
    required this.normal,
  });

  @override
  int get hashCode => autoOpaque.hashCode ^ normal.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is StructWithExplicitAutoOpaqueFieldTwinRustAsyncSse &&
          runtimeType == other.runtimeType &&
          autoOpaque == other.autoOpaque &&
          normal == other.normal;
}

class StructWithGoodAndOpaqueFieldTwinRustAsyncSse {
  final String good;
  final NonCloneSimpleTwinRustAsyncSse opaque;
  final NonCloneSimpleTwinRustAsyncSse? optionOpaque;

  const StructWithGoodAndOpaqueFieldTwinRustAsyncSse({
    required this.good,
    required this.opaque,
    this.optionOpaque,
  });

  @override
  int get hashCode => good.hashCode ^ opaque.hashCode ^ optionOpaque.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is StructWithGoodAndOpaqueFieldTwinRustAsyncSse &&
          runtimeType == other.runtimeType &&
          good == other.good &&
          opaque == other.opaque &&
          optionOpaque == other.optionOpaque;
}
