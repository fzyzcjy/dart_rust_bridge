// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.29.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'rust_auto_opaque_twin_moi.dart';
part 'rust_auto_opaque_twin_rust_async_sse_moi.freezed.dart';

// The type `HelloOneStructTwinRustAsyncSseMoi` is not used by any `pub` functions, thus it is ignored.
// The type `HelloTwoEnumTwinRustAsyncSseMoi` is not used by any `pub` functions, thus it is ignored.

Future<void> rustAutoOpaqueArgOwnTwinRustAsyncSseMoi(
        {required NonCloneSimpleTwinRustAsyncSseMoi arg,
        required int expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueArgOwnTwinRustAsyncSseMoi(
        arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueArgBorrowTwinRustAsyncSseMoi(
        {required NonCloneSimpleTwinRustAsyncSseMoi arg,
        required int expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueArgBorrowTwinRustAsyncSseMoi(
        arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueArgMutBorrowTwinRustAsyncSseMoi(
        {required NonCloneSimpleTwinRustAsyncSseMoi arg,
        required int expect,
        required int adder,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueArgMutBorrowTwinRustAsyncSseMoi(
        arg: arg, expect: expect, adder: adder, hint: hint);

Future<NonCloneSimpleTwinRustAsyncSseMoi>
    rustAutoOpaqueReturnOwnTwinRustAsyncSseMoi(
            {required int initial, dynamic hint}) =>
        RustLib.instance.api.rustAutoOpaqueReturnOwnTwinRustAsyncSseMoi(
            initial: initial, hint: hint);

Future<NonCloneSimpleTwinRustAsyncSseMoi>
    rustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncSseMoi(
            {required NonCloneSimpleTwinRustAsyncSseMoi arg, dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncSseMoi(
                arg: arg, hint: hint);

Future<void> rustAutoOpaqueTwoArgsTwinRustAsyncSseMoi(
        {required NonCloneSimpleTwinRustAsyncSseMoi a,
        required NonCloneSimpleTwinRustAsyncSseMoi b,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueTwoArgsTwinRustAsyncSseMoi(a: a, b: b, hint: hint);

Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncSseMoi(
        {required NonCloneSimpleTwinRustAsyncSseMoi a,
        required String b,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncSseMoi(
        a: a, b: b, hint: hint);

/// "+" inside the type signature
Future<void> rustAutoOpaquePlusSignArgTwinRustAsyncSseMoi(
        {required BoxMyTraitTwinRustAsyncSseMoi arg, dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaquePlusSignArgTwinRustAsyncSseMoi(arg: arg, hint: hint);

Future<BoxMyTraitTwinRustAsyncSseMoi>
    rustAutoOpaquePlusSignReturnTwinRustAsyncSseMoi({dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaquePlusSignReturnTwinRustAsyncSseMoi(hint: hint);

Future<void> rustAutoOpaqueCallableArgTwinRustAsyncSseMoi(
        {required BoxFnStringString arg, dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueCallableArgTwinRustAsyncSseMoi(arg: arg, hint: hint);

Future<BoxFnStringString> rustAutoOpaqueCallableReturnTwinRustAsyncSseMoi(
        {dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueCallableReturnTwinRustAsyncSseMoi(hint: hint);

Future<void> rustAutoOpaqueTraitObjectArgOwnTwinRustAsyncSseMoi(
        {required BoxHelloTraitTwinRustAsyncSseMoi arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueTraitObjectArgOwnTwinRustAsyncSseMoi(
        arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinRustAsyncSseMoi(
        {required BoxHelloTraitTwinRustAsyncSseMoi arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueTraitObjectArgBorrowTwinRustAsyncSseMoi(
        arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsyncSseMoi(
        {required BoxHelloTraitTwinRustAsyncSseMoi arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsyncSseMoi(
            arg: arg, expect: expect, hint: hint);

Future<BoxHelloTraitTwinRustAsyncSseMoi>
    rustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsyncSseMoi({dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsyncSseMoi(
                hint: hint);

Future<BoxHelloTraitTwinRustAsyncSseMoi>
    rustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsyncSseMoi({dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsyncSseMoi(
                hint: hint);

Future<
    void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncSseMoi(
        {required StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi arg,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncSseMoi(
            arg: arg, hint: hint);

Future<StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi>
    rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncSseMoi(
            {dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncSseMoi(
                hint: hint);

Future<void> rustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinRustAsyncSseMoi(
        {required EnumWithGoodAndOpaqueTwinRustAsyncSseMoi arg,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinRustAsyncSseMoi(
            arg: arg, hint: hint);

Future<EnumWithGoodAndOpaqueTwinRustAsyncSseMoi>
    rustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinRustAsyncSseMoi(
            {dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinRustAsyncSseMoi(
                hint: hint);

Future<EnumWithGoodAndOpaqueTwinRustAsyncSseMoi>
    rustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinRustAsyncSseMoi(
            {dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinRustAsyncSseMoi(
                hint: hint);

Future<void> rustAutoOpaqueDummyTwinRustAsyncSseMoi(
        {required StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoi
            a,
        required EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoi b,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueDummyTwinRustAsyncSseMoi(a: a, b: b, hint: hint);

Future<void> rustAutoOpaqueEnumArgBorrowTwinRustAsyncSseMoi(
        {required NonCloneSimpleEnumTwinRustAsyncSseMoi arg, dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueEnumArgBorrowTwinRustAsyncSseMoi(arg: arg, hint: hint);

Future<NonCloneSimpleEnumTwinRustAsyncSseMoi>
    rustAutoOpaqueEnumReturnOwnTwinRustAsyncSseMoi({dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueEnumReturnOwnTwinRustAsyncSseMoi(hint: hint);

Stream<NonCloneSimpleTwinRustAsyncSseMoi>
    rustAutoOpaqueStreamSinkTwinRustAsyncSseMoi({dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueStreamSinkTwinRustAsyncSseMoi(hint: hint);

Future<void> rustAutoOpaqueArgVecOwnTwinRustAsyncSseMoi(
        {required List<NonCloneSimpleTwinRustAsyncSseMoi> arg,
        required List<int> expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueArgVecOwnTwinRustAsyncSseMoi(
        arg: arg, expect: expect, hint: hint);

Future<List<NonCloneSimpleTwinRustAsyncSseMoi>>
    rustAutoOpaqueReturnVecOwnTwinRustAsyncSseMoi({dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueReturnVecOwnTwinRustAsyncSseMoi(hint: hint);

Future<void> rustAutoOpaqueExplicitArgTwinRustAsyncSseMoi(
        {required NonCloneSimpleTwinRustAsyncSseMoi arg,
        required int expect,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueExplicitArgTwinRustAsyncSseMoi(
        arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueExplicitStructTwinRustAsyncSseMoi(
        {required StructWithExplicitAutoOpaqueFieldTwinRustAsyncSseMoi arg,
        dynamic hint}) =>
    RustLib.instance.api
        .rustAutoOpaqueExplicitStructTwinRustAsyncSseMoi(arg: arg, hint: hint);

Future<NonCloneSimpleTwinRustAsyncSseMoi>
    rustAutoOpaqueExplicitReturnTwinRustAsyncSseMoi(
            {required int initial, dynamic hint}) =>
        RustLib.instance.api.rustAutoOpaqueExplicitReturnTwinRustAsyncSseMoi(
            initial: initial, hint: hint);

Future<(OpaqueOneTwinRustAsyncSseMoi, OpaqueTwoTwinRustAsyncSseMoi)>
    rustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncSseMoi({dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncSseMoi(hint: hint);

Future<OpaqueTwoTwinRustAsyncSseMoi>
    rustAutoOpaqueReturnOpaqueTwoTwinRustAsyncSseMoi({dynamic hint}) =>
        RustLib.instance.api
            .rustAutoOpaqueReturnOpaqueTwoTwinRustAsyncSseMoi(hint: hint);

Future<int> rustAutoOpaqueBorrowAndMutBorrowTwinRustAsyncSseMoi(
        {required NonCloneSimpleTwinRustAsyncSseMoi borrow,
        required NonCloneSimpleTwinRustAsyncSseMoi mutBorrow,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueBorrowAndMutBorrowTwinRustAsyncSseMoi(
        borrow: borrow, mutBorrow: mutBorrow, hint: hint);

Future<int> rustAutoOpaqueBorrowAndBorrowTwinRustAsyncSseMoi(
        {required NonCloneSimpleTwinRustAsyncSseMoi a,
        required NonCloneSimpleTwinRustAsyncSseMoi b,
        dynamic hint}) =>
    RustLib.instance.api.rustAutoOpaqueBorrowAndBorrowTwinRustAsyncSseMoi(
        a: a, b: b, hint: hint);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinRustAsyncSseMoi >>>
@sealed
class BoxHelloTraitTwinRustAsyncSseMoi extends RustOpaque {
  BoxHelloTraitTwinRustAsyncSseMoi.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  BoxHelloTraitTwinRustAsyncSseMoi.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_BoxHelloTraitTwinRustAsyncSseMoi,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsyncSseMoi,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsyncSseMoiPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn MyTraitTwinRustAsyncSseMoi + Send + Sync >>>
@sealed
class BoxMyTraitTwinRustAsyncSseMoi extends RustOpaque {
  BoxMyTraitTwinRustAsyncSseMoi.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  BoxMyTraitTwinRustAsyncSseMoi.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_BoxMyTraitTwinRustAsyncSseMoi,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsyncSseMoi,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsyncSseMoiPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoi>>
@sealed
class EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoi extends RustOpaque {
  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoi.dcoDecode(
      List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoi.sseDecode(
      int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoi,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoi,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoiPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleEnumTwinRustAsyncSseMoi>>
@sealed
class NonCloneSimpleEnumTwinRustAsyncSseMoi extends RustOpaque {
  NonCloneSimpleEnumTwinRustAsyncSseMoi.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  NonCloneSimpleEnumTwinRustAsyncSseMoi.sseDecode(
      int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_NonCloneSimpleEnumTwinRustAsyncSseMoi,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinRustAsyncSseMoi,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinRustAsyncSseMoiPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>>
@sealed
class NonCloneSimpleTwinRustAsyncSseMoi extends RustOpaque {
  NonCloneSimpleTwinRustAsyncSseMoi.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  NonCloneSimpleTwinRustAsyncSseMoi.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_NonCloneSimpleTwinRustAsyncSseMoi,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsyncSseMoi,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsyncSseMoiPtr,
  );

  Future<void> instanceMethodArgBorrowTwinRustAsyncSseMoi({dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseMoiInstanceMethodArgBorrowTwinRustAsyncSseMoi(
        that: this,
      );

  Future<void> instanceMethodArgMutBorrowTwinRustAsyncSseMoi({dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseMoiInstanceMethodArgMutBorrowTwinRustAsyncSseMoi(
        that: this,
      );

  Future<void> instanceMethodArgOwnTwinRustAsyncSseMoi({dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseMoiInstanceMethodArgOwnTwinRustAsyncSseMoi(
        that: this,
      );

  Future<int> get instanceMethodGetterTwinRustAsyncSseMoi =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseMoiInstanceMethodGetterTwinRustAsyncSseMoi(
        that: this,
      );

  Future<NonCloneSimpleTwinRustAsyncSseMoi>
      instanceMethodReturnOwnTwinRustAsyncSseMoi({dynamic hint}) =>
          RustLib.instance.api
              .nonCloneSimpleTwinRustAsyncSseMoiInstanceMethodReturnOwnTwinRustAsyncSseMoi(
            that: this,
          );

  /// named constructor
  static Future<NonCloneSimpleTwinRustAsyncSseMoi>
      newCustomNameTwinRustAsyncSseMoi({dynamic hint}) => RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseMoiNewCustomNameTwinRustAsyncSseMoi(
              hint: hint);

  /// unnamed constructor
  static Future<NonCloneSimpleTwinRustAsyncSseMoi> newTwinRustAsyncSseMoi(
          {dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseMoiNewTwinRustAsyncSseMoi(hint: hint);

  /// constructor with Result
  static Future<NonCloneSimpleTwinRustAsyncSseMoi>
      newWithResultTwinRustAsyncSseMoi({dynamic hint}) => RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseMoiNewWithResultTwinRustAsyncSseMoi(
              hint: hint);

  static Future<void> staticMethodArgBorrowTwinRustAsyncSseMoi(
          {required NonCloneSimpleTwinRustAsyncSseMoi arg, dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseMoiStaticMethodArgBorrowTwinRustAsyncSseMoi(
              arg: arg, hint: hint);

  static Future<void> staticMethodArgMutBorrowTwinRustAsyncSseMoi(
          {required NonCloneSimpleTwinRustAsyncSseMoi arg, dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseMoiStaticMethodArgMutBorrowTwinRustAsyncSseMoi(
              arg: arg, hint: hint);

  static Future<void> staticMethodArgOwnTwinRustAsyncSseMoi(
          {required NonCloneSimpleTwinRustAsyncSseMoi arg, dynamic hint}) =>
      RustLib.instance.api
          .nonCloneSimpleTwinRustAsyncSseMoiStaticMethodArgOwnTwinRustAsyncSseMoi(
              arg: arg, hint: hint);

  static Future<NonCloneSimpleTwinRustAsyncSseMoi>
      staticMethodReturnOwnTwinRustAsyncSseMoi({dynamic hint}) => RustLib
          .instance.api
          .nonCloneSimpleTwinRustAsyncSseMoiStaticMethodReturnOwnTwinRustAsyncSseMoi(
              hint: hint);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncSseMoi>>
@sealed
class OpaqueOneTwinRustAsyncSseMoi extends RustOpaque {
  OpaqueOneTwinRustAsyncSseMoi.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  OpaqueOneTwinRustAsyncSseMoi.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_OpaqueOneTwinRustAsyncSseMoi,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncSseMoi,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncSseMoiPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncSseMoi>>
@sealed
class OpaqueTwoTwinRustAsyncSseMoi extends RustOpaque {
  OpaqueTwoTwinRustAsyncSseMoi.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  OpaqueTwoTwinRustAsyncSseMoi.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_OpaqueTwoTwinRustAsyncSseMoi,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsyncSseMoi,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsyncSseMoiPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoi>>
@sealed
class StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoi
    extends RustOpaque {
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoi.dcoDecode(
      List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoi.sseDecode(
      int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoi,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoi,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoiPtr,
  );
}

@freezed
sealed class EnumWithGoodAndOpaqueTwinRustAsyncSseMoi
    with _$EnumWithGoodAndOpaqueTwinRustAsyncSseMoi {
  const factory EnumWithGoodAndOpaqueTwinRustAsyncSseMoi.good(
    String field0,
  ) = EnumWithGoodAndOpaqueTwinRustAsyncSseMoi_Good;
  const factory EnumWithGoodAndOpaqueTwinRustAsyncSseMoi.opaque(
    NonCloneSimpleTwinRustAsyncSseMoi field0,
  ) = EnumWithGoodAndOpaqueTwinRustAsyncSseMoi_Opaque;
}

class StructWithExplicitAutoOpaqueFieldTwinRustAsyncSseMoi {
  final NonCloneSimpleTwinRustAsyncSseMoi autoOpaque;
  final int normal;

  const StructWithExplicitAutoOpaqueFieldTwinRustAsyncSseMoi({
    required this.autoOpaque,
    required this.normal,
  });

  @override
  int get hashCode => autoOpaque.hashCode ^ normal.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is StructWithExplicitAutoOpaqueFieldTwinRustAsyncSseMoi &&
          runtimeType == other.runtimeType &&
          autoOpaque == other.autoOpaque &&
          normal == other.normal;
}

class StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi {
  final String good;
  final NonCloneSimpleTwinRustAsyncSseMoi opaque;
  final NonCloneSimpleTwinRustAsyncSseMoi? optionOpaque;

  const StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi({
    required this.good,
    required this.opaque,
    this.optionOpaque,
  });

  @override
  int get hashCode => good.hashCode ^ opaque.hashCode ^ optionOpaque.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi &&
          runtimeType == other.runtimeType &&
          good == other.good &&
          opaque == other.opaque &&
          optionOpaque == other.optionOpaque;
}
