// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.29.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'basic_twin_sse.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<int?> exampleBasicOptionalTypeI8TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeI8TwinSse(arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeI16TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeI16TwinSse(arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeI32TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeI32TwinSse(arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeI64TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeI64TwinSse(arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeU8TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeU8TwinSse(arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeU16TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeU16TwinSse(arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeU32TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeU32TwinSse(arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeU64TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeU64TwinSse(arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeIsizeTwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeIsizeTwinSse(arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeUsizeTwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeUsizeTwinSse(arg: arg, hint: hint);

Future<double?> exampleBasicOptionalTypeF32TwinSse(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeF32TwinSse(arg: arg, hint: hint);

Future<double?> exampleBasicOptionalTypeF64TwinSse(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeF64TwinSse(arg: arg, hint: hint);

Future<bool?> exampleBasicOptionalTypeBoolTwinSse({bool? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeBoolTwinSse(arg: arg, hint: hint);

Future<String?> exampleBasicOptionalTypeStringTwinSse(
        {String? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeStringTwinSse(arg: arg, hint: hint);

Future<Uint8List?> exampleBasicOptionalTypeBytesTwinSse(
        {Uint8List? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeBytesTwinSse(arg: arg, hint: hint);

Future<BasicPrimitiveEnumTwinSse?>
    exampleBasicOptionalTypeBasicPrimitiveEnumTwinSseTwinSse(
            {BasicPrimitiveEnumTwinSse? arg, dynamic hint}) =>
        RustLib.instance.api
            .exampleBasicOptionalTypeBasicPrimitiveEnumTwinSseTwinSse(
                arg: arg, hint: hint);

Future<BasicGeneralEnumTwinSse?>
    exampleBasicOptionalTypeBasicGeneralEnumTwinSseTwinSse(
            {BasicGeneralEnumTwinSse? arg, dynamic hint}) =>
        RustLib.instance.api
            .exampleBasicOptionalTypeBasicGeneralEnumTwinSseTwinSse(
                arg: arg, hint: hint);

Future<BasicStructTwinSse?> exampleBasicOptionalTypeBasicStructTwinSseTwinSse(
        {BasicStructTwinSse? arg, dynamic hint}) =>
    RustLib.instance.api.exampleBasicOptionalTypeBasicStructTwinSseTwinSse(
        arg: arg, hint: hint);
