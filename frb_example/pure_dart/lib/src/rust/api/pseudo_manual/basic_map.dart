// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.29.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'basic.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<Map<int, int>> exampleBasicMapTypeI8TwinNormal(
        {required Map<int, int> arg, dynamic hint}) =>
    RustLib.instance.api.exampleBasicMapTypeI8TwinNormal(arg: arg, hint: hint);

Future<Map<int, int>> exampleBasicMapTypeI16TwinNormal(
        {required Map<int, int> arg, dynamic hint}) =>
    RustLib.instance.api.exampleBasicMapTypeI16TwinNormal(arg: arg, hint: hint);

Future<Map<int, int>> exampleBasicMapTypeI32TwinNormal(
        {required Map<int, int> arg, dynamic hint}) =>
    RustLib.instance.api.exampleBasicMapTypeI32TwinNormal(arg: arg, hint: hint);

Future<Map<int, int>> exampleBasicMapTypeI64TwinNormal(
        {required Map<int, int> arg, dynamic hint}) =>
    RustLib.instance.api.exampleBasicMapTypeI64TwinNormal(arg: arg, hint: hint);

Future<Map<int, int>> exampleBasicMapTypeU8TwinNormal(
        {required Map<int, int> arg, dynamic hint}) =>
    RustLib.instance.api.exampleBasicMapTypeU8TwinNormal(arg: arg, hint: hint);

Future<Map<int, int>> exampleBasicMapTypeU16TwinNormal(
        {required Map<int, int> arg, dynamic hint}) =>
    RustLib.instance.api.exampleBasicMapTypeU16TwinNormal(arg: arg, hint: hint);

Future<Map<int, int>> exampleBasicMapTypeU32TwinNormal(
        {required Map<int, int> arg, dynamic hint}) =>
    RustLib.instance.api.exampleBasicMapTypeU32TwinNormal(arg: arg, hint: hint);

Future<Map<int, int>> exampleBasicMapTypeU64TwinNormal(
        {required Map<int, int> arg, dynamic hint}) =>
    RustLib.instance.api.exampleBasicMapTypeU64TwinNormal(arg: arg, hint: hint);

Future<Map<int, int>> exampleBasicMapTypeIsizeTwinNormal(
        {required Map<int, int> arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicMapTypeIsizeTwinNormal(arg: arg, hint: hint);

Future<Map<int, int>> exampleBasicMapTypeUsizeTwinNormal(
        {required Map<int, int> arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicMapTypeUsizeTwinNormal(arg: arg, hint: hint);

Future<Map<int, double>> exampleBasicMapTypeF32TwinNormal(
        {required Map<int, double> arg, dynamic hint}) =>
    RustLib.instance.api.exampleBasicMapTypeF32TwinNormal(arg: arg, hint: hint);

Future<Map<int, double>> exampleBasicMapTypeF64TwinNormal(
        {required Map<int, double> arg, dynamic hint}) =>
    RustLib.instance.api.exampleBasicMapTypeF64TwinNormal(arg: arg, hint: hint);

Future<Map<int, bool>> exampleBasicMapTypeBoolTwinNormal(
        {required Map<int, bool> arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicMapTypeBoolTwinNormal(arg: arg, hint: hint);

Future<Map<int, String>> exampleBasicMapTypeStringTwinNormal(
        {required Map<int, String> arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicMapTypeStringTwinNormal(arg: arg, hint: hint);

Future<Map<int, Uint8List>> exampleBasicMapTypeBytesTwinNormal(
        {required Map<int, Uint8List> arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicMapTypeBytesTwinNormal(arg: arg, hint: hint);

Future<Map<int, BasicPrimitiveEnumTwinNormal>>
    exampleBasicMapTypeBasicPrimitiveEnumTwinNormalTwinNormal(
            {required Map<int, BasicPrimitiveEnumTwinNormal> arg,
            dynamic hint}) =>
        RustLib.instance.api
            .exampleBasicMapTypeBasicPrimitiveEnumTwinNormalTwinNormal(
                arg: arg, hint: hint);

Future<Map<int, BasicGeneralEnumTwinNormal>>
    exampleBasicMapTypeBasicGeneralEnumTwinNormalTwinNormal(
            {required Map<int, BasicGeneralEnumTwinNormal> arg,
            dynamic hint}) =>
        RustLib.instance.api
            .exampleBasicMapTypeBasicGeneralEnumTwinNormalTwinNormal(
                arg: arg, hint: hint);

Future<Map<int, BasicStructTwinNormal>>
    exampleBasicMapTypeBasicStructTwinNormalTwinNormal(
            {required Map<int, BasicStructTwinNormal> arg, dynamic hint}) =>
        RustLib.instance.api.exampleBasicMapTypeBasicStructTwinNormalTwinNormal(
            arg: arg, hint: hint);
