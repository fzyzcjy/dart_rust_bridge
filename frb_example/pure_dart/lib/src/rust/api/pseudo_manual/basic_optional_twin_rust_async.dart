// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.29.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'basic_twin_rust_async.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<int?> exampleBasicOptionalTypeI8TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeI8TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeI16TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeI16TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeI32TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeI32TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeI64TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeI64TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeU8TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeU8TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeU16TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeU16TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeU32TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeU32TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeU64TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeU64TwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeIsizeTwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeIsizeTwinRustAsync(arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeUsizeTwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeUsizeTwinRustAsync(arg: arg, hint: hint);

Future<double?> exampleBasicOptionalTypeF32TwinRustAsync(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeF32TwinRustAsync(arg: arg, hint: hint);

Future<double?> exampleBasicOptionalTypeF64TwinRustAsync(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeF64TwinRustAsync(arg: arg, hint: hint);

Future<bool?> exampleBasicOptionalTypeBoolTwinRustAsync(
        {bool? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeBoolTwinRustAsync(arg: arg, hint: hint);

Future<String?> exampleBasicOptionalTypeStringTwinRustAsync(
        {String? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeStringTwinRustAsync(arg: arg, hint: hint);

Future<Uint8List?> exampleBasicOptionalTypeBytesTwinRustAsync(
        {Uint8List? arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicOptionalTypeBytesTwinRustAsync(arg: arg, hint: hint);

Future<BasicPrimitiveEnumTwinRustAsync?>
    exampleBasicOptionalTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
            {BasicPrimitiveEnumTwinRustAsync? arg, dynamic hint}) =>
        RustLib.instance.api
            .exampleBasicOptionalTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
                arg: arg, hint: hint);

Future<BasicGeneralEnumTwinRustAsync?>
    exampleBasicOptionalTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
            {BasicGeneralEnumTwinRustAsync? arg, dynamic hint}) =>
        RustLib.instance.api
            .exampleBasicOptionalTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
                arg: arg, hint: hint);

Future<BasicStructTwinRustAsync?>
    exampleBasicOptionalTypeBasicStructTwinRustAsyncTwinRustAsync(
            {BasicStructTwinRustAsync? arg, dynamic hint}) =>
        RustLib.instance.api
            .exampleBasicOptionalTypeBasicStructTwinRustAsyncTwinRustAsync(
                arg: arg, hint: hint);
