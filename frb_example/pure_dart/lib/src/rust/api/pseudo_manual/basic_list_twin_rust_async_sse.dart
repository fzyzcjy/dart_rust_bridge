// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.29.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'basic_twin_rust_async_sse.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<Int8List> exampleBasicListTypeI8TwinRustAsyncSse(
        {required List<int> arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicListTypeI8TwinRustAsyncSse(arg: arg, hint: hint);

Future<Int16List> exampleBasicListTypeI16TwinRustAsyncSse(
        {required List<int> arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicListTypeI16TwinRustAsyncSse(arg: arg, hint: hint);

Future<Int32List> exampleBasicListTypeI32TwinRustAsyncSse(
        {required List<int> arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicListTypeI32TwinRustAsyncSse(arg: arg, hint: hint);

Future<Int64List> exampleBasicListTypeI64TwinRustAsyncSse(
        {required Int64List arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicListTypeI64TwinRustAsyncSse(arg: arg, hint: hint);

Future<Uint8List> exampleBasicListTypeU8TwinRustAsyncSse(
        {required List<int> arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicListTypeU8TwinRustAsyncSse(arg: arg, hint: hint);

Future<Uint16List> exampleBasicListTypeU16TwinRustAsyncSse(
        {required List<int> arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicListTypeU16TwinRustAsyncSse(arg: arg, hint: hint);

Future<Uint32List> exampleBasicListTypeU32TwinRustAsyncSse(
        {required List<int> arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicListTypeU32TwinRustAsyncSse(arg: arg, hint: hint);

Future<Uint64List> exampleBasicListTypeU64TwinRustAsyncSse(
        {required Uint64List arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicListTypeU64TwinRustAsyncSse(arg: arg, hint: hint);

Future<Float32List> exampleBasicListTypeF32TwinRustAsyncSse(
        {required List<double> arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicListTypeF32TwinRustAsyncSse(arg: arg, hint: hint);

Future<Float64List> exampleBasicListTypeF64TwinRustAsyncSse(
        {required List<double> arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicListTypeF64TwinRustAsyncSse(arg: arg, hint: hint);

Future<List<bool>> exampleBasicListTypeBoolTwinRustAsyncSse(
        {required List<bool> arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicListTypeBoolTwinRustAsyncSse(arg: arg, hint: hint);

Future<List<String>> exampleBasicListTypeStringTwinRustAsyncSse(
        {required List<String> arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicListTypeStringTwinRustAsyncSse(arg: arg, hint: hint);

Future<List<Uint8List>> exampleBasicListTypeBytesTwinRustAsyncSse(
        {required List<Uint8List> arg, dynamic hint}) =>
    RustLib.instance.api
        .exampleBasicListTypeBytesTwinRustAsyncSse(arg: arg, hint: hint);

Future<List<BasicPrimitiveEnumTwinRustAsyncSse>>
    exampleBasicListTypeBasicPrimitiveEnumTwinRustAsyncSseTwinRustAsyncSse(
            {required List<BasicPrimitiveEnumTwinRustAsyncSse> arg,
            dynamic hint}) =>
        RustLib.instance.api
            .exampleBasicListTypeBasicPrimitiveEnumTwinRustAsyncSseTwinRustAsyncSse(
                arg: arg, hint: hint);

Future<List<BasicGeneralEnumTwinRustAsyncSse>>
    exampleBasicListTypeBasicGeneralEnumTwinRustAsyncSseTwinRustAsyncSse(
            {required List<BasicGeneralEnumTwinRustAsyncSse> arg,
            dynamic hint}) =>
        RustLib.instance.api
            .exampleBasicListTypeBasicGeneralEnumTwinRustAsyncSseTwinRustAsyncSse(
                arg: arg, hint: hint);

Future<List<BasicStructTwinRustAsyncSse>>
    exampleBasicListTypeBasicStructTwinRustAsyncSseTwinRustAsyncSse(
            {required List<BasicStructTwinRustAsyncSse> arg, dynamic hint}) =>
        RustLib.instance.api
            .exampleBasicListTypeBasicStructTwinRustAsyncSseTwinRustAsyncSse(
                arg: arg, hint: hint);
