// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.29.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:collection/collection.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<SumWithTwinNormal> getSumStructTwinNormal({dynamic hint}) =>
    RustLib.instance.api.getSumStructTwinNormal(hint: hint);

Future<SumWithTwinNormalArray3> getSumArrayTwinNormal(
        {required int a, required int b, required int c, dynamic hint}) =>
    RustLib.instance.api.getSumArrayTwinNormal(a: a, b: b, c: c, hint: hint);

class ConcatenateWithTwinNormal {
  final String a;

  const ConcatenateWithTwinNormal({
    required this.a,
  });

  static Future<String> concatenateStaticTwinNormal(
          {required String a, required String b, dynamic hint}) =>
      RustLib.instance.api.concatenateWithTwinNormalConcatenateStaticTwinNormal(
          a: a, b: b, hint: hint);

  Future<String> concatenateTwinNormal({required String b, dynamic hint}) =>
      RustLib.instance.api.concatenateWithTwinNormalConcatenateTwinNormal(
        that: this,
        b: b,
      );

  static Stream<int> handleSomeStaticStreamSinkSingleArgTwinNormal(
          {dynamic hint}) =>
      RustLib.instance.api
          .concatenateWithTwinNormalHandleSomeStaticStreamSinkSingleArgTwinNormal(
              hint: hint);

  static Stream<Log2TwinNormal> handleSomeStaticStreamSinkTwinNormal(
          {required int key, required int max, dynamic hint}) =>
      RustLib.instance.api
          .concatenateWithTwinNormalHandleSomeStaticStreamSinkTwinNormal(
              key: key, max: max, hint: hint);

  Stream<int> handleSomeStreamSinkAt1TwinNormal({dynamic hint}) =>
      RustLib.instance.api
          .concatenateWithTwinNormalHandleSomeStreamSinkAt1TwinNormal(
        that: this,
      );

  Stream<Log2TwinNormal> handleSomeStreamSinkTwinNormal(
          {required int key, required int max, dynamic hint}) =>
      RustLib.instance.api
          .concatenateWithTwinNormalHandleSomeStreamSinkTwinNormal(
        that: this,
        key: key,
        max: max,
      );

  static Future<ConcatenateWithTwinNormal> newTwinNormal(
          {required String a, dynamic hint}) =>
      RustLib.instance.api
          .concatenateWithTwinNormalNewTwinNormal(a: a, hint: hint);

  Future<String> get simpleGetterTwinNormal =>
      RustLib.instance.api.concatenateWithTwinNormalSimpleGetterTwinNormal(
        that: this,
      );

  @override
  int get hashCode => a.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConcatenateWithTwinNormal &&
          runtimeType == other.runtimeType &&
          a == other.a;
}

class Log2TwinNormal {
  final int key;
  final String value;

  const Log2TwinNormal({
    required this.key,
    required this.value,
  });

  @override
  int get hashCode => key.hashCode ^ value.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Log2TwinNormal &&
          runtimeType == other.runtimeType &&
          key == other.key &&
          value == other.value;
}

class MyCallableTwinNormal {
  final String one;

  const MyCallableTwinNormal({
    required this.one,
  });

  Future<String> call({required String two, dynamic hint}) =>
      RustLib.instance.api.myCallableTwinNormalCall(
        that: this,
        two: two,
      );

  @override
  int get hashCode => one.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is MyCallableTwinNormal &&
          runtimeType == other.runtimeType &&
          one == other.one;
}

class SimpleStructTwinNormal {
  final String one;

  const SimpleStructTwinNormal({
    required this.one,
  });

  static Future<String> argSelfTwinNormal(
          {required SimpleStructTwinNormal a,
          required SimpleStructTwinNormal b,
          dynamic hint}) =>
      RustLib.instance.api
          .simpleStructTwinNormalArgSelfTwinNormal(a: a, b: b, hint: hint);

  static Future<SimpleStructTwinNormal> returnSelfTwinNormal(
          {required String one, dynamic hint}) =>
      RustLib.instance.api
          .simpleStructTwinNormalReturnSelfTwinNormal(one: one, hint: hint);

  static Future<List<String>> vecSelfTwinNormal(
          {required List<SimpleStructTwinNormal> arg, dynamic hint}) =>
      RustLib.instance.api
          .simpleStructTwinNormalVecSelfTwinNormal(arg: arg, hint: hint);

  @override
  int get hashCode => one.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SimpleStructTwinNormal &&
          runtimeType == other.runtimeType &&
          one == other.one;
}

class SumWithTwinNormal {
  final int x;

  const SumWithTwinNormal({
    required this.x,
  });

  Future<int> sumTwinNormal({required int y, required int z, dynamic hint}) =>
      RustLib.instance.api.sumWithTwinNormalSumTwinNormal(
        that: this,
        y: y,
        z: z,
      );

  @override
  int get hashCode => x.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SumWithTwinNormal &&
          runtimeType == other.runtimeType &&
          x == other.x;
}

class SumWithTwinNormalArray3 extends NonGrowableListView<SumWithTwinNormal> {
  static const arraySize = 3;

  @internal
  List<SumWithTwinNormal> get inner => _inner;
  final List<SumWithTwinNormal> _inner;

  SumWithTwinNormalArray3(this._inner)
      : assert(_inner.length == arraySize),
        super(_inner);

  SumWithTwinNormalArray3.init(SumWithTwinNormal fill)
      : this(List<SumWithTwinNormal>.filled(arraySize, fill));
}
